(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.affinity = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('./lib');
},{"./lib":101}],2:[function(require,module,exports){
var Base = require('./Base.js');
var Type = require('./Type.js');
var _ = require('lodash');

var Attribute = Base.extend(

    {

        /**
         * @class Attribute
         * @extends Base
         * @param {Object} args
         * @param {String|null} [args.name] The name of the {@link Attribute}
         * @param {Type|null} [args.type] The {@link Type} of the {@link Attribute}
         * @param {*} [args.default] The default value of the Attribute
         *
         *
         * A {@link Relation}'s {@link Header} is composed of Attributes.
         *
         * An {@link Attribute} is simply an ordered {@link Set} {name : String, type : {@link Type}}
         *
         * The {@link Type} of an {@link Attribute} is a class that is mainly used to compare the values of the
         * Relation's tuples for this attibute.
         *
         * For example,
         * when running an {@link Operators.Union} on a {@link Relation}, the {@link Tuple}s will be tested for equality so that the
         * {@link Relation} does not include duplicates (as the mathematical definition of a {@link Set} tells us).
         * To do this, we compare two {@link Tuple} by comparing the value of their {@link Attribute}s. If for these two
         * {@link Tuple}s, all their {@link Attribute} values are equal, the two {@link Tuple}s are said to be equal.
         *
         * To test the equality of primitive {@link Attribute}s (String, Boolean, Integer...), this is easy.
         * We test the equality of two {@link Attribute}s with the equality operator "==".
         *
         * Though, when it comes to Object {@link Attribute}s, it is not possible to test the equality with the equality operator
         * "==". We need a function that will test the two objects for equality and that will return true/false.
         *
         * To resume, the {@link Type} of an {@link Attribute} must implement the methods used to compare the corresponding
         * {@link Tuple} {@link Attribute} values.
         *
         * For {@link Types.Numeric} {@link Type}s, the {@link Type} will also implement other comparison operators such as LargerThan (.lt()) ...
         *
         * For {@link Types.Date} {@link Type}s, the {@link Type} will also implement other operators such as DayOfWeek, ...
         *
         *     var fn = new affinity.Attribute({name : 'FirstName', type : 'affinity.String'})
         *     var ln = new affinity.Attribute({name : 'LastName', type : 'affinity.String'})
         *
         */
        constructor: function (args) {

            /**
             * Tells if the attribute was _negated in an expression
             * @private
             * @type {boolean}
             */
            this._negated = false;

            /**
             * Default value for the attribute
             * @type {undefined}
             * @private
             */
            this._default = undefined;

            /**
             * Tells if the attribute is an auto incrementing attribute
             * @type {boolean}
             * @private
             */
            this._autoIncrement = false;

            /**
             * Tells if the attribute is a calculated attribute
             * @type {boolean}
             * @private
             */
            this._calculated = false;

            /**
             * Name of the attribute
             * @type {String}
             */
            this.name = undefined;

            /**
             * Type of the attribute
             * @type {Type}
             */
            this.type = undefined;

            // Check if the args are given
            if (args) {

                // Check if the name arg is given
                if (args.name) {

                    // Check if the name arg is of good type
                    if (!_.isString(args.name)) {

                        // If the name is not a string, throw
                        throw new TypeError('Name is of wrong type');

                    } else {

                        // Name arg seems to be legit
                        this.name = args.name;
                    }
                } else {

                    // If the name arg is not given, set it to null
                    this.name = null;
                }

                // Check if the type arg is given
                if (args.type) {

                    // Check if the type arg is of good type
                    if (!(args.type.prototype instanceof Type) && !(args.type.__proto__ instanceof Type)) {

                        // If the type arg is not of type Type, throw
                        throw new TypeError('Type is of wrong type')

                    } else {
                        // Type arg seems to be legit
                        this.type = args.type;

                        _.forIn(args.type.payload, function(mix){

                            _.forIn(mix, function (mixin, key) {

                                this[key] = mixin;

                            },this)

                        },this);

                    }

                } else {
                    // If the type arg is not given, set it to null
                    this.type = null;
                }

                if (args.hasOwnProperty('default')){
                    this._default = args.default;
                }

                if (args.hasOwnProperty('autoIncrement')){
                    this._autoIncrement = args.autoIncrement;
                }

            }

            Base.apply(this, arguments);
        },

        /**
         * Calculted Property getter setter
         * @param {Boolean} isCalculated
         * @return {undefined|Boolean}
         */
        calculated : function(isCalculated){

            if(_.isBoolean(isCalculated)){
                this._calculated = isCalculated;
            } else {
                return this._calculated;
            }

        },

        /**
         * Clones the Attribute object
         * @return {Attribute} cloned attribute
         *
         *     var fn = new affinity.Attribute({name : 'FirstName',affinity.String});
         *
         *     var ln = attribute.clone();
         *
         *     ln.equal(fn) // true
         *
         *     ln.name = 'LastName';
         *
         *     ln.equal(fn) // false
         *
         *
         */
        clone: function () {

            var attr = new this.constructor({type: this.type, name: this.name});

            if (this.relationHeader) {
                attr.relationHeader = this.relationHeader;
;           }

            if (this.wrappedAttributes){
                attr.wrappedAttributes = this.wrappedAttributes;
            }

            attr.calculated(this.calculated());

            return attr;
        },

        /**
         * Checks if the attribute is being _negated in a predicate
         * @param expression
         * @returns {*}
         * @private
         */
        _checkNegatedAttribute: function (expression) {

            if (this._negated) {
                this._negated = false;
                return new (require('./functions/connective/Not.js'))(expression);

            } else {

                return expression;
            }

        },

        /**
         * String representation of the attribute. Used to print a Relation into console
         * as a Unicode Table
         * @private
         */
        toString: function () {

            return this.name + ' : ' + this.type.toString();

        },

        /**
         * Checks if two attributes are equal
         * @param attribute
         * @returns {boolean}
         */
        equal : function(attribute){

            return this.constructor.equal(this, attribute);

        },

        default : function(){

            if(this._autoIncrement){
                return this.header.relation.length() + this.header.relation._deletedCount;
            }

            return this._default;
        }

    }, {

        type : 'Attribute',

        /**
         * Asserts that a given name is valid for an attribute
         * @private
         * @param name
         */
        assertValidName : function(name){

            if(!_.isString(name)){
                throw new Error('Name must be a string')
            }

            if(name === ''){
                throw new Error('Attribute name cannot be empty string');
            }

        },

        /**
         * Tests for equality between two attributes
         *
         * This method returns a Boolean. It cannot be part of a predicate.
         *
         * @param {Attribute} attribute1
         * @param {Attribute} attribute2
         * @returns {boolean}
         * @static

         */
        equal: function (attribute1, attribute2) {

            return ((attribute1.name === attribute2.name) && (attribute1.type === attribute2.type))

        },

        /**
         * Coerces an arbitrary object to type Attribute
         * @param {Attribute|Object} attribute
         * @returns {Attribute}
         * @static
         *
         *     var fn1 = new affinity.Attribute({name : 'FirstName', type : affinity.String});
         *
         *     var fn2 = {name : 'FirstName' , type : affinity.String}
         *
         *     affinity.Attribute.coerce(fn1) === fn1 // true, the object was already an Attribute.
         *     affinity.Attribute.coerce(fn2) === fn2 // false, the object had to be coerced
         *
         *     affinity.Attribute.coerce(fn2).equal(fn1) // true
         *
         */
        coerce: function (attribute) {


            var name;
            var type;
            var attr;
            var keys;
            var autoIncrement;
            var defaultValue;

            if (attribute instanceof Attribute) {

                return attribute;

            }

            if(_.isObject(attribute)){

                // Attribute is of the type {name : <name>, type : <type>}
                if(attribute.type && attribute.name){

                    name = attribute.name;
                    type = attribute.type;
                    autoIncrement = attribute.autoIncrement;
                    defaultValue = attribute.default;

                } else {

                    // Attribute is either
                    // { <name> : { type : <type> } }
                    // { <name> : <Attribute> }

                    keys = _.keys(attribute);

                    if (keys.length !== 1){
                        throw new Error('Unsupported Attribute declaration');
                    }

                    // Name of the Attribute
                    name = keys[0];

                    // Attribute object
                    attr = attribute[name];


                    if(attr instanceof Attribute){

                        // Attribute is { <name> : <Attribute>}

                        attr.name = name;

                        return attr;

                    } else if(attr.type){

                        // Attribute is { <name> : { type : <type> } }

                        type = attribute[name].type;
                        autoIncrement = attribute[name].autoIncrement;
                        defaultValue = attribute[name].default;

                    }

                }

            }

            return new Attribute({name : name, type : type, autoIncrement : autoIncrement, default : defaultValue});

        }

    });

module.exports = Attribute;

},{"./Base.js":3,"./Type.js":12,"./functions/connective/Not.js":45,"lodash":103}],3:[function(require,module,exports){
var _ = require('lodash');
// Helper function to correctly set up the prototype chain, for subclasses.
// Similar to `goog.inherits`, but uses a hash of prototype properties and
// class properties to be extended.
var extend = function (protoProps, staticProps) {

    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
        child = protoProps.constructor;
    } else {
        child = function () {
            return parent.apply(this, arguments);
        };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function () {
        this.constructor = child;
    };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;

};

/**
 * @class Base
 */
var Base = function () {

};

/**
 * @member Base
 * @method extend
 */
Base.extend = extend;

/**
 * @member Base
 */
Base.mixin = function(mixin){
    _.extend(this.prototype, mixin);
};

module.exports = Base;
},{"lodash":103}],4:[function(require,module,exports){
var Base = require('./Base'),
    Index = require('./Index'),
    Header = require('./Header'),
    _ = require('lodash'),
    Attribute = require('./Attribute'),
    Tuple = require('./Tuple'),
    debug = require('./helpers/debug'),
    equal = require('./helpers/equal');

var ForeignKey = Base.extend({

    /**
     * @class ForeignKey
     * @extends Base
     * @param {Object} params
     * @param {Relation} params.relation
     * @param {string|string[]|Header} params.columnNames
     * @param {Relation} params.referencedRelation
     * @param {string|string[]|Header} params.referencedColumnNames
     * @param {string} params.onUpdate
     * @param {string} params.onDelete
     *
     * The ForeignKey class represents foreign keys to a relation.
     *
     * The foreign key enforces the relational integrity of different relations.
     *
     *
     *     var dogs = new affinity.Relation([
     *          {id : {type : affinity.Integer}},
     *          {ownerId : {type : affinity.Integer}},
     *          {name : {type : affinity.Integer}},
     *      ],[
     *          [0, 0, 'Fido'],
     *          [1, 0, 'Bobby'],
     *          [2, 1, 'Stacey'],
     *          [3, 2, 'Ceasar'],
     *      ],{
     *          pk : ['id'],
     *          fk : [
     *              {
     *                  columnNames           : ['ownerId'],
     *                  referencedRelation    : people,
     *                  referencedColumnNames : ['id'],
     *                  onUpdate              : 'cascade',
     *                  onDelete              : 'restrict'
 *                  },
     *              ...
     *          ]
     *      });
     */
    constructor: function (params) {

        debug.foreignKey.trace('#constructor');

        // relation, columnNames, referencedRelation, referencedColumnNames, onUpdate, onDelete

        /** @property {Header} columns */
        this.columns = null;

        /** @property {Header} referencedColumns */
        this.referencedColumns = null;

        /** @property {Relation} relation */
        this.relation = params.relation;

        /** @property {Relation} referencedRelation */
        this.referencedRelation = params.selfReferencing ? this.relation : params.referencedRelation;

        // Validate columnNames parameter

        if (params.columnNames instanceof Header) {

            // columnNames is already a header
            if (!params.columnNames.isSubset(relation.header()))
                throw new Error('Parameter columnNames passed as invalid Header. ');

            this.columns = params.columnNames;

        } else {

            if(!_.isArray(params.columnNames)){
                params.columnNames = [params.columnNames];
            }

            this.columns =  this.relation.header().clone().project(params.columnNames);

        }


        // Validate referencedColumnNames parameter

        if (params.referencedColumnNames instanceof Header) {

            // referencedColumnNames is already a header
            if (!params.referencedColumnNames.isSubset(params.referencedRelation.header()))
                throw new Error('Parameter referencedColumnNames passed as invalid Header. ');

            this.referencedColumns = params.referencedColumnNames;

        } else {

            if(!_.isArray(params.referencedColumnNames)){
                params.referencedColumnNames = [params.referencedColumnNames];
            }
            this.referencedColumns = this.referencedRelation.header().clone().project(params.referencedColumnNames);

        }

        //todo : Verify onUpdate
        //todo : Verify onDelete

        var that = this;


        // Check that the added tuple respects the foreign key constraint before adding the tuple

        this.relation.ee.on('afterAdd', function(tuple, tupleIndex){

            debug.foreignKey.trace('#beforeAdd');

            try {

                that.checkForeignKeyConstraint(tuple);

            } catch (err) {

                that.relation.removeAt(tupleIndex);

                throw(err);

            }

        });

        // Remove then add the tuple from index before the tuple update

        this.relation.ee.on('beforeUpdate', function(tuple, attributeName, attributeValue){

            debug.foreignKey.trace('#beforeUpdate');

            var projectedTuple = tuple.clone();

            projectedTuple.set(attributeName, attributeValue);

            that.checkForeignKeyConstraint(projectedTuple);

        });

    },

    checkForeignKeyConstraint : function(tuple){

        debug.foreignKey.trace('#checkForeignKeyConstraint');

        var that = this,
            keyTuple,
            temporaryRelation,
            Relation,
            projectedReferencedRelation,
            intersectedRelation;


        /// Build a tuple containing the required values for the given referenced columns

        keyTuple = new Tuple();

        that.referencedColumns.each(function(referencedAttribute, attributeIndex){

            var attribute = that.columns.atIndex(attributeIndex);

            keyTuple.set(referencedAttribute.name, tuple.get(attribute.name));

        });

        that.referencedRelation.each(function(tuple, index){

            var result = true;

            keyTuple.each(function(attribute){

                if (!equal(null, keyTuple.get(attribute), tuple.get(attribute))){
                    result = false;
                    return false;
                }

            });

            if (result == false){
                throw new Error('Foreign key constraint check fail')
            }

        });

    }

},{

    cascadeValues : ['cascade', 'prevent']

});

module.exports = ForeignKey;
},{"./Attribute":2,"./Base":3,"./Header":6,"./Index":7,"./Tuple":11,"./helpers/debug":82,"./helpers/equal":83,"lodash":103}],5:[function(require,module,exports){
var Base = require('./Base.js');
var _ = require('lodash');
var Attribute = require('./Attribute');

var Function = Base.extend(

    {

        /**
         * @class Function
         * @param parameters
         * @property [Array] parameters
         */
        constructor: function (parameters) {

            this.parameters = [];


            for (var i = 0, j = arguments.length; i < j; i++) {

                this.parameters.push(arguments[i]);

            }

            Base.apply(this, arguments);

        },

        /**
         * Sets the function's parameter
         * @param {Object} param The parameter of the function to set
         * @returns {Function} Returns this to chain call
         */
        set: function (param) {

            for (var a in param) {
                if (param.hasOwnProperty(a))
                    this[a] = param[a];
            }

            _.forEach(this.args, function (arg) {
                if (arg instanceof Function) {
                    arg.set(param);
                }
            });

            return this;

        },

        /**
         * Helper function used to convert attributes objects into functions that will get the tuple
         * value for that attribute
         */
        convertAttributeToTuple: function () {

            _.forEach(this.parameters, function (parameter, index) {

                if (_.isFunction(parameter.convertAttributeToTuple)) {
                    parameter.convertAttributeToTuple();
                }

                if (parameter instanceof Attribute) {

                    var newFunc = new (require('./functions/tuple/Attribute'))(parameter.name);

                    newFunc.type = parameter.type;

                    this.parameters[index] = newFunc;
                }

            }, this);

        },

        assignTuple : function(tuple){

            _.forEach(this.parameters, function (parameter, index) {

                if (parameter instanceof Function) {

                    parameter.assignTuple(tuple);

                }

            }, this);

            return this;

        },


        type : function(type){

            if(type){

                this._type = type;

                _.forIn(type.payload, function (mix) {

                    _.forIn(mix, function(mixin, key){

                        this[key] = mixin;

                    }, this)

                }, this)

            } else {
                return this._type;
            }

        }

    });

module.exports = Function;
},{"./Attribute":2,"./Base.js":3,"./functions/tuple/Attribute":78,"lodash":103}],6:[function(require,module,exports){
var Attribute = require('./Attribute.js');
var Set = require('./Set.js');
var _ = require('lodash');
var TString = require('./types/String');
var TType = require('./types/Type');
var debug = require('./helpers/debug.js');

var Header = Set.extend(

    {

        /**
         * Header object constructor.
         *
         * @class Header
         * @extends Set
         * @param {Object} [attributes]
         * @throws The attributes are not passed in Array format
         *
         *
         * A {@link Header} is one of the two main parts of a
         * {@link Relation}, along with the Body (which is a {@link Set}).
         *
         * It is a {@link Set} of {@link Attribute}s. It defines the structure of the
         * {@link Tuple}s that will be part of the body of the
         * {@link Relation}. Each {@link Tuple} in a
         * {@link Relation} must match its {@link Header}
         *
         *     var header = new affinity.header([
         *          {firstname : affinity.string},
         *          {lastname : affinity.string}
         *     ])
         *
         *     var relation = new affinity.relation(); // create an empty relation without a header and without body
         *
         *     relation.header(header); // sets the relation's header
         *
         *     relation.add({firstName : 'John', lastName : 'Doe'}); // Add a tuple in the Relation that matches the header
         *
         *
         */
        constructor: function (attributes) {

            debug.header.trace('#constructor');

            var result = [];

            /**
             * Attributes of the relation
             * @type {Object}
             * @private
             */
            this._attributes = {};

            /**
             * Tells if the relation was declared in an ordered way or not
             * @type {boolean}
             * @private
             */
            this._orderedDeclaration = false;

            if (attributes) {

                // There are attributes in the arguments

                if(_.isObject(attributes)){

                    // Attributes is either an array or an object

                    if(!_.isArray(attributes)){

                        // Attributes is an Object
                        // { <name> : {type : <type>}, <name> : {type : <type>}, ... }
                        // { <name> : <attribute>, <name> : <attribute>, <name> : <attribute>, ... }

                        _.forOwn(attributes, function(attribute, key){

                            var attr = {};
                            attr[key] = attribute;
                            result.push(attr);

                        });

                    } else {

                        // Attributes is an Array
                        // [ { <name> : {type : <type>} }, { <name> : {type : <type>} }, ... ]
                        // [{ <name> : <attribute>}, {<name> : <attribute>}, {<name> : <attribute>}, ... ]

                        this._orderedDeclaration = true;

                        _.forEach(attributes, function (attribute, key) {

                            result.push(attribute);

                        },this)

                    }

                } else {
                    throw new TypeError('Unsupported attribute declaration format');
                }

            } else {

                result = []

            }

            Set.call(this, {type: Attribute, elements: result});

        },

        /**
         * Binds the events for the object
         */
        bindEvents: function () {

            debug.header.trace('#bindEvents');

            var that = this;

            this.ee.on('beforeAdd', function (element) {

                if (that._attributes.hasOwnProperty(element.name)) {
                    throw new Error('Attribute with name ' + element.name + ' already exists in header');
                }

            });

            this.ee.on('afterAdd', function (element, index) {

                that._attributes[element.name] = index;

                element.header = that;

            });

            this.ee.on('afterRemove', function (element) {
                delete that._attributes[element.name];
                that.refreshAttributes();
            });
        },

        /**
         * Refreshes the list of attributes
         */
        refreshAttributes: function () {

            debug.header.trace('#refreshAttributes');

            this._attributes = {};

            this.each(function (element, index) {

                if(!_.isUndefined(element)){
                    this._attributes[element.name] = index;
                }

            }, this)

        },

        /**
         * Gets one of the header attributes
         * @param {Attribute|String} key
         * @returns {Attribute|null}
         */
        get: function (key) {

            debug.header.trace('#get');

            if(key instanceof Attribute){

                if (!this._attributes.hasOwnProperty(key.name)) {
                    return null;
                }

                var attr = this.get(key.name);

                if(!attr.equals(key)){
                    return null;
                } else {
                    return attr;
                }

            } else if (_.isString(key)){

                if (!this._attributes.hasOwnProperty(key)) {
                    return null;
                }

                return this.elements()[this._attributes[key]];

            }

        },

        /**
         * Gets the index of an attribute in the header
         * @param {String} name
         * @returns {null|Attribute}
         */
        getIndex: function (name) {

            debug.header.trace('#getIndex');

            if (!this._attributes.hasOwnProperty(name)) {
                return null;
            }

            return this._attributes[name];

        },

        /**
         * Gets an attribute at the specified index
         * @param index
         * @returns {Attribute|null}
         */
        getAt : function(index){

            if(this._elements[index] !== undefined){
                return this._elements[index];
            }
            return null;

        },

        /**
         * Gets or sets the header attributes list
         * @param {*[]} attributes
         * @returns {undefined|null|Array}
         */
        attributes: function (attributes) {

            debug.header.trace('#attributes');

            if (attributes) {

                return this.elements(attributes);

            } else {

                return this.elements();

            }

        },

        /**
         * Clones a header and its attributes
         * @returns {Header}
         */
        clone: function () {

            debug.header.trace('#clone');

            var newHeader = new this.constructor();

            this.each(function (element) {

                if(!_.isUndefined(element)){
                    newHeader.add(element.clone(), false);
                }

            });

            return newHeader;

        },

        /**
         * Project operation on Header object
         * @param {String[]|Attribute[]} projectedAttributes
         * @returns {Header}
         */
        project: function (projectedAttributes) {

            debug.header.trace('#project');

            var resultAttributes = {},
                a;

            a = projectedAttributes.length;

            while (a--) {

                var projectedAttribute = projectedAttributes[a];

                // If string given, find the attribute with this name
                if (_.isString(projectedAttribute)) {

                    var attributeName = projectedAttribute;

                    projectedAttribute = this.get(attributeName);

                    if (projectedAttribute === null) {
                        throw new ReferenceError('Attribute with name ' + attributeName + ' not found in header');
                    }

                } else if (projectedAttribute instanceof Attribute) {

                    // Find attribute in the header

                    var found = _.find(this.elements(), function (attribute) {
                        return attribute === projectedAttribute;
                    }, this);

                    if (!found) {
                        throw new ReferenceError('Attribute not found in the header');
                    }

                } else {
                    throw new TypeError('Wrong format given for attributes in Header project operation');
                }

                resultAttributes[projectedAttribute.name] = projectedAttribute.clone();
            }

            return new Header(resultAttributes);
        },


        /**
         * Perform a removal operation on the header
         * @param {Attribute[]|String[]|Attribute|String} attributesToRemove attributes to remove from the header
         * @return {Header} the resulting header
         */
        remove: function (attributesToRemove) {

            debug.header.trace('#remove');

            var resultHeader = this.clone(),
                a,
                attribute,
                attributeName;

            // Coerce the arguments to an array
            if (_.isString(attributesToRemove) || attributesToRemove instanceof Attribute) {

                attributesToRemove = [attributesToRemove];

            } else if (!_.isArray(attributesToRemove)) {

                throw new TypeError('Wrong argument type for removal operation');

            }

            a = attributesToRemove.length;

            // Loop through each given attributes to remove

            while (a--) {

                // Check that given attributesToRemove are in the header

                if (_.isString(attributesToRemove[a])) {

                    // Passed attribute is a string.
                    // We will check if the attribute name exists.

                    attributeName = attributesToRemove[a];

                    attribute = attributesToRemove[a] = this.get(attributeName);

                    if (attribute === null) {
                        throw new ReferenceError('Attribute with name ' + attributeName + ' not found in header');
                    }

                } else {

                    // Passed attribute is an Attribute object
                    // We will check if it exists in the header

                    attribute = attributesToRemove[a];

                    attributeName = attribute.name;

                    if (!this._attributes.hasOwnProperty(attributeName)) {

                        // The attribute name doesn't exist in the header

                        throw new ReferenceError('Attribute with name ' + attributeName + ' not found in header');

                    } else if (this.get(attributeName).equal(attribute) === false) {

                        // The attribute is found but doesn't have the same type

                        throw new ReferenceError('Attribute object found in the header but not of same type');
                    }

                }

                // Delete the found attributes from the resulting header

                resultHeader.removeAt(resultHeader.getIndex(attributeName));

            }

            return resultHeader;
        },

        /**
         * Rename operation on the header
         * @param {Object} attributes
         * @returns {Header} The new set
         *
         *     var newHeader = Header.rename( { oldName : 'newName' } );
         *
         */
        rename: function (attributes) {

            debug.header.trace('#rename');

            var resultHeader = this.clone(),
                key;

            if (_.isObject(attributes)) {

                for (key in attributes) {

                    if (attributes.hasOwnProperty(key)) {

                        var newName = attributes[key];

                        // Check if the specified name is a string
                        if (!_.isString(newName)) {
                            throw new TypeError('New name for attribute ' + key + ' must be a string');
                        }

                        var targetAttribute = this.get(key);

                        // Check if the key exists in the current header
                        if (targetAttribute === null) {
                            throw new ReferenceError('Attribute with name ' + key + ' doesn\'t exist in header');
                        }

                        // Check if the renamed operation does not overwrite an existing key in the header
                        if (this._attributes.hasOwnProperty(newName) && newName !== key) {
                            throw new ReferenceError('New attribute name ' + newName + ' already exists in the header');
                        }

                        // Check if the new name is not the same as the old name
                        if (newName === key) {
                            debug.header.warn('Useless renaming operations : ' + key + ' -> ' + newName);
                        }

                        // Check if two renamed attributes don't have the same target name
                        for (var a in attributes) {
                            if (attributes.hasOwnProperty(a) && a !== key) {
                                if (newName === attributes[a]) {
                                    throw new ReferenceError('Two renamed attributes have the same target name');
                                }
                            }
                        }

                        resultHeader._attributes[newName] = resultHeader._attributes[key];

                        if (key !== newName) {
                            delete resultHeader._attributes[key];
                        }

                        resultHeader.get(newName).name = newName;

                    }
                }

            } else {

                throw new TypeError('Wrong argument type for rename operation');
            }

            return resultHeader;

        },

        /**
         * @returns {Relation} The relation representation of the header
         *
         *     var header = new affinity.Header({ a : affinity.String, b : affinity.String });
         *
         *     var headerRelation = header.toRelation();
         *
         *     headerRelation.print();
         *
         *     // +---------------+-------------+
         *     // | name : String | type : Type |
         *     // +---------------+-------------+
         *     // | a             | String      |
         *     // +---------------+-------------+
         *     // | b             | String      |
         *     // +---------------+-------------+
         *
         */
        toRelation: function () {

            debug.header.trace('#toRelation');

            var rel = new (require('./Relation.js'))([
                {name: {type: TString}},
                {type: {type: TType}}
            ]);

            this.each(function (attribute) {
                rel.add({name: attribute.name, type: attribute.type});
            });

            return rel;

        },

        /**
         * @returns {string[]} An array containing the names of the attributes
         */
        toNameArray : function(){
            var result = [];

            this.each(function(attribute){
                result.push(attribute.name);
            });

            return result;

        },

        /**
         *
         * Converts a relation to a header. The relation must have a name : string and type : type structure.
         * Inverse of {@link Header#toRelation}
         * @param relation
         * @returns {Header}
         */
        fromRelation : function(relation){

            // Check that the relation has the right header
            if(!relation.header().exists({name : 'name', type : TString}) || !relation.header().exists({ name : 'type', type : TType}) || !(relation.header().length()==2)){
                throw new Error('Cannot convert relation to header');
            }

            relation.each(function(tuple){
                this.add({name : tuple.get('name'), type : tuple.get('type')}, false);
            }, this);

            return this;

        },

        /**
         * Copies attributes from a relation to another
         * @param {Header} header
         * @param {Header|string[]|Set} [attributesArgument=[]]
         * @param {Boolean} [exclude=false]
         * @returns {Header}
         */
        copy : function(header, attributesArgument, exclude){

            var that = this;

            if(exclude !== true && exclude !== false){
                exclude = false;
            }

            if (attributesArgument){

                // Coerce the attributesArgument arguments to a header argument

                if(!(attributesArgument instanceof Header)){

                    var tempHeader = new Header();

                    if(attributesArgument instanceof Set){

                        attributesArgument.each(function(attribute){
                            if(_.isString(attribute)){


                                var attr = header.get(attribute);


                                if(attr === null){
                                    throw new Error('Attribute with name "' + attribute + '" not found in the header');
                                }

                                tempHeader.add(header.get(attribute).clone());


                            } else if(attribute instanceof Attribute) {

                                if(header.get(attribute.name) === null){
                                    throw new Error('Attribute with name "' + attribute.name + '" not found in the header');
                                }

                                tempHeader.add(attribute.clone());

                            }
                        })

                    } else if (_.isArray(attributesArgument)){

                        _.forEach(attributesArgument, function(attribute){
                            if(_.isString(attribute)){

                                var attr = header.get(attribute);

                                if(attr === null){
                                    throw new Error('Attribute with name "' + attribute + '" not found in the header');
                                }

                                tempHeader.add(attr.clone());

                            } else if(attribute instanceof Attribute) {

                                if(header.get(attribute.name) === null){
                                    throw new Error('Attribute with name "' + attribute.name + '" not found in the header');
                                }

                                tempHeader.add(attribute.clone());

                            }
                        })

                    } else if (_.isString(attributesArgument)){

                        var attr = header.get(attributesArgument);

                        if(attr === null){
                            throw new Error('Attribute with name ' + attributesArgument + ' not found in the header');
                        }

                        tempHeader.add(attr);

                    }

                    attributesArgument = tempHeader;

                } else {

                    attributesArgument.each(function(attribute){

                        if(header.get(attribute.name) === null){
                            throw new Error('Attribute with name ' + attribute.name + ' not found in the header');
                        }

                    })

                }

            }

            if (exclude && attributesArgument){

                header.each(function(attribute){

                    var isExcluded = false;

                    attributesArgument.each(function(excludedAttribute){
                        if(attribute.equal(excludedAttribute)){
                            isExcluded = true;
                        }
                    }, this);

                    if(!isExcluded){
                        this.add(attribute.clone());
                    }

                }, this)


            } else if (!exclude && attributesArgument){

                attributesArgument.each(function(includedAttribute){

                    this.add(header.get(includedAttribute.name).clone());

                }, this)

            } else {

                header.each(function(attribute){
                    this.add(attribute.clone());
                },this)
            }

            return this;

        }


    }, {

        /**
         * @static
         * @param {Header} header
         * @param {string[]|Attribute[]} attributes
         */
        assertAttributesExist : function(header, attributes){

            var mismatch = false;

            _.forEach(attributes, function(attribute){

                if(_.isString(attribute)){
                    if(header.get(attribute) === null){
                        throw new Error('Attribute with name ' + attribute + ' does not exist in the header');
                    }
                } else if (attribute instanceof Attribute){
                    if(!header.exists(attribute)){
                        throw new Error('Attribute with name ' + attribute.name + ' does not exist in the header');
                    }
                } else {
                    throw new Error('Attribute is of wrong type');
                }

            });

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         */
        assertSameNameSameType : function(header1, header2){

            header1.each(function(attribute1){

                header2.each(function(attribute2){

                    if(attribute1.name === attribute2.name && attribute1.type !== attribute2.type){
                        throw new Error('Headers must have same type on attributes of same naem');
                    }

                })

            })

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         */
        assertUnionCompatible : function(header1, header2){

            if (!this.equal(header1, header2)) {
                throw new Error('Relations are not union compatible');
            }

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         */
        assertDisjoint : function(header1, header2){

            if(!this.disjoint(header1, header2)){
                throw new Error('Headers must be disjoint');
            }

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         * @returns {Set|*}
         */
        commonAttributes : function(header1, header2){

            return header1.setIntersection(header2);

        },

        /**
         * Converts a relation into a header.
         * The relation must have the header only with attributes name : TString and type : TType.
         * @static
         * @param relation
         * @returns {Header}
         */
        fromRelation : function(relation){

            var header = new Header();

            return header.fromRelation(relation);

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         * @returns {boolean}
         */
        equal: function (header1, header2) {

            debug.header.trace('Header.equal');

            if (Object.keys(header1._attributes).length !== Object.keys(header2._attributes).length) {
                return false;
            }

            var mismatch = false;

            header1.each(function (attribute1) {

                var attribute1Name = attribute1.name;

                if (!header2._attributes.hasOwnProperty(attribute1Name)) {
                    mismatch = true;
                    return false;
                }

                if (!Attribute.equal(attribute1, header2.get(attribute1.name))) {
                    mismatch = true;
                    return false;
                }


            });

            return !mismatch;

        },

        /**
         * @static
         * @param {Header} header1
         * @param {Header} header2
         * @returns {boolean}
         */
        disjoint: function (header1, header2) {

            debug.header.trace('Header.disjoint');

            var headers = header1.length() > header2.length() ? [header1,header2] : [header2,header1];

            var different = true;

            // Check that header have no common attribute names
            headers[0].each(function (attribute1) {

                if (headers[1].get(attribute1.name) !== null) {
                    different = false;
                    return false;
                }

            });

            return different;

        },

        /**
         * @static
         * @param {Header|*} header
         * @returns {Header}
         */
        coerce : function(header){

            if(header instanceof this){
                return header;
            } else {
                return new Header(header);
            }
        }

    });

module.exports = Header;
},{"./Attribute.js":2,"./Relation.js":9,"./Set.js":10,"./helpers/debug.js":82,"./types/String":99,"./types/Type":100,"lodash":103}],7:[function(require,module,exports){
var Base = require('./Base');
var debug = require('./helpers/debug');

var Index = Base.extend(
    {

        /**
         * The Index class is a simple utility class allowing tuples to be indexed.
         * It speeds up operations on relations as iterations are reduced.
         * @class Index
         * @extends Base
         */
        constructor: function (header) {

            debug.index.trace('#constructor');

            /** @property {Header} header */
            this.header = header;

            /** @property {number} levels */
            this.levels = header.length();

            /** @property {Object} elements */
            this.elements = {};

            /** @property {Array} headerLevels */
            this.headerLevels = [];

            /* Recursively iterating through the header and populating the headerLevels array*/

            var targetHeader = this.header.clone();

            for(var k = 0; k < this.levels; k++){

                this.headerLevels[k] = targetHeader;
                targetHeader = targetHeader.remove(targetHeader.first());

            }

        },

        /**
         * Adds a tuple to the index
         * @param {Tuple} tuple
         * @param {number} index
         */
        add: function (tuple, index) {

            debug.index.trace('#add');

            var context = this;

            var headerCount = this.header.length();

            for (var a = 0; a <= headerCount - 1; a++) {

                var attribute = context.header.first();
                var tupleAttributeValue;

                if(!attribute.type.primitive){
                    tupleAttributeValue = attribute.type.serialize(tuple.get(attribute.name));
                } else {
                    tupleAttributeValue = tuple.get(attribute.name);
                }

                if (a === headerCount - 1) {

                    context.elements[tupleAttributeValue] = index

                } else {

                    if (!context.elements.hasOwnProperty(tupleAttributeValue)) {

                        var newIndex = new Index(this.headerLevels[a+1]);

                        context.elements[tupleAttributeValue] = newIndex;

                        context = newIndex;

                    } else {

                        context = context.elements[tupleAttributeValue];

                    }

                }

            }

        },

        /**
         * Get the index for a tuple
         * @param {Tuple} tuple
         * @returns {number|null}
         */
        getIndex: function (tuple) {

            debug.index.trace('#getIndex');

            var context = this;

            var headerCount = this.header.length();

            for (var a = 0; a <= headerCount - 1; a++) {

                var attribute = context.header.first();
                var tupleAttributeValue;

                if(!attribute.type.primitive){
                    tupleAttributeValue = attribute.type.serialize(tuple.get(attribute.name));
                } else {
                    tupleAttributeValue = tuple.get(attribute.name);
                }

                if (a === headerCount - 1) {

                    if (!context.elements.hasOwnProperty(tupleAttributeValue)) {
                        return null;
                    }

                    return context.elements[tupleAttributeValue];

                } else {

                    if (!context.elements.hasOwnProperty(tupleAttributeValue)) {

                        return null;

                    }

                    context = context.elements[tupleAttributeValue];


                }

            }

        },

        /**
         * Removes a tuple from the index
         * @param {Tuple} tuple
         * @returns {boolean} True if removed, false otherwise
         */
        remove: function (tuple) {

            debug.index.trace('#remove');

            var context = this;

            var headerCount = this.header.length();

            for (var a = 0; a <= headerCount - 1; a++) {

                var attribute = context.header.first();
                var tupleAttributeValue;

                if(!attribute.type.primitive){
                    tupleAttributeValue = attribute.type.serialize(tuple.get(attribute.name));
                } else {
                    tupleAttributeValue = tuple.get(attribute.name);
                }

                if (a === headerCount - 1) {

                    if (!context.elements.hasOwnProperty(tupleAttributeValue)) {
                        return false;
                    }

                    delete context.elements[tupleAttributeValue];

                    return true;

                } else {

                    if (!context.elements.hasOwnProperty(tupleAttributeValue)) {

                        return false;

                    }

                    context = context.elements[tupleAttributeValue];

                }

            }

        }

    });

module.exports = Index;
},{"./Base":3,"./helpers/debug":82}],8:[function(require,module,exports){
var Type = require('./Type'),
    Index = require('./Index'),
    Header = require('./Header'),
    _ = require('lodash'),
    debug = require('./helpers/debug');

var Key = Type.extend({

        /**
         * @class Key
         * @extends Base
         *
         * The Key class represents keys to a relation.
         *
         * When keys are not defined on a relation, a key is assumed on all attributes of the relation.
         * Though, when a key is defined on a subset of a relation's attributes, the uniqueness
         * of the tuples will be calculated only on those attributes.
         *
         * Also, a Key will index the tuples for its attributes, making operations a lot faster.
         *
         *
         *     var relation = new affinity.Relation([
         *          {attribute1 : {type : affinity.Integer}},
         *          {attribute2 : {type : affinity.Integer}},
         *          {attribute3 : {type : affinity.Integer}},
         *      ],[
         *          [1, 2, 3],
         *          [4, 2, 3], // -> Will fail to be added, as it does not respects the unique key constraint
         *          [1, 8, 9], // -> Will fail to be added, as it does not respected the pk constraint
         *          [10, 11, 12],
         *      ],{
         *          pk : ['attribute1'],
         *          unique : [['attribute2', 'attribute3']]
         *      });
         */
        constructor: function (relation, attributes) {

            debug.key.trace('#constructor');

            if(!_.isArray(attributes)){
                attributes = [attributes];
            }

            /**
             * @property {Header} header
             */
            var header = this.header = new Header();
            
            header.relation = relation;

            header.copy(relation.header(),attributes);

            /**
             * @property {Index} index
             */
            var index = this.index = new Index(this.header);

            // Add the tuple to the index after it is added in the relation
            relation.ee.on('afterAdd', function(tuple, tupleIndex){

                debug.key.trace('#afterAdd');

                index.add(tuple, tupleIndex);

            });

            // Remove the tuple from the before it is deleted
            relation.ee.on('beforeDelete', function(tuple, tupleIndex){

                debug.key.trace('#beforeDelete');

                index.remove(tuple, tupleIndex);

            });


            // Remove then add the tuple from index before the tuple update

            relation.ee.on('beforeUpdate', function(tuple, attributeName){

                debug.key.trace('#beforeUpdate');

                if(header.get(attributeName) !== null){
                    var tupleIndex = index.getIndex(tuple);
                    index.remove(tuple, tupleIndex);
                }

            });

            relation.ee.on('afterUpdate', function(tuple, attributeName){

                debug.key.trace('#afterUpdate');

                if(header.get(attributeName) !== null){
                    var tupleIndex = index.getIndex(tuple);
                    index.add(tuple, tupleIndex);
                }

            });

        }

    });

module.exports = Key;
},{"./Header":6,"./Index":7,"./Type":12,"./helpers/debug":82,"lodash":103}],9:[function(require,module,exports){
var Header = require('./Header.js');
var Tuple = require('./Tuple.js');
var Type = require('./Type.js');
var _ = require('lodash');
var Set = require('./Set');
var debug = require('./helpers/debug');
var coerce = require('./helpers/coerce');
var Key = require('./Key');
var ForeignKey = require('./ForeignKey');

var Relation = Set.extend(
    {

        /**
         *
         * @class Relation
         * @param {Header|Object[]|Attribute[]} header Header of the Relation
         * @param {Tuple[]|Object[]} body Body of the Relation
         * @param {Object} constraints Constraints for the relation
         * @param {String[]} constraints.pk Fields that will constitute primary key
         * @param {String[][]} constraints.unique Unique field definition
         * @param {Object[]} constraints.fk Foreign key definitions
         * @extends Set
         *
         * Relation constructor
         *
         * A Relation is basically a {@link Set}, implementing the basic set operators (Union, Difference, Intersection, Product)
         * and adding more operators. It also has a {@link Header}, and adds constraints to the basic {@link Set} behavior.
         *
         *     var relation = new affinity.Relation([
         *          {id : {type : affinity.Integer}},
         *          {name : {type : affinity.String}},
         *          {born : {type : affinity.Date}},
         *     ],[
         *          [1, 'John Doe', new Date(1934, 10, 20)],
         *          [2, 'John Wilson', new Date(1922, 7, 5)],
         *     ]);
         */
        constructor: function (header, body, constraints) {

            debug.relation.trace('#constructor');

            /**
             * @property {{pk: String, unique: String[][], fk: Object[]}} _constraintArguments
             * @private
             */
            this._constraintArguments = constraints;

            /**
             * @property {Key} _pk The Primary Key for the Relation
             * @private
             */
            this._pk = undefined;

            /**
             * @property {Set} _uks The Primary Keys for the Relation
             * @private
             */
            this._uks = undefined;

            /**
             * @property {Set} _fks The Foreign Keys for the Relation
             * @private
             */
            this._fks = undefined;

            /**
             * @property {Header} _header The relation header
             * @private
             */
            this.header(Header.coerce(header));

            Set.call(this, {type: Tuple, elements: body});

        },

        bindEvents: function () {

            debug.relation.trace('#bindEvents');

            var that = this;

            this.ee.on('beforeGetElements', function () {
                that.ee.emit('beforeGetBody');
            });

            this.ee.on('beforeAdd', function (tuple) {

                // Add default values
                that.header().each(function(attribute){

                    var tupleAttributeValue = tuple.get(attribute.name);

                    if(tupleAttributeValue === null || tupleAttributeValue === undefined || tupleAttributeValue === ''){

                        tuple.set(attribute.name, attribute.default());

                    }

                });

                // Coerce tuple attributes
                that.header().each(function(attribute){

                    var attributeValue, attributeType;

                    attributeValue = tuple.get(attribute.name);

                    attributeType = attribute.type;

                    attributeValue = coerce(attributeType, attributeValue);

                    tuple.set(attribute.name, attributeValue);

                });

                // Check that the tuple is union-compatible with the relation
                if (!that.isCompatible(tuple)) {
                    throw new Error('Tuple is not union compatible');
                }

                tuple.relation = that;

            });

            this.ee.once('beforeGetElements', function () {

                var constraintArguments = that._constraintArguments;

                // Parse constraint arguments
                if (constraintArguments) {

                    // Parse primary key argument
                    if (constraintArguments.pk) {

                        that.pk(constraintArguments.pk);

                    }

                    // Parse unique key arguments
                    if (constraintArguments.unique) {

                        _.forEach(constraintArguments.unique, function (unique) {

                            that.uks().add(new Key(that, unique));

                        }, that);

                    }

                    // Parse foreign key arguments
                    if (constraintArguments.fk) {
                        _.forEach(constraintArguments.fk, function (fkArgs) {

                            fkArgs.relation = that;

                            var fk = new ForeignKey(fkArgs);

                            that.fks().add(new ForeignKey(fkArgs));
                        })
                    }



                }

            });

            this.uks().ee.on('beforeAdd', function(constraint){

                // Insure corresponding key types has serialize method
                that._assertKeySerialize(constraint);

                // Check that the keys are unique
                that._assertKeysUnique(constraint);

                // Check that the keys are irreducible
                that._assertKeysIrreducible(constraint);

            });

            this.ee.on('afterAdd', function(tuple, index){
                tuple.index = index;
                tuple.relation = that;
            });

        },

        _assertKeySerialize : function(newKey){

            // Check that if the constraint applies on an object, that
            // its type has the serialize method

            newKey.header.each(

                function (attribute) {
                    if (!attribute.type.primitive && !_.isFunction(attribute.type.serialize)) {
                        throw new Error(
                            'Cannot index attribute "' + attribute.name + '". ' +
                            'Its type "' + attribute.type.type + '" must' +
                            'have a "serialize" method for it to be indexable.');
                    }
                });

        },

        _assertKeysUnique : function(newKey){

            var existingKeys = this.uks();

            existingKeys.each(function(key){

                if (key.header.equal(newKey.header)){
                    throw new Error('Constraints must be unique');
                }

            });

        },

        _assertKeysIrreducible : function(newKey){

            var existingKeys = this.uks();

            existingKeys.each(function(key){

                if (newKey.header.setIntersection(key.header).length() !== 0) {
                    throw new Error('Constraint must be irreducible');
                }

            });

        },

        /**
         * Delete or add tuples to match a given relation
         * @param {Relation} relation
         */
        adjustTo: function(relation){

            this.compute();

            relation.compute();

            var that = this;

            // 1. Delete tuples that do not exist in the given relation

            // Loop through each tuple
            that.each(function(tuple, index){

                // Check if the tuple exists in the given relation
                if (!relation.exists(tuple)){
                    that.removeAt(index);
                }

            });

            // 2. Add tuples that do not exist in the relation

            // Loop through each tuple of the given relation
            relation.each(function(tuple){

                // Check if the tuple is present in this relation
                if (!that.exists(tuple)){

                    that.add(tuple.clone());

                }

            });

        },

        _index: function (element) {

            // Look for the tuple in the PK if it exists

            if (this._pk) {

                var index = this._pk.index.getIndex(element);

                if (index !== null) {
                    return index;
                }

            }

            var result = null;

            this.uks().any(function (uniqueConstraint) {

                result = uniqueConstraint.index.getIndex(element);

                if (result !== null){
                    console.log('found by uk');
                    return false;
                }


            }, this);

            return result;

        },

        /**
         * Gets the specified attribute object by name
         * @param {String} attribute Attribute name
         * @returns {Attribute|null} The attribute or null if not found
         *
         *     var fn = new affinity.Attribute({name : 'firstName', type : affinity.String})
         *     var ln = new affinity.Attribute({name : 'lastName', type : affinity.String})
         *
         *     var relation = new affinity.Relation([
         *              fn,
         *              ln
         *          ],[
         *              ['John','Doe'],
         *              ['Hello','World'],
         *              ['Super','Duper'],
         *          ]);
         *
         *     relation.get('firstName') === fn // true
         *
         *
         */
        get: function (attribute) {

            debug.relation.trace('#get');

            return this.header().get(attribute);

        },

        /**
         * Get the tuple at the given index
         * @param {number} index The index of the tuple
         * @returns {*|null}
         *
         *     var relation = new affinity.Relation([
         *              { 'firstName' : {type : affinity.String}}
         *              { 'LastName'  : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Hello','World'],
         *              ['Super','Duper'],
         *          ]);
         *
         *     relation.each(function(tuple, index){
         *
         *          console.log(relation.atIndex(index) === tuple) // true
         *
         *     })
         *
         * console.log(relation.atIndex(0).get('firstName')) // John
         *
         */
        atIndex: function (index) {

            debug.relation.trace('#atIndex');

            return this.elements()[index];

        },

        /**
         * @param {Set} [tuples] The new set of body
         * @returns {Set|Relation} The body/null if getter, this if setter
         *
         * Getter/Setter for the body property
         *
         * You will more likely always use the getter (Relation.body()) than the setter
         * (Relation.body(body)) part for this method.
         *     var relation = new affinity.Relation([
         *              { 'firstName' : {type : affinity.String}}
         *              { 'LastName'  : {type : affinity.String}}
         *          ]);
         *
         *     var set = new affinity.Set();
         *
         *     set.add(new affinity.Tuple({firstName : 'John', lastName : 'Doe'}))
         *     set.add(new affinity.Tuple({firstName : 'Hello', lastName : 'World'}))
         *     set.add(new affinity.Tuple({firstName : 'John', lastName : 'Cage'}))
         *
         *     relation.body(set); // Sets the relation's body
         *
         *     relation.body() // Gets the relation's body
         *
         *     console.log(relation.body() === set) // true
         *
         */
        body: function (tuples) {

            debug.relation.trace('#body');

            if (tuples) {

                this.elements(tuples);

                return this

            } else {

                this.ee.emit('beforeGetBody');

                return this.elements();

            }

        },

        /**
         * @return {Relation} Returns this for chaining
         *
         * Calculates the relation. Because the relations are only calculated when their header or their body
         * are requested, you must explicitly call compute() if you want to calculate a relation.
         *
         * You should not need to use this function. Calling body() or header() calculates the relation
         * automatically
         *
         *     var product = relation1.product(relation2);
         *
         *     // At this point, nothing has been calculated.
         *
         *     product.header() // Because we requested the header, it is calculated
         *
         *     product.body() // Because we requested the body, it is calculated
         *
         *     var product2 = relation1.product(relation2);
         *
         *     product2.compute(); // Calculates the header and the body;
         *
         */
        compute: function () {

            debug.relation.trace('#compute');

            this.header();
            this.body();

            return this;

        },

        /**
         * @param {Header} [header]
         * @returns {null|{Header}}
         *
         * Gets or sets the relation's header
         */
        header: function (header) {

            if (header) {

                debug.relation.trace('#header (set)');

                this._header = header;

                header.relation = this;

            } else {

                debug.relation.trace('#header (get)');

                this.ee.emit('beforeGetHeader');

                return this._header;

            }

        },

        /**
         * Gets / Sets the relation's primary key
         * @param {String} [primaryKeyName]
         */
        pk : function(primaryKeyName){

            if (primaryKeyName){

                if(this._pk !== undefined){
                    this.uks().remove(this._pk);
                }

                this._pk = new Key(this, primaryKeyName);

                this.uks().add(this._pk);

            } else {

                return this._pk;

            }

        },

        /**
         * Gets the foreign keys set
         * @returns {Set}
         */
        fks : function(){

            if (this._fks === undefined){
                this._fks = new Set({ type : ForeignKey});
            }

            return this._fks;
        },

        /**
         * Gets the unique keys set
         * @returns {Set}
         */
        uks : function(){

            if (this._uks === undefined){
                this._uks = new Set({ type : Key});
            }

            return this._uks;
        },

        /**
         * @param {Tuple|Object} tuple
         * @returns {boolean}
         *
         * Check if a tuple is compatible with the relation
         */
        isCompatible: function (tuple) {

            debug.relation.trace('#isCompatible');

            tuple = Tuple.coerce(tuple);

            var tupleKeys = Object.keys(tuple.attributes);
            var tupleKeyCount = tupleKeys.length;
            var headerKeys = Object.keys(this.header()._attributes);
            var headerKeyCount = headerKeys.length;


            /// Check if the given tuple has the same header as the relation

            // Header and Tuple must have the same number of attributes
            if (tupleKeyCount !== headerKeyCount) {
                return false;
            }

            // Header and Tuple must have the same attribute names
            return !_.some(headerKeys, function (headerAttribute) {

                // Loop through each attributes of the tuple
                return !_.some(tupleKeys, function (tupleAttribute) {

                    // Found a match
                    return (tupleAttribute === headerAttribute && (tuple.get(tupleAttribute) !== undefined) && (tuple.get(tupleAttribute) !== null));

                });

            });

        },

        /**
         * @param {Relation} relation The relation to compare to
         * @returns {boolean} If the relations are equal or not
         *
         * Tests if the relation is equal to another one
         */
        equal: function (relation) {

            debug.relation.trace('#equal');

            return this.constructor.equal(this, relation);
        },

        /**
         * Clones a relation
         * @param {boolean} [withTuples=true] Copies the tuples
         * @returns {Relation}
         */
        clone : function(withTuples){

            withTuples = !!(withTuples === undefined || withTuples === null);

            var newHeader = this.header().clone();

            var newRelation = new Relation(newHeader);

            // Clone the pk

            //todo PK Clone

            // Clone the uks

            //todo UKS clone

            // Clone the fks

            //todo FKS clone

            if (withTuples){
                this.each(function(tuple){
                    newRelation.add(tuple.clone());
                });
            }

            return newRelation;

        },

        /**
         * Prints the printable representation of the Relation to console
         */
        print: function () {

            debug.relation.trace('#print');

            console.log(this.toString());
        },

        /**
         * Gets the string representation of the relation
         * @returns {String} The string print representation of the relation
         */
        toString: function () {

            var hspacing = 1,
                vspacing = 1,
                arr = this.arr = [],
                headerRow = [],
                maxWidths = [],
                maxHeights = [];

            debug.relation.trace('#getPrintString');

            this.compute();

            this.header().each(function (attribute) {

                headerRow.push({ width: null, height: null, lines: null, attribute: attribute, string: attribute.toString()})

            }, this);

            // [ {width, height, lines, string},{width, height, lines, string},... ] ]

            arr.push(headerRow);

            this.each(function (tuple) {

                var tupleRow = [];

                _.forEach(headerRow, function (attr) {
                    tupleRow.push({ width: null, height: null, lines: null, string: tuple.get(attr.attribute.name).toString()})
                }, this);

                arr.push(tupleRow);

            }, this);

            function findHeight(string) {

                return string.split("\n").length;

            }

            function findWidth(string) {

                var lines = string.split('\n'),
                    max = 0;

                _.forEach(lines, function (line) {

                    var lineLength = line.length;

                    if (lineLength > max)
                        max = lineLength;

                }, this);

                return max;

            }

            function findMaxWidth(arr) {

                var max = 0;

                _.forEach(arr, function (obj) {

                    var lineWidth = obj.width;

                    if (lineWidth > max)
                        max = lineWidth;

                }, this);

                return max;
            }

            function findMaxHeight(arr) {

                var max = 0;

                _.forEach(arr, function (obj) {

                    var lineHeight = obj.height;

                    if (lineHeight > max)
                        max = lineHeight;

                }, this);

                return max;

            }

            function parseLines(string) {
                return string.split("\n");
            }

            // [
            //   [{width, height, lines, string},{width, height, lines, string},... ],
            //   [{width, height, lines, string},{width, height, lines, string},... ],
            //   [{width, height, lines, string},{width, height, lines, string},... ],
            //   ...
            // ]


            _.forEach(arr, function (row, rowIndex) {

                _.forEach(row, function (col, colIndex) {

                    col.width = findWidth(col.string);
                    col.height = findHeight(col.string);
                    col.lines = parseLines(col.string);

                    if (!maxWidths[colIndex] || maxWidths[colIndex] < col.width) {
                        maxWidths[colIndex] = col.width;
                    }

                    if (!maxHeights[rowIndex] || maxHeights[rowIndex] < col.height) {
                        maxHeights[rowIndex] = col.height;
                    }

                }, this);

            }, this);

            var result = '\n';


            // Printing the top border

            result += '+';

            _.forEach(maxWidths, function (maxWidth, index) {

                for (var a = 0; a < maxWidths[index] + hspacing * 2 + 2; a++) {
                    result += '-'
                }

                result += '+'

            }, this);

            result += '\n';

            // Printing the attributes

            _.forEach(arr, function (row, rowIndex) {

                var maxHeight = maxHeights[rowIndex];

                for (var a = 0; a < maxHeight; a++) {

                    result += '|';

                    _.forEach(row, function (col, colIndex) {

                        var maxWidth = maxWidths[colIndex];

                        var line = col.lines[a];

                        if (!line) line = '';

                        for (var i = 0; i < hspacing; i++) {
                            result += ' ';
                        }

                        var lineLength = line.length;

                        result += line;

                        for (var k = 0; k < hspacing; k++) {
                            result += ' ';
                        }

                        for (var b = 0; b < maxWidth - lineLength + 2 * hspacing; b++) {
                            result += ' ';
                        }

                        result += '|';

                    }, this);

                    result += '\n';

                }

                result += '+';

                _.forEach(maxWidths, function (maxWidth, index) {

                    for (var a = 0; a < maxWidths[index] + hspacing * 2 + 2; a++) {
                        if (rowIndex === 0) {
                            result += '='
                        } else {
                            result += '-'
                        }

                    }

                    result += '+'

                }, this);


                if (rowIndex != arr.length - 1) result += '\n';


            }, this);

            return result;

        },


        /**
         * Updates tuples in the relation
         * @param predicate
         * @param values
         *
         * Example
         *
         *     relation.update(age.gt(20), { age : age.old().plus(10), name : name.old().substr(0,1) });
         */
        update : function(predicate, values){

            predicate.convertAttributeToTuple();

            _.forEach(values, function(value){

                if(_.isFunction(value)){
                    value.convertAttributeToTuple()
                }

            });

            this.each(function(tuple){

                if(predicate.assignTuple(tuple).value() === true){

                    _.forEach(values, function(expression, key){

                        var value = _.isFunction(expression) ? expression.assignTuple(tuple).value() : expression;

                        tuple.set(key, value);

                    })

                }

            })

        },

        /**
         * Removes tuples from a relation based on a predicate
         * @param predicate
         */
        removeWhere : function(predicate){

            predicate.convertAttributeToTuple();

            var that = this;

            this.each(function(tuple, index){

                if(predicate.assignTuple(tuple).value() === true){

                    that.removeAt(index);

                }

            })

        },


        //region Operations

        /**
         *
         * @param {Relation} relation The relation to compute difference against
         * @returns {Operators.Difference} The resulting relation
         *
         * Shortcut to create a Difference relation based on this relation and the specified one
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var relation2 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe']
         *          ]);
         *
         *     var diff = relation1.difference(relation2);
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | lastName : TString |
         *     // +---------------------+--------------------+
         *     // | Lucino              | Veo                |
         *     // +---------------------+--------------------+
         *     // | Mary                | Poppins            |
         *     // +---------------------+--------------------+
         */
        difference: function (relation) {

            debug.relation.trace('#difference');

            return new (require('./algebra/Difference'))(this, relation);
        },

        /**
         * @param {Relation} relation The relation to compute intersection against
         * @returns {Operators.Intersection} The resulting relation
         *
         * Shortcut to create an Intersect relation based on this relation and the specified one
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var relation2 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe']
         *          ]);
         *
         *     var intersection = relation1.intersect(relation2);
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | lastName : TString |
         *     // +---------------------+--------------------+
         *     // | John                | Doe                |
         *     // +---------------------+--------------------+
         */
        intersect: function (relation) {

            debug.relation.trace('#intersect');

            var Intersection = require('./algebra/Intersection');

            return new Intersection(this, relation);
        },

        /**
         *
         * @param {Relation} relation The relation to compute the join against
         * @returns {Operators.Join} The resulting relation
         *
         * Shortcut to create a Join relation based on this relation and the specified one
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var relation2 = new affinity.Relation([
         *              {LastName : {type : affinity.String}}
         *              {Title    : {type : affinity.String}}
         *          ],[
         *              ['Doe','Mr'],
         *              ['Poppins','Lady']
         *          ]);
         *
         *     var join = relation1.join(relation2);
         *
         *     // +---------------------+--------------------+-----------------+
         *     // | firstName : TString | lastName : TString | Title : TString |
         *     // +---------------------+--------------------+-----------------+
         *     // | John                | Doe                | Mr              |
         *     // +---------------------+--------------------+-----------------+
         *     // | Mary                | Poppins            | Lady            |
         *     // +---------------------+--------------------+-----------------+
         */
        join: function (relation) {

            debug.relation.trace('#join');

            return new (require('./algebra/Join'))(this, relation);
        },

        /**
         *
         * @param {Relation} relation The relation to compute product against
         * @returns {Operators.Product} The resulting relation
         *
         * Shortcut to create a Product relation based on this relation and the specified one
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var relation2 = new affinity.Relation([
         *              {title : {type : affinity.String}}
         *          ],[
         *              ['Lady'],
         *              ['Mr']
         *          ]);
         *
         *     var product = relation1.product(relation2);
         *
         *     // +---------------------+--------------------+-----------------+
         *     // | firstName : TString | lastName : TString | Title : TString |
         *     // +---------------------+--------------------+-----------------+
         *     // | John                | Doe                | Lady            |
         *     // +---------------------+--------------------+-----------------+
         *     // | John                | Doe                | Mr              |
         *     // +---------------------+--------------------+-----------------+
         *     // | Lucino              | Veo                | Lady            |
         *     // +---------------------+--------------------+-----------------+
         *     // | Lucino              | Veo                | Mr              |
         *     // +---------------------+--------------------+-----------------+
         *     // | Mary                | Poppins            | Lady            |
         *     // +---------------------+--------------------+-----------------+
         *     // | Mary                | Poppins            | Mr              |
         *     // +---------------------+--------------------+-----------------+
         */
        product: function (relation) {

            debug.relation.trace('#product');

            return new (require('./algebra/Product'))(this, relation);
        },

        /**
         * @param {String[]} attributeNames The relation to compute intersection against
         * @returns {Operators.Projection} The resulting relation
         *
         * Shortcut to create a Project relation based on this relation
         *
         * The attributeNames parameter must be in the format :
         *
         *     relation.project(['argument1', 'argument2']);
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var intersection = relation1.project(['firstName']);
         *
         *     // +---------------------+
         *     // | firstName : TString |
         *     // +---------------------+
         *     // | John                |
         *     // +---------------------+
         *     // | Lucino              |
         *     // +---------------------+
         *     // | Mary                |
         *     // +---------------------+
         */
        project: function (attributeNames) {

            debug.relation.trace('#project');

            return new (require('./algebra/Projection'))(this, attributeNames);
        },

        /**
         *
         * @param {Object} newNames An object containing the new attribute names.
         * @returns {Operators.Rename} The resulting relation
         *
         * Shortcut to create a Rename relation based on this relation
         *
         *     var relation1 = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *          ]);
         *
         *     var rename = relation1.rename({lastName : 'Boogie'});
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | Boogie : TString   |
         *     // +---------------------+--------------------+
         *     // | John                | Doe                |
         *     // +---------------------+--------------------+
         *     // | Lucino              | Veo                |
         *     // +---------------------+--------------------+
         *     // | Mary                | Poppins            |
         *     // +---------------------+--------------------+
         */
        rename: function (newNames) {

            debug.relation.trace('#rename');

            return new (require('./algebra/Rename'))(this, newNames);
        },

        /**
         *
         * @param {Function} predicate The predicate to test the tuples against
         * @returns {Operators.Restriction} The resulting relation
         *
         * Shortcut to create a Restrict relation based on this relation
         *
         *     var relation = new affinity.Relation([
         *              {firstName : {type : affinity.String}}
         *              {lastName : {type : affinity.String}}
         *          ],[
         *              ['John','Doe'],
         *              ['Lucino','Veo'],
         *              ['Mary','Poppins'],
         *              ['Robert','Robert']
         *          ]);
         *
         *     // Multiple ways to build a predicate:
         *
         *     // Compare with static value
         *     relation.restrict(relation.get('firstName').equal('John'));
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | Boogie : TString   |
         *     // +---------------------+--------------------+
         *     // | John                | Doe                |
         *     // +---------------------+--------------------+
         *
         *     // Compare two attributes
         *     relation.restrict(relation.get('firstName').equal(relation.get('lastName'));
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | Boogie : TString   |
         *     // +---------------------+--------------------+
         *     // | Robert              | Robert             |
         *     // +---------------------+--------------------+
         *
         *     // Combine with and, or, not
         *     relation.restrict( (relation.get('firstName').not().equal('John')) .and( relation.get('lastName').not().equal('Veo') ) )
         *
         *     // +---------------------+--------------------+
         *     // | firstName : TString | Boogie : TString   |
         *     // +---------------------+--------------------+
         *     // | Mary                | Poppins            |
         *     // +---------------------+--------------------+
         *     // | Robert              | Robert             |
         *     // +---------------------+--------------------+
         */
        restrict: function (predicate) {

            debug.relation.trace('#restrict');

            return new (require('./algebra/Restriction'))(this, predicate);
        },

        /**
         * Shortcut to create a Union relation based on this relation and the specified one
         * @param {Relation} relation The relation to perform Union with
         * @returns {Operators.Union} The resulting relation
         */
        union: function (relation) {

            debug.relation.trace('#union');

            return new (require('./algebra/Union'))(this, relation);
        },

        /**
         * @param {Relation} relation
         * @returns {Operators.Composition} The resulting relation
         */
        compose: function (relation) {

            debug.relation.trace('#compose');

            return new (require('./algebra/Composition'))(this, relation);

        },

        /**
         * @param {String} groupingAttributeName
         * @param {String[]} groupedAttributeNames
         * @return {Operators.Group}
         */
        group: function (groupingAttributeName, groupedAttributeNames) {

            debug.relation.trace('#group');

            return new (require('./algebra/Group'))(this, groupingAttributeName, groupedAttributeNames);

        },

        /**
         * @param {String[]} groupedAttributeNames
         * @returns {Operators.Ungroup}
         */
        ungroup: function (groupedAttributeNames) {

            debug.relation.trace('#ungroup');

            return new (require('./algebra/Ungroup'))(this, groupedAttributeNames);

        },

        /**
         * SemiDifference
         * @returns {Operators.SemiDifference} The resulting relation
         * @param relation
         */
        sdifference: function (relation) {

            debug.relation.trace('#sdifference');

            return new (require('./algebra/Semidifference'))(this, relation);

        },

        /**
         * SemiJoin
         * @returns {Operators.SemiJoin} The Resulting Relation
         * @param relation
         */
        sjoin: function (relation) {

            debug.relation.trace('#sjoin');

            return new (require('./algebra/Semijoin'))(this, relation);

        },

        /**
         * Shortcut to execute a Wrap operation
         * @param wrappingAttributeName The name of the new wrapping attribute
         * @param {String[]} wrappedAttributes The attribute names to be wrapped
         * @returns {Operators.Wrap} The resulting relation
         */
        wrap: function (wrappingAttributeName, wrappedAttributes) {

            debug.relation.trace('#wrap');

            return new (require('./algebra/Wrap'))(this, wrappingAttributeName, wrappedAttributes);

        },

        /**
         * Shortcut to execute an Unwrap operation
         * @param {String[]} wrappedAttributeNames The names of the wrapped attributes to unwrap
         * @returns {Operators.Unwrap} The resulting relation
         */
        unwrap: function (wrappedAttributeNames) {

            debug.relation.trace('#unwrap');

            return new (require('./algebra/Unwrap'))(this, wrappedAttributeNames);

        },

        /**
         * Shortcut to create an Extend operation
         * @param {Object[]} expressions The expressions to evaluate
         * @returns {Operators.Extension} The resulting relation
         */
        extend: function (expressions) {

            debug.relation.trace('#extend');

            return new (require('./algebra/Extension'))(this, expressions);

        },

        /**
         * Shortcut to the Summarize operation
         * @param {String[]|Attribute[]} attributes The attributes to summarize
         * @param {Object} summaries Summary expressions
         */
        summarize : function(attributes, summaries){
            debug.relation.trace('#summarize');

            return new (require('./algebra/Summarize'))(this, attributes, summaries);

        },


        //endregion

        //region Aggregates

        all : function(predicate){

            var All = require('./functions/aggregate/All.js');

            return new All(this, predicate);

        },

        any : function(predicate){

            var Any = require('./functions/aggregate/Any.js');

            return new Any(this, predicate);

        },

        count : function(){

            var Count = require('./functions/aggregate/Count.js');

            return new Count(this);

        }
        //endregion

    }, {

        /**
         * Gets the string representation of the Relation type
         * @returns {string}

         * @static
         */
        toString: function () {
            return 'Relation'
        },

        type: 'Relation',

        /**
         * Tests for equality between two relations
         * @param {Relation} rel1
         * @param {Relation} rel2

         * @static
         * @returns {boolean}
         */
        equal: function (rel1, rel2) {

            debug.relation.trace('Relation.equal');

            if (!rel1.header().equal(rel2.header())) {
                return false;
            }

            rel1.compute();
            rel2.compute();

            return Set.equal(rel1, rel2);

        }

    });


module.exports = Relation;

},{"./ForeignKey":4,"./Header.js":6,"./Key":8,"./Set":10,"./Tuple.js":11,"./Type.js":12,"./algebra/Composition":13,"./algebra/Difference":14,"./algebra/Extension":15,"./algebra/Group":16,"./algebra/Intersection":17,"./algebra/Join":18,"./algebra/Product":19,"./algebra/Projection":20,"./algebra/Rename":21,"./algebra/Restriction":22,"./algebra/Semidifference":23,"./algebra/Semijoin":24,"./algebra/Summarize":25,"./algebra/Ungroup":26,"./algebra/Union":27,"./algebra/Unwrap":28,"./algebra/Wrap":29,"./functions/aggregate/All.js":30,"./functions/aggregate/Any.js":31,"./functions/aggregate/Count.js":33,"./helpers/coerce":80,"./helpers/debug":82,"lodash":103}],10:[function(require,module,exports){
var Type = require('./Type.js');
var _ = require('lodash');
var coerce = require('./helpers/coerce');
var equal = require('./helpers/equal');
var clone = require('./helpers/clone');
var EventEmitter = require('eventemitter3').EventEmitter3;
var debug = require('./helpers/debug.js');


var Set = Type.extend(

    {
        /**
         * @class Set
         * @param {Object} [args] Constructor arguments
         * @param {Type} [args.type] Type of the elements contained in the set
         * @extends Type
         * A Set is an unordered collection of distinct objects (no duplicates).
         */
        constructor: function (args) {

            debug.set.trace('#constructor');

            /**
             * @property {EventEmitter} ee
             * @external
             */
            this.ee = new EventEmitter();

            this.ee.setMaxListeners(0);

            /**
             * @property {Type} _type
             * @private
             */
            this._type = null;

            /**
             * @property {Array} _elements
             * @private
             */
            this._elements = [];

            /**
             * @property {Number} _deletedCount
             * @private
             */
            this._deletedCount = 0;


            // Call bindEvents if is defined

            if (_.isFunction(this.bindEvents)) {
                this.bindEvents();
            }

            if (args) {

                if (args.type) {
                    this.type(args.type);
                }

                if (args.elements) {
                    this.elements(args.elements);
                }

            }



            // Call parent constructor

            Type.apply(this, arguments);

        },

        bindEvents : function(){

        },

        /**
         * @returns {Set}
         *
         * Clones a set
         */
        clone: function () {

            debug.set.trace('#clone');

            var newSet = new this.constructor({type : this.type()});

            this.each(function (element) {
                newSet.add(element, false);
            });

            return newSet;

        },

        /**
         * Destroys the set
         */
        destroy : function(){

            // Deletes the elements
            this.each(function(element, index){

                this.removeAt(index);

            });

            // Deletes the event emitter
            delete this.ee;

        },

        /**
         * Gets or sets the elements of the set
         * @param {Set} [elements] elements of the set
         * @returns {undefined|null|Array}
         * @throws Will throw if the type of the Set has not been set
         */
        elements: function (elements) {

            debug.set.trace('#elements');

            if (this.type() === null) {
                throw new Error('Must define the type of the set first');
            }

            if (elements) {

                if (!_.isArray(elements)) {
                    throw new TypeError('elements must be in array format')
                }

                this.ee.emit('beforeSetElements', elements);

                _.forEach(elements, function (element) {

                    this.add(element);

                }, this);

                this.ee.emit('afterSetElements', elements);

            } else {

                this.ee.emit('beforeGetElements');

                return this._elements;
            }

        },

        /**
         * @param {Type} [type] The type of the Set
         * @returns {null|Type}
         *
         * Getter/Setter for the type parameter. When used without parameter, will return
         * the type of the Set. When used with a parameter, will set the set's type.
         */
        type: function (type) {

            debug.set.trace('#type');

            if (type) {
                this._type = type;
            } else {
                return this._type;
            }

        },

        /**
         * @param {Function} callback The callback function
         * @param {Object} [context] The "this" context for the callback
         *
         * Iterator function. Only an alias for lodash _.forEach
         */
        each: function (callback, context) {

            debug.set.trace('#each');

            _.forEach(this.elements(), function(element, index){

                if(element !== undefined){
                    if(callback.call(context, element, index) === false){
                        return false;
                    }
                }

            });

        },

        /**
         * @param {Function} callback The callback function
         * @param {Object} [context] The "this" context for the callback
         *
         * Iterator function. Only an alias for lodash _.any
         */
        any : function(callback, context){

            debug.set.trace('#any');

            var result = false;

            _.any(this.elements(), function(element, index){

               return (element !== undefined && callback.call(context, element, index));

            });

            return result;

        },

        /**
         * @param {*} element
         * @param {boolean} [checkDuplicate=true] Tests for duplicate elements in the set. Set to false to skip this
         * verification if you are sure the element is not in the set
         * @returns {boolean} True if the element was added, false otherwise
         *
         * Directly add an element to the set.
         */
        add: function (element, checkDuplicate) {

            debug.set.trace('#add');

            if (_.isUndefined(checkDuplicate)) {
                checkDuplicate = true;
            }

            if (element) {

                debug.set.trace('#add coercing element');

                element = coerce(this.type(), element, this);

                if ((checkDuplicate && !this.exists(element)) || !checkDuplicate) {

                    this.ee.emit('beforeAdd', element);

                    var newIndex = this.elements().push(element) - 1;

                    this.ee.emit('afterAdd', element, newIndex);

                    return true;

                }

            }

            return false;

        },


        /**
         * @param {*} element The element to remove
         * @returns {boolean} Returns true if the element was removed, false otherwise
         *
         * Removes an element from the set.
         */
        remove: function (element) {

            debug.set.trace('#remove');

            element = coerce(this.type(), element);

            var index = this.index(element);

            return this.removeAt(index);

        },

        /**
         * @param {number} index The index at which to remove the element
         * @returns {Boolean} True if deleted, false otherwise
         *
         * Removes an element from the set at the specified index.
         */
        removeAt: function (index) {

            debug.set.trace('#removeAt');

            var element = this.atIndex(index);

            if(element === undefined){
                return false;
            }

            this.ee.emit('beforeRemove', element, index);

            this.elements()[index] = undefined;

            this._deletedCount++;

            this.ee.emit('afterRemove', element, index);

            return true;

        },

        /**
         * @returns {null|*} The first element or null.
         *
         * Gets the first element from the set.
         */
        first : function(){

            debug.set.trace('#first');

            var result = _.find(this.elements(), function(element){

                if(!_.isUndefined(element)){
                    return true;
                }

            });

            if(_.isUndefined(result)){
                return null;
            } else {
                return result;
            }

        },

        /**
         * @param {*} object
         * @returns {number|null} Index of object if found, null otherwise
         * @private
         *
         * Find the index of an element with defined type equality methods
         */
        _indexByEquality: function (object) {

            debug.set.trace('#indexByEquality');

            var result = null;

            this.each(function (element, key) {

                if (equal(this.type(), element, object)) {
                    result = key;
                    return false;
                }

            }, this);

            return result;

        },

        /**
         * @param {Object} element The element to search for
         * @returns {null|number} The index of the element if found, null otherwise
         *
         * Gets the index of an element
         */
        index: function (element) {

            debug.set.trace('#index');

            var result = null;

            element = coerce(this.type(), element);

            if(this._index){
                result = this._index(element);
            }

            if (result !== null) return result;

            return this._indexByEquality(element);

        },

        /**
         * Gets the element at the specified index
         * @param {number} index The index of the element
         * @returns {*} The resulting element
         */
        atIndex: function (index) {

            debug.set.trace('#atIndex');

            return this.elements()[index];
        },


        /**
         * @param {*} element The element to find
         * @returns {null|*} the resulting element or null if not found
         *
         * Finds an element
         */
        find: function (element) {

            debug.set.trace('#find');

            var index = this.index(element);

            if (index !== null) {
                return this.atIndex(index);
            } else {
                return null;
            }

        },

        /**
         * @param {*} element The element to check for
         * @returns {boolean} True if the element exists, false if not
         *
         * Checks if an element exists in the set.
         */
        exists: function (element) {

            debug.set.trace('#exists');

            return (this.index(element) !== null);

        },

        /**
         * @returns {number} Number of elements in the set
         */
        length: function () {

            debug.set.trace('#length');

            return this.elements().length-this._deletedCount;

        },

        /**
         * @param {Set} set2 The set to perform union with
         * @returns {Set} The resulting set
         *
         * Union of two sets. Returns a set containing all the elements from A and B.
         *
         *     var set1 = new affinity.Set(affinity.Integer, [1, 2, 3]);
         *
         *     var set2 = new affinity.Set(affinity.Integer, [3, 4, 5]);
         *
         *     var result = set1.setUnion(set2);
         *
         *     // Set has elements [1, 2, 3, 4, 5] (note no duplicates)
         */
        setUnion: function (set2) {

            debug.set.trace('#union');

            var thisType = this.type();
            var otherType = set2.type();

            var type = (thisType === otherType) ? thisType : null;

            var newSet = new this.constructor();

            newSet.type(type);

            _.forEach([this, set2], function (aSet) {

                aSet.each(function (element) {
                    newSet.add(clone(element));
                })

            });

            return newSet;

        },

        /**
         *
         * @param {Set} set2 The set acting as a pastry cutter
         * @returns {Set}
         *
         *     Perform a difference between two sets. Returns a set with the elements of A without
         *     those that A and B have in common.
         *
         *         var set1 = new affinity.Set(affinity.Integer, [1, 2, 3]);
         *
         *         var set2 = new affinity.Set(affinity.Integer, [3, 4, 5]);
         *
         *         var result = set1.setDifference(set2);
         *
         *         // Set has elements [1, 2]
         */
        setDifference: function (set2) {

            debug.set.trace('#difference');

            var newSet = new this.constructor();
            newSet.type(this.type());

            this.each(function (element) {

                if(!set2.exists(element)){
                    newSet.add(clone(element), false);
                }

            });

            return newSet;

        },

        /**
         *
         * @param {Set} set2 The set to perform product with
         * @returns {Set}
         *
         * Performs a product of two sets. Returns a set with all the possible combinations
         * of elements from A combined with those of B. This operation will return a set containing
         * tuples with attributes { 0 : attr1, 1 : attr2}. 0 is the left set element, 1 is the
         * right set element.
         *
         *     var set1 = new affinity.Set(affinity.Integer, [1, 2]);
         *
         *     var set2 = new affinity.Set(affinity.Integer, [3, 4]);
         *
         *     var result = set1.setProduct(set2);
         *
         *     // Set has elements [Tuple(0 : 1, 1 : 3),Tuple(0 : 1, 1 : 4),Tuple(0 : 2, 1 : 2),Tuple(0 : 2, 1 : 4)]
         */
        setProduct: function (set2) {

            debug.set.trace('#product');

            var Tuple = require('./Tuple.js');

            var newSet = new Set({type: Tuple});

            this.each(function (element1) {

                set2.each(function (element2) {

                    var tuple = new Tuple({0: element1, 1: element2});
                    newSet.add(tuple, false);

                });

            });

            return newSet;

        },

        /**
         *
         * @param {Set} set2 The set to be intersected with
         * @returns {Set} The resulting set
         *
         * Performs an intersection with another set. Returns a set with
         * the elements that A and B have in common.
         *
         *     var set1 = new affinity.Set(affinity.Integer, [1, 2, 3]);
         *
         *     var set2 = new affinity.Set(affinity.Integer, [3, 4, 5]);
         *
         *     var result = set1.setIntersection(set2);
         *
         *     // Set has elements [3]
         */
        setIntersection: function (set2) {

            debug.set.trace('#intersection');

            var newSet = new this.constructor();

            newSet.type(this.type());

            this.each(function (element1) {

                if (set2.exists(element1)) {
                    newSet.add(clone(element1), false);
                }

            }, this);

            return newSet;

        },

        /**
         *
         * @param {Set} set2 The set to peform symmetric difference against
         * @returns {Set} The resulting set
         *
         * Performs a symmetric difference. Returns a set with the elements that A
         * and B do not have in common.
         *
         *     var set1 = new affinity.Set(affinity.Integer, [1, 2, 3]);
         *
         *     var set2 = new affinity.Set(affinity.Integer, [3, 4, 5]);
         *
         *     var result = set1.setSymmetricDifference(set2);
         *
         *     // Set has elements [1, 2, 4, 5]
         */
        setSymmetricDifference: function (set2) {

            debug.set.trace('#symmetricDifference');

            var newSet = new (this.constructor)({type: this.type()});

            var set1 = this;

            set1.each(function (element1) {

                if (!set2.exists(element1)) {
                    newSet.add(clone(element1));
                }

            });

            set2.each(function (element2) {

                if (!set1.exists(element2)) {
                    newSet.add(clone(element2));
                }

            });

            return newSet;

        },

        /**
         * @param aSet
         * @returns {boolean}
         *
         * Determine if the set is a subset of another set.
         */
        isSubset : function(aSet){

            debug.set.trace('#isSubset');

            var match = true;

            this.each(function(element){
                if(!aSet.exists(element)){
                    match = false;
                    return false;
                }
            });

            return match;

        },

        /**
         * @param aSet
         * @returns {boolean}
         *
         * Determine if the set is a superset of another set
         */
        isSuperset : function(aSet){

            debug.set.trace('#isSuperset');

            return !aSet.isSubset(this);
        },

        /**
         * @param aSet
         * @returns {boolean}
         *
         * Determines if the set is a proper subset of another set
         */
        isProperSubset : function(aSet){

            debug.set.trace('#isProperSubset');

            if(this.length() >= aSet.length()){
                return false;
            }
            return this.isSubset(aSet);
        },

        /**
         * @param aSet
         * @returns {boolean}
         *
         * Determine if the set is a proper superset of another set
         */
        isProperSuperset : function(aSet){

            debug.set.trace('#isProperSuperset');

            return !aSet.isProperSubset(this);
        },

        /**
         * @param {Set} anotherSet
         * @returns {boolean}
         *
         * Checks if two sets are equal
         */
        equal: function (anotherSet) {

            debug.set.trace('#equal');

            return this.constructor.equal(this, anotherSet);

        }




    }, {

        /**
         *
         * @param {Set} set1 The first set to compare
         * @param {Set} set2 The second set to compare
         * @returns {boolean} True if the sets are equal, false otherwise
         * @static
         *
         * Checks if two sets are equal
         *
         */
        equal: function (set1, set2) {

            debug.set.trace('.equal');

            var setLength1 = set1.length(),
                setLength2 = set2.length(),
                mismatch = false;

            // Check that both sets are of the same type

            if (set1.type() && set2.type() && (set1.type() !== set2.type())) {
                return false;
            }

            // Check that both sets are of the same length
            if (setLength1 !== setLength2) {
                return false;
            }

            // Find each set1 items in set2
            set1.each(function (element1) {

                var index2 = set2.index(element1);

                if (index2 === null) {
                    mismatch = true;
                    return false;
                }

            });

            return !mismatch;

        }

    });

module.exports = Set;
},{"./Tuple.js":11,"./Type.js":12,"./helpers/clone":79,"./helpers/coerce":80,"./helpers/debug.js":82,"./helpers/equal":83,"eventemitter3":102,"lodash":103}],11:[function(require,module,exports){
var Type = require('./Type.js');
var Header = require('./Type.js');
var TString = require('./types/String.js');
var Attribute = require('./Attribute.js');
var _ = require('lodash');
var equal = require('./helpers/equal');
var value = require('./helpers/value');
var Set = require('./Set.js');
var Tuple = Type.extend(
    {

        /**
         * @class Tuple
         * @param attributes
         * @extends Type
         * @constructor
         */
        constructor: function (attributes) {

            this.attributes = {};

            if (attributes) {

                if (!_.isObject(attributes)) {
                    throw new TypeError('Tuple attributes in wrong format')
                }

                var a;

                for (a in attributes) {

                    if (attributes.hasOwnProperty(a)) {
                        this.set(a, attributes[a]);
                    }

                }
            }

            Type.apply(this, arguments);

        },


        /**
         * Iterator function that loops through each of the tuple attributes
         * @param {Function} callback Callback function
         * @param {Object} context Execution context of the callback
         */
        each : function(callback, context){
            _.forIn(this.attributes, callback, context);
        },

        /**
         * Copies attribtues from another tuple
         * @param {Tuple} tuple Tuple to copy attributes from
         * @param {Header|Attribute[]|Set|String[]} [attributesArgument=[]] Attributes to copy
         * @param {boolean} [exclude=false] Do we exclude or include the specified arguments
         */
        copy : function(tuple, attributesArgument, exclude){

            if (exclude !== true && exclude !== false){
                exclude = false;
            }

            if (!_.isUndefined(attributesArgument) && !_.isNull(attributesArgument)) {

                var result = new Set({type: TString});

                // Coerce the attributes argument to Set of string
                if (attributesArgument instanceof Header) {
                    attributesArgument.each(function (attribute) {
                        result.add(attribute.name);
                    })
                } else if (attributesArgument instanceof Set) {
                    attributesArgument.each(function (attributeArgument) {

                        if (attributeArgument instanceof Attribute) {
                            result.add(attributeArgument.name);
                        } else if (_.isString(attributeArgument)) {
                            result.add(attributeArgument);
                        }

                    })
                } else if (_.isArray(attributesArgument)) {
                    _.forEach(attributesArgument, function (attributeArgument) {
                        if (attributeArgument instanceof Attribute) {
                            result.add(attributeArgument.name);
                        } else if (_.isString(attributeArgument)) {
                            result.add(attributeArgument);
                        }
                    })
                } else if (_.isString(attributesArgument)) {
                    result.add(attributesArgument);
                }

                attributesArgument = result;

            }

            if(attributesArgument && exclude === false){

                attributesArgument.each(function(copiedAttribute){

                    this.set(value(copiedAttribute), tuple.get(value(copiedAttribute)));

                }, this)

            } else {

                _.forEach(tuple.attributes, function (tupleAttribute, tupleAttributeKey) {

                    if (attributesArgument && exclude === true){

                        var isExcludedAttribute = false;

                        attributesArgument.each(function(excludedAttribute){

                            if (equal(TString, excludedAttribute, tupleAttributeKey)){
                                isExcludedAttribute = true;
                                return false;
                            }

                        });

                        if(!isExcludedAttribute){
                           this.set(tupleAttributeKey, tupleAttribute);
                        }

                    } else {
                        this.set(tupleAttributeKey, tupleAttribute);
                    }

                }, this)

            }

        },

        /**
         * Test for equality with another tuple
         * @param {Tuple} tuple
         * @returns {boolean}
         */
        equals: function (tuple) {
            return Tuple.equal(this, tuple);
        },

        /**
         * Sets an attribute value
         * @param {String} attributeName Name of the attribute
         * @param {*} value Value of the attribute
         */
        set: function (attributeName, value) {

            if(this.relation){

                var clone = this.clone();

                var oldValue = this.attributes[attributeName];

                var foundIndex = undefined;

                value = this.relation.header().get(attributeName).type.coerce(value);

                clone.attributes[attributeName] = value;

                // Let's check if updating the tuple's attribute
                // will cause a duplicate tuple in the relation

                if((foundIndex = this.relation.index(clone)) !== null && (this.relation.atIndex(foundIndex) !== this)){

                    this.relation.remove(this);

                } else {

                    this.relation.ee.emit('beforeUpdate', this, attributeName, value);

                    this.attributes[attributeName] = value;

                    this.relation.ee.emit('afterUpdate', this, attributeName, value, oldValue);

                }

            } else {

                this.attributes[attributeName] = value;

            }

        },

        /**
         * Gets and attribute value
         * @param {Attribute|String} attributeName Name of the attribute
         * @returns {*}
         */
        get: function (attributeName) {

            return this.attributes[attributeName];

        },

        /**
         * Deletes an attribute from the tuple
         * @param {String} attributeName The attribute name to delete
         */
        delete: function (attributeName) {
            delete this.attributes[attributeName];
        },

        /**
         * Clones a tuple
         * @returns {Tuple}
         */
        clone: function () {

            var attr,
                newTuple = new (this.constructor)();

            _.forEach(this.attributes, function (attribute, key) {

                if (_.isFunction(attribute.clone)) {
                    attr = attribute.clone();
                } else {
                    attr = attribute;
                }

                newTuple.set(key, attr);

            }, this);

            return newTuple;

        },

        /**
         * String representation of the tuple
         * @returns {string}
         */
        toString : function(){

            var count = 0;

            var attrLength = Object.keys(this.attributes).length;
            var attrs = ['Tuple({'];

            this.each(function(attribute, key){

                attrs.push(key.toString()+ ' : ' + attribute.toString());

                if(count !== attrLength-1){
                    attrs.push(', ')
                }

                count++;

            },this);

            attrs.push('})');

            return attrs.join('');

        },

        toObject : function(recursive){

            recursive = typeof(recursive) !== 'undefined' ? recursive : false;

            var result = {};

            this.each(function(attribute, key) {

                if(recursive && !!this.relation && !!this.relation.get(key) && (this.relation.get(key).type === Tuple)) {
                    result[key] = attribute.toObject(true);
                } else {
                    result[key] = attribute;
                }

            }, this);

            return result;

        }


    }, {

        type: 'Tuple',

        toString: function () {
            return 'Tuple'
        },

        /**
         * Test for equality between two tuples
         * @param {Tuple} tuple1
         * @param {Tuple} tuple2
         * @returns {boolean}
         * @static

         */
        equal: function (tuple1, tuple2) {

            var key;

            if (!(tuple1 instanceof Tuple) || !(tuple2 instanceof Tuple)) {
                throw new Error('Provided tuples are of the wrong type');
            }

            var match = true;

            tuple1.each(function(attr, key){

                if(tuple2.get(key) === null){
                    match = false;
                    return false;
                }

                if(!equal(null, attr, tuple2.get(key))){
                    match = false;
                    return false;
                }

            });

            return match;

        },

        /**
         * Check that two tuples match on the given attributes
         * @param {Tuple} tuple1
         * @param {Tuple} tuple2
         * @param {Attribute[]} attributes
         * @returns {boolean}
         * @static

         */
        matchOnAttributes : function(tuple1, tuple2, attributes){

            var match = true;

            attributes.each(function(attribute){

               var attributeName = attribute.name;

                if(!equal(null, tuple1.get(attributeName), tuple2.get(attributeName))){
                    match = false;
                    return false;
                }

            });

            return match;

        },

        /**
         * Coerces an arbitrary object to type Tuple
         * @param {Object|Tuple} tuple
         * @param relation The Relation to which belongs the tuple.
         * @returns {Tuple}
         * @static

         */
        coerce: function (tuple, relation) {


            if(tuple instanceof Tuple){

                // Given tuple is of type Tuple.

                return tuple;

            } else {

                if(!_.isObject(tuple)){

                    // It is not an object. It can't be coerced.

                    throw new TypeError('Wrong parameter type. Expected an object or a Tuple')
                }

                // It is not a Tuple instance. Check if it might be coerced.
                if (_.isArray(tuple)) {

                    if (_.isUndefined(relation) || _.isNull(relation)) {
                        throw new Error('Cannot coerce array-declared tuple if no relation is specified')
                    }

                    if (_.isFunction(relation.header)) {

                        // Collection has header

                        var header = relation.header(),
                            headerCount = header.length();

                        if (headerCount > 0) {

                            // Header has one or more attributes

                            if(!header._orderedDeclaration){
                                throw new Error('Cannot coerce an array declared tuple if the header has not been declared in array format')
                            }

                            if(headerCount !== tuple.length){
                                throw new Error('Cannot coerce Tuple, it does not have the same number of attributes as the header');
                            }

                            var newTuple = new Tuple();

                            // Iterate through each attributes of the header in order

                            header.each(function(attribute, index){

                                // Set the corresponding tuple attribute

                                newTuple.set(attribute.name, tuple[index]);

                            });

                            return newTuple;

                        }

                    }

                }

                tuple = new Tuple(tuple);

                return tuple;

            }

        }

    });

module.exports = Tuple;
},{"./Attribute.js":2,"./Set.js":10,"./Type.js":12,"./helpers/equal":83,"./helpers/value":85,"./types/String.js":99,"lodash":103}],12:[function(require,module,exports){
var Base = require('./Base.js');

var Type = Base.extend(
    {

        /**
         * @class Type
         * @extends Base
         */
        constructor: function (value) {

            //this._value = value;

            Base.apply(this, arguments);

        },

        /**
         * Clones the object
         * @returns {Type}
         */
        clone : function(){

            return new this.constructor(this._value);

        },

        /**
         * Destroys the object
         */
        destroy : function(){

        }

    }, {

        type : 'Type',

        toString: function () {
            return 'Type'
        }

    });

module.exports = Type;
},{"./Base.js":3}],13:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');

var Composition = Relation.extend(

    {

        /**
         * @class Operators.Composition
         * @extends Relation
         *
         * @param {Relation} relationA The relation A
         * @param {Relation} relationB The relation B
         *
         *
         * The Composition operator will perform a natural join between A and B while removing the common attributes
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *     // | 2                      | Mary                | Poppins            |
         *     // +------------------------+---------------------+--------------------+
         *     // | 3                      | Lucky               | Luke               |
         *     // +------------------------+---------------------+--------------------+
         *
         *     var relationB = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {fan: { type: affinity.String}}
         *          ],[
         *              [1, 'Mr X'],
         *              [1, 'Miss Dibble'],
         *              [2, 'Nat Bibble']
         *          ]);
         *     // +------------------------+---------------+
         *     // | characterId : TInteger | fan : TString |
         *     // +========================+===============+
         *     // | 1                      | Mr X          |
         *     // +------------------------+---------------+
         *     // | 1                      | Miss Dibble   |
         *     // +------------------------+---------------+
         *     // | 2                      | Nat Bibble    |
         *     // +------------------------+---------------+
         *
         *     var relationC = relationA.compose(relationB);
         *
         *     // or
         *
         *     var relationC = new affinity.Composition(relationA, relationB)
         *
         *     // +---------------------+--------------------+---------------+
         *     // | firstName : TString | lastName : TString | fan : TString |
         *     // +=====================+====================+===============+
         *     // | John                | Doe                | Mr X          |
         *     // +---------------------+--------------------+---------------+
         *     // | John                | Doe                | Miss Dibble   |
         *     // +---------------------+--------------------+---------------+
         *     // | Mary                | Poppins            | Nat Bibble    |
         *     // +---------------------+--------------------+---------------+
         *     //
         */
        constructor: function (relationA, relationB) {

            /**
             * @property {Object} args
             * @property {Relation} args.left
             * @property {Relation} args.right
             */

            debug.compose.trace('#constructor');

            this.args = {};

            this.args.left = relationA;

            this.args.right = relationB;

            Relation.call(this);

            this.commonAttributes = null;

        },

        bindEvents: function () {

            debug.compose.trace('#bindEvents');

            // Calling the parent bindEvents
            Composition.__super__.bindEvents.call(this);

            var that = this;

            var left = that.args.left;
            var right = that.args.right;

            // beforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                var leftHeader = left.header();
                var rightHeader = right.header();

                debug.compose.trace('beforeGetHeader');

                Header.assertSameNameSameType(leftHeader, rightHeader);

                that.commonAttributes = Header.commonAttributes(leftHeader, rightHeader);

                that.leftAttributes = leftHeader.setDifference(that.commonAttributes);

                that.rightAttributes = rightHeader.setDifference(that.commonAttributes);

                that.header().copy(leftHeader.setUnion(rightHeader).setDifference(that.commonAttributes));

            });

            // beforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.compose.trace('beforeGetBody');

                left.each(function (tuple) { that.doAfterAdd(left, tuple); });

                right.each(function (tuple) { that.doAfterAdd(right, tuple);});

            });

            left.ee.on('afterAdd', function(tuple){

                that.doAfterAdd(left, tuple);

            });

            right.ee.on('afterAdd', function(tuple){

                that.doAfterAdd(right, tuple);

            });

            left.ee.on('afterRemove', function(tuple, index){

                that.doAfterRemove(left, tuple);

            });

            right.ee.on('afterRemove', function(tuple, index){

                that.doAfterRemove(right, tuple);

            });

            left.ee.on('afterUpdate', function(tuple, attributeName, value){

                that.doAfterUpdate(left, tuple, attributeName, value);

            });

            right.ee.on('afterUpdate', function(tuple, attributeName, value){

                that.doAfterUpdate(right, tuple, attributeName, value);

            });

        },

        /**
         * Event handler when tuples are added to the base relations
         * @param {Relation} relation relation in which the tuple was added
         * @param {Tuple} tuple1 the tuple that was added
         */
        doAfterAdd : function(relation, tuple1){

            var that = this;

            var otherRelation = (relation === that.args.left ? that.args.right : that.args.left);

            otherRelation.each(function(tuple2){

                var match = Tuple.matchOnAttributes(tuple1, tuple2, that.commonAttributes);

                if(match){

                    var combinedTuple = _.extend({}, tuple1.attributes, tuple2.attributes);

                    var newTuple = new Tuple();

                    that.header().each(function(composeAttribute){

                        var composeAttributeName = composeAttribute.name;

                        newTuple.set(composeAttributeName, combinedTuple[composeAttributeName])

                    });

                    that.add(newTuple);

                }

            })

        },


        /**
         * Event handler when tuples are removed from the base relations.
         * @param {Relation} relation Relation in which the tuple was removed
         * @param {Tuple} removedTuple The tuple that was removed
         */
        doAfterRemove : function(relation, removedTuple){

            var that = this;

            var nonCommonAttributes = (relation === that.args.left ? that.leftAttributes : that.rightAttributes);

            // Find tuples which match the removed tuple on its attributes

            that.each(function(tuple, index){

                var match = Tuple.matchOnAttributes(tuple, removedTuple, nonCommonAttributes);

                if(match){

                    that.removeAt(index);

                }

            });

        },

        /**
         * Event handler when tuples are updated in the base relations
         * @param {Relation} relation The relation where the tuple was updated
         * @param {Tuple} tuple The tuple that was updated
         * @param {String} attributeName The name of the attribute that was updated
         * @param {*} value The new value of the attribute
         */
        doAfterUpdate : function(relation, tuple, attributeName, value, oldValue){

            var that = this;

            var otherRelation = (relation === that.args.left ? that.args.right : that.args.left);

            var result = this.args.left.compose(this.args.right);

            that.adjustTo(result);

        }

    }, {

        type : 'Composition'

    });

module.exports = Composition;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],14:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');

var Difference = Relation.extend(


    {

        /**
         * @class Operators.Difference
         * @extends Relation
         * @param {Relation} left The relation from which to remove the tuples
         * @param {Relation} right The relation that will be substracted from the other
         *
         * The Difference operation gives the first relation's tuples minus those that are in the second relation.
         *
         *     var left = new affinity.Relation([
         *              {a: { type: affinity.Integer}},
         *              {b: { type: affinity.Integer}},
         *              {c: { type: affinity.Integer}}
         *          ],[
         *              [1, 2, 3],
         *              [4, 5, 6],
         *              [7, 8, 9]
         *          ]);

         *     var right = new affinity.Relation([
         *              {a: { type: affinity.Integer}},
         *              {b: { type: affinity.Integer}},
         *              {c: { type: affinity.Integer}}
         *          ], [
         *              [1, 2, 3]
         *          ]);
         *
         *     var rel3 = left.difference(right);
         *
         *     // or
         *
         *     var rel4 = new affinity.Difference(left, right)
         *
         *     // +--------------+--------------+--------------+
         *     // | a : TInteger | b : TInteger | c : TInteger |
         *     // +==============+==============+==============+
         *     // | 4            | 5            | 6            |
         *     // +--------------+--------------+--------------+
         *     // | 7            | 8            | 9            |
         *     // +--------------+--------------+--------------+
         */
        constructor: function (left, right) {

            debug.difference.trace('#constructor');

            /**
             * @property {Object} args
             */
            this.args = {};

            /**
             * @property {Relation} left
             */
            this.args.left = left;

            /**
             * @property {Relation} right
             */
            this.args.right = right;

            /**
             * @property {Relation[]} relations
             */
            this.args.relations = [left, right];

            /**
             * @property {Boolean} computed
             */
            this.computed = false;

            // Calls the parent constructor
            Relation.call(this);

        },

        /**
         * @private
         */
        bindEvents: function () {

            debug.difference.trace('#bindEvents');

            Difference.__super__.bindEvents.call(this);

            var that = this;

            var left = that.args.left;
            var right = that.args.right;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                var leftHeader = left.header();
                var rightHeader = right.header();

                debug.difference.trace('beforeGetHeader');

                Header.assertUnionCompatible(leftHeader, rightHeader);

                that.header().copy(leftHeader);

            });


            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.difference.trace('beforeGetBody');

                left.each(function (tuple1) {

                    if (right.index(tuple1) === null) {

                        that.add(tuple1.clone(), false);

                    }

                });

                that.computed = true;

            });

            left.ee.on('afterAdd', function(tuple, index){
                that.afterLeftAdd(left, tuple);
            });

            right.ee.on('afterAdd', function(tuple, index){
                that.afterRightAdd(left, tuple);
            });

            left.ee.on('afterRemove', function(tuple, index){
                that.afterLeftRemove(right, tuple);
            });

            right.ee.on('afterRemove', function(tuple, index){
                that.afterRightRemove(right, tuple);
            });

            left.ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterLeftUpdate(left, tuple, attributeName, value, oldValue);
            });

            right.ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterRightUpdate(right, tuple, attributeName, value, oldValue);
            });

        },

        /**
         * Event triggered when tuples are removed from the left relation
         * @param {Relation} relation
         * @param {Tuple} removedTuple
         * @private
         */
        afterLeftRemove : function(relation, removedTuple){

            // If the tuple is not present in the right relation,
            // remove it
            if(this.computed && this.args.right.index(removedTuple) === null){
                this.remove(removedTuple);
            }

        },

        /**
         * Event triggered when tuples are removed from the right relation
         * @param {Relation} relation
         * @param {Tuple} removedTuple
         * @private
         */
        afterRightRemove : function(relation, removedTuple){

            // If the tuple is present in the left relation,
            // add it.
            if(this.computed && this.args.left.index(removedTuple) !== null){
                this.add(removedTuple.clone());
            }

        },

        /**
         * Event triggered when tuples are added to the left base relation
         * @param {Relation} relation
         * @param {Tuple} addedTuple
         * @private
         */
        afterLeftAdd : function(relation, addedTuple){

            // If the tuple is not in the right
            // relation, add it.
            if(this.computed && this.args.right.index(addedTuple) === null){

                this.add(addedTuple.clone());

            }

        },

        /**
         * Event triggered when tuples are added to the right base relation
         * @param {Relation} relation
         * @param {Tuple} addedTuple
         * @private
         */
        afterRightAdd : function(relation, addedTuple){

            // If the tuple is present in the left
            // relation, remove it.
            if(this.computed && this.args.left.index(addedTuple) !== null){

                this.remove(addedTuple);

            }

        },

        /**
         * Event triggered when tuples are updated on the left relation
         * @param {Relation}relation
         * @param {Tuple} tuple
         * @param {String} attributeName
         * @param {*} value
         * @param {*} oldValue
         * @private
         */
        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

            if(this.computed){

                var oldRightIndex, rightIndex, oldTuple;

                oldTuple = tuple.clone();

                oldTuple.attributes[attributeName] = oldValue;

                oldRightIndex = this.args.right.index(oldTuple);
                rightIndex = this.args.right.index(tuple);

                if(oldRightIndex === null && rightIndex === null){

                    this.find(oldTuple).set(attributeName, value);

                } else if (oldRightIndex === null && rightIndex !== null){

                    this.remove(oldTuple);

                } else if (oldRightIndex !== null && rightIndex === null){

                    this.add(tuple.clone());

                }

            }


        },

        /**
         * Event triggered when tuples are updated on the right relation
         * @param {Relation}relation
         * @param {Tuple} tuple
         * @param {String} attributeName
         * @param {*} value
         * @param {*} oldValue
         * @private
         */
        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

            if(this.computed){

                var oldLeftIndex, leftIndex, oldTuple;

                oldTuple = tuple.clone();

                oldTuple.attributes[attributeName] = oldValue;

                oldLeftIndex = this.args.left.index(oldTuple);
                leftIndex = this.args.left.index(tuple);

                if (oldLeftIndex === null && leftIndex !== null){

                    this.remove(tuple);

                } else if (oldLeftIndex !== null && leftIndex !== null){

                    this.add(oldTuple);

                    this.remove(tuple);

                } else if (oldLeftIndex !== null && leftIndex === null){

                    this.add(oldTuple);

                }
            }
        }

    }, {

        type : 'Difference'

    });

module.exports = Difference;
},{"./../Header.js":6,"./../Relation.js":9,"./../helpers/debug":82,"lodash":103}],15:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Attribute = require('./../Attribute.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');

var Extend = Relation.extend(
    {

        constructor: function (relation, expressions) {
            /**
             * @class Operators.Extension
             * @extends Relation
             * @param {Relation} relation T{he relation from which to remove the tuples
             * @param {Object[]} expressions The arguments from which to calculate the new attribute value.
             *
             * The Extend operation allows the addition of calculated {@link Header} {@link Attribute}s
             *
             *     var relationA = new affinity.Relation([
             *              {name: { type: affinity.String}},
             *              {born: { type: affinity.Integer}},
             *              {died: { type: affinity.Integer}}
             *          ],[
             *              ['Aristotle', -384, -322],
             *              ['Plato',     -428, -348],
             *              ['Socrates',  -470, -399]
             *          ]);
             *
             *     var born = relationA.get('born');
             *     var died = relationA.get('died');
             *
             *     var relationB = relationA.extend([{ lived : died.minus(born) }]);
             *
             *     //or
             *
             *     // LIVED = DIED - BORN
             *
             *     var relationB = new affinity.Extend(relationA, [{ lived : died.minus(born) }]);
             *
             *     //                                                       <-EXTENDED ATTR-->
             *     // +----------------+-----------------+-----------------+------------------+
             *     // | name : TString | born : TInteger | died : TInteger | lived : TInteger |
             *     // +================+=================+=================+==================+
             *     // | Aristotle      | -384            | -322            | 62               |
             *     // +----------------+-----------------+-----------------+------------------+
             *     // | Plato          | -428            | -348            | 80               |
             *     // +----------------+-----------------+-----------------+------------------+
             *     // | Socrates       | -470            | -399            | 71               |
             *     // +----------------+-----------------+-----------------+------------------+
             *     //
             *
             *     // Possible to add multiple attributes in one call :
             *
             *     // LIVED = DIED - BORN, SINCE = YEAR(NOW())-DIED
             *
             *     var relationB = new affinity.Extend(relationA, [
             *          { lived : died.minus(born) },
             *          { since: affinity.year(affinity.now()).minus(died) }
             *     ]);
             *
             *     //                                                       <-EXTENDED ATTR--> <-EXTENDED ATTR-->
             *     // +----------------+-----------------+-----------------+------------------+------------------+
             *     // | name : TString | born : TInteger | died : TInteger | lived : TInteger | since : TInteger |
             *     // +================+=================+=================+==================+==================+
             *     // | Aristotle      | -384            | -322            | 62               | 2335             |
             *     // +----------------+-----------------+-----------------+------------------+------------------+
             *     // | Plato          | -428            | -348            | 80               | 2362             |
             *     // +----------------+-----------------+-----------------+------------------+------------------+
             *     // | Socrates       | -470            | -399            | 71               | 2413             |
             *     // +----------------+-----------------+-----------------+------------------+------------------+
             *     //
             *
             *     // Possible to have custom defined functions
             *     // Beware though to return the right data type (divisions by zero, tan(π/2), ...)
             *
             *     // You may as well use this feature, but since affinity will later be a SQL parser too,
             *     // it will obviously not support the translation of custom defined functions into SQL code.
             *     // If you plan have use of affinity's future SQL parser, beware that these custom functions
             *     // will only run in javascript, because we need the AST so we can convert it to SQL.
             *
             *     // I would have loved javascript to support overloading of operators, but that won't
             *     // happen anytime soon.
             *
             *     var relationB = relation.extend([
             *
             *          {'lived' : {function(tuple){
             *              return tuple.get('died')-tuple.get('born');
             *          }, type : affinity.Integer},
             *
             *          {'died' : {function(tuple){
             *              return 2014 - tuple.get('died')
             *          }, type : affinity.Integer},
             *
             *     ]);
             *
             */

            debug.extend.trace('#constructor');

            /*
            * @property {Object} args
            * @property {Relation} args.relation
            * @property {Array} args.expressions
            */

            this.args = {};

            this.args.relation = relation;

            this.args.expressions = expressions;

            // Coerce the argument to an array if it is not already

            if (!_.isArray(this.args.expressions)) {
                this.args.expressions = [this.args.expressions];
            }

            // Throw an error if the expression array is of length 0
            if (this.args.expressions.length === 0) {
                throw new Error('You must define expressions!');
            }

            Relation.call(this);

        },

        bindEvents: function () {

            debug.extend.trace('#bindEvents');

            // Calling the parent bindEvents
            Extend.__super__.bindEvents.call(this);

            var that = this;

            var expressions = that.args.expressions;

            var relation = that.args.relation;

            /// BeforeGetHeader

            this.ee.once('beforeGetHeader', function () {

                debug.extend.trace('beforeGetHeader');

                // Add the attributes of the base relation

                that.header().copy(relation.header());

                /// Parse extension attributes

                _.forOwn(expressions, function (expression, key) {

                    // Expression must be an object
                    if (!_.isObject(expression)) {
                        throw new TypeError('Wrong expression format')
                    }

                    var keys = Object.keys(expression);

                    // Expression must have only one parameter
                    if (keys.length !== 1) {
                        throw new SyntaxError('Unhandled expression declaration');
                    }

                    // This is the name of the attribute to add
                    var extensionName = keys[0];

                    // This is the expression
                    var extensionParam = expression[extensionName];


                    var type;

                    // Check if the param is only an Attribute
                    if(extensionParam instanceof Attribute){

                        // Return the same type as the attribute
                        type = extensionParam.type;

                        // Convert the attribute to TupleAttribute
                        expressions[key][extensionName] = extensionParam = new (require('./../functions/tuple/Attribute'))(extensionParam.name);


                    } else {

                        // Convert the attributes objects to functions that iterate through tuples
                        extensionParam.convertAttributeToTuple();

                        // Get the return type of the expression
                        type = extensionParam.type();

                    }

                    // Key must not already exist in the current header
                    if (that.header().get(extensionName) !== null) {
                        throw new Error('Relation extension name already exists in the header');
                    }

                    // Create the new header attribute
                    var extensionAttribute = new Attribute({type: type, name: extensionName});

                    // The attribute is a calculated attribute
                    extensionAttribute.calculated(true);

                    // Add the attribute in the header
                    that.header().add(extensionAttribute);

                })

            });


            /// BeforeGetBody

            this.ee.once('beforeGetBody', function () {

                debug.extend.trace('beforeGetBody');

                relation.each(function (tuple) {

                    that.afterAdd(relation, tuple);

                })

            });

            relation.ee.on('afterAdd', function(tuple, index){
                that.afterAdd(that.args.relation, tuple);
            });

            relation.ee.on('afterRemove', function(tuple, index){
                that.afterRemove(that.args.relation, tuple);
            });

            relation.ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterUpdate(that.args.relation, tuple, attributeName, value, oldValue);
            });

        },

        /**
         * Calculates the extend expressions values for a tuple
         * @param {Tuple} tuple The tuple to calculate expressions against
         * @param {Boolean} clone either to return a new instance of the tuple, or the passed instance
         * @returns {Tuple} The built tuple
         */
        buildTuple : function(tuple, clone){

            if (_.isBoolean(clone)){
                // clone = clone;
            } else {
                clone = true;
            }

            var that = this,
                newTuple;

            if (clone){

                // Create the tuple we are going to add
                newTuple = new Tuple();

                // Copy the attributes from the base tuple
                newTuple.copy(tuple);

            } else {

                newTuple = tuple;

            }

            _.forEach(that.args.expressions, function (expression) {

                // This is the new attribute name
                var attributeName = Object.keys(expression)[0];

                // This is the evaluation expression
                var attributeExpression = expression[attributeName];

                attributeExpression.assignTuple(newTuple);

                // This is the new value
                var expressionValue = attributeExpression.value();

                // Let's set the new value in the tuple
                newTuple.set(attributeName, expressionValue);

            });

            return newTuple;
        },

        afterAdd : function(relation, addedTuple){

            var that = this;

            that.add(that.buildTuple(addedTuple));

        },

        afterRemove : function(relation, tuple, index){

            var myTuple = this.buildTuple(tuple);

            this.remove(myTuple);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){

            var that = this;

            var tupleClone = tuple.clone();

            tupleClone.set(attributeName, oldValue);

            tupleClone = that.buildTuple(tupleClone);

            var myTuple =  that.find(tupleClone);

            myTuple = that.find(myTuple);

            myTuple.set(attributeName, value);

            that.buildTuple(myTuple, false);

        }

    }, {

        type : 'Extension'

    });

module.exports = Extend;
},{"./../Attribute.js":2,"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../functions/tuple/Attribute":78,"./../helpers/debug":82,"lodash":103}],16:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var Attribute = require('./../Attribute.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');




var Group = Relation.extend(

    {

        /**
         * @class Operators.Group
         * @extends Relation
         * @param {Relation} relation The relation to group
         * @param {String} attributeName The new grouped attribute name
         * @param {String[]} attributes The attributes to group
         *
         * The Group operation will group the specified tuple's attributes into one.
         * The resulting tuples will have an {@link Attribute} whose {@link Type} will be a {@link Relation}. See example.
         *
         *     var relationA = new affinity.Relation([
         *              {a: { type: affinity.Integer}},
         *              {b: { type: affinity.Integer}},
         *              {c: { type: affinity.Integer}}
         *          ],[
         *              [1, 2, 3],
         *              [4, 5, 6],
         *              [4, 9, 9],
         *              [7, 8, 9]
         *          ]);
         *
         *     var relationB = relationA.group('groupedAttribute', ['b', 'c'])
         *
         *     //or
         *
         *     var relationB = new affinity.Group(relationA, 'groupedAttribute', ['b','c'])
         *
         *     //                 <----GROUPING ATTRIBUTE---------->
         *     // +--------------+---------------------------------+
         *     // | a : TInteger | groupedAttribute : Relation     |
         *     // +==============+=================================+
         *     // | 1            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 2            | 3            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         *     // | 4            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 5            | 6            | |
         *     // |              | +--------------+--------------+ |
         *     // |              | | 9            | 9            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         *     // | 7            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 8            | 9            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         */
        constructor: function (relation, attributeName, attributes) {

            /**
             * @property {Object} args
             * @property {Relation} args.relation
             * @property {String} args.groupingAttributeName
             * @property {String[]} args.groupedAttributeNames
             * @property {Attribute[]} args.groupedAttributes
             * @property {Attribute} args.groupingAttribute
             */

            debug.group.trace('#constructor');

            this.args = {};

            this.args.relation = relation;

            this.args.groupingAttributeName = attributeName;

            this.args.groupedAttributeNames = attributes;

            this.args.groupedAttributes = [];

            this.args.groupingAttribute = null;

            // Calling the parent constructor
            Relation.call(this);

        },

        bindEvents: function () {

            debug.group.trace('#bindEvents');

            // Calling the parent bindEvents
            Group.__super__.bindEvents.call(this);

            var that = this,
                groupedAttributeNames = this.args.groupedAttributeNames,
                groupingAttributeName = this.args.groupingAttributeName,
                relation = this.args.relation,
                groupedAttributes = that.args.groupedAttributes;

            // BeforeGetHeader
            that.ee.once('beforeGetHeader', function () {

                // We want to have this kind of relation
                //
                // +----------------+----------------+-------------------------------------+
                // | attr3 : <type> | attr4 : <type> | groupedAttr : Relation              |
                // +================+================+=====================================+
                //
                // Where attr3 and attr4 are non grouped attributes
                // and groupedAttr will contain the grouped attributes relations
                //

                var header = relation.header();

                debug.group.trace('beforeGetHeader');

                // Check that the attributes specified in groupedAttributeNames exists in the base header
                _.forEach(groupedAttributeNames, function(groupedAttributeName){
                    if(header.get(groupedAttributeName) === null){
                        throw new Error('Attribute with name "'+groupedAttributeName+'" does not exist in the header')
                    }
                });

                // Loop through each of the relation's header attributes
                header.each(function(attribute){

                    // Check if the attribute is part of the grouped attributes

                    var present = _.any(groupedAttributeNames, function(groupedAttributeName){
                        return groupedAttributeName === attribute.name;
                    });

                    if(!present){
                        // If it is not present, add it to the header.
                        that.header().add(attribute.clone());
                    } else {
                        // If it is present, store it in the groupedAttributeNames array
                        groupedAttributes.push(attribute);
                    }

                });

                // Let's create the groupingAttributeName and add it to the header

                that.args.groupingAttribute = new Attribute({name : groupingAttributeName, type : Relation});

                that.header().add(that.args.groupingAttribute);

            });


            // BeforeGetBody
            that.ee.once('beforeGetBody', function () {

                debug.group.trace('beforeGetBody');


                // Make sure the header is computed

                that.header();


                // Let's loop through each of the relation's tuples

                relation.each(function(tuple){

                    // This variable will store the tuple grouped attribute values
                    var groupedAttributeValues = {};

                    // This variable will store the tuple non-grouped attribute values
                    var nonGroupedAttributeValues = {};

                    // Now, we will build these variables

                    // Let's loop through each of the tuple's attribute values
                    tuple.each(function(value, key){

                        // Check if the current tuple attribute is grouped or not grouped
                        var grouped = _.any(that.args.groupedAttributes, function(groupedAttribute){
                            return key === groupedAttribute.name;
                        });

                        if(grouped){

                            // Tuple attribute is part of the grouped attributes

                            groupedAttributeValues[key] = value;

                        } else {

                            // Tuple attribute is not part of the grouped attributes

                            nonGroupedAttributeValues[key] = value;

                        }

                    });


                    // The groupedAttributeValues and nonGroupedAttributeValues are now built
                    //
                    // We started with a tuple like
                    // { attr1 : value, attr2 : value, attr3: value, attr4 : value}
                    //
                    // We grouped 'attr1' and 'attr2'
                    //
                    // And we simply divided the tuples into two objects, one containing the attribute values
                    // that are supposed to be grouped, and another that is not supposed to be grouped
                    //
                    // They should look somewhat like :
                    // groupedAttributeValues : { attr1 : value, attr2 : value, ... }
                    // nonGroupedAttributeValues : { attr3 : value, attr4 : value, ...}


                    // If two tuples have the same non grouped attribute values, what we will do
                    // is merge their nonGroupedAttributeValues into a "nested relation", meaning
                    // that we will have a relation that will contain relations.


                    // Let's loop through each tuple of the being-built relation
                    // and see if a tuple already exists with the same nonGroupedAttributeValues


                    var matchingTuple = null;

                    that.each(function(tuple){

                        var match = true;

                        _.forOwn(nonGroupedAttributeValues, function(value, key){

                            if(tuple.get(key) !== value){

                                match = false;
                                return false;

                            }

                        });

                        if(match){
                            matchingTuple = tuple;
                            return false;
                        }

                    });


                    if (matchingTuple === null){

                        // A tuple with the same non grouped attribute values has not been found.
                        // We will create it and create the nested relation too.

                        var newTuple = new Tuple(nonGroupedAttributeValues);


                        // This tuple should look like
                        // +----------------+----------------+
                        // | attr3 : <type> | attr4 : <type> |
                        // +================+================+
                        // | value          | value          |
                        // +----------------+----------------+


                        // Creating the relation

                        var newRelation = new Relation();


                        // Adding the grouped attributes to the new nested relation header

                        _.forOwn(groupedAttributes, function(attribute){

                            newRelation.header().add(attribute.clone());

                        });

                        // We will store the relation header in the root relation header attribute
                        // So that we will know what kind of relation this is without having to access
                        // the body

                        that.args.groupingAttribute.relationHeader = newRelation.header().clone();

                        // This relation should look like
                        // +----------------+----------------+
                        // | attr1 : <type> | attr2 : <type> |
                        // +================+================+


                        // Setting the relation in the tuple grouped attribute

                        newTuple.set(groupingAttributeName, newRelation);

                        // The tuple will now be
                        // +----------------+----------------+-------------------------------------+
                        // | attr3 : <type> | attr4 : <type> | groupedAttr : Relation              |
                        // +================+================+=====================================+
                        // | value          | value          | +----------------+----------------+ |
                        // |                |                | | attr1 : <type> | attr2 : <type> | |
                        // |                |                | +================+================+ |
                        // +----------------+----------------+-------------------------------------+



                        // Adding the tuple to the relation

                        that.add(newTuple, false);


                        // A matching tuple now exists because we just created it

                        matchingTuple = newTuple;

                    }

                    // We create the tuple that will be inserted in the nested relation

                    var nestedTuple = new Tuple(groupedAttributeValues);

                    // We add this tuple to the nested relation

                    matchingTuple.get(groupingAttributeName).add(nestedTuple, false);

                    // And voilà!

                });


            });

            // Binds the base relation afterAdd event
            that.args.relation.ee.on('afterAdd', function(tuple, index){
                that.afterAdd(relation, tuple);
            });

            // Binds the base relation afterRemove event
            that.args.relation.ee.on('afterRemove', function(tuple, index){
                that.afterRemove(relation, tuple);
            });

            // Binds the base relation afterUpdate event
            that.args.relation.ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterUpdate(relation, tuple, attributeName, value, oldValue);
            });

        },

        /**
         * Event handler when a tuple has been added to the base relation
         * @param {Relation} relation
         * @param {Tuple} tuple
         */
        afterAdd : function(relation, tuple){
            debug.group.trace('Group#afterAdd');
            var result = this.args.relation.group(this.args.groupingAttributeName, this.args.groupedAttributeNames);
            this.adjustTo(result);
        },

        /**
         * Event handler when a tuple has been removed from the base relation
         * @param {Relation} relation
         * @param {Tuple} tuple
         */
        afterRemove : function(relation, tuple){
            debug.group.trace('Group#afterRemove');
            var result = this.args.relation.group(this.args.groupingAttributeName, this.args.groupedAttributeNames);
            this.adjustTo(result);
        },

        /**
         * Event handler when a tuple has been updated from the base relation
         * @param {Relation} relation
         * @param {Tuple} tuple
         * @param {String} attributeName
         * @param {*} value
         * @param {*} oldValue
         */
        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            debug.group.trace('Group#afterUpdate');
            var result = this.args.relation.group(this.args.groupingAttributeName, this.args.groupedAttributeNames);
            this.adjustTo(result);
        }

    }, {

        type : 'Group'

    });

module.exports = Group;
},{"./../Attribute.js":2,"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],17:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');


var Intersection = Relation.extend(

    {

        /**
         * @class Operators.Intersection
         * @param {Relation} relationA
         * @param {Relation} relationB
         * @extends Relation
         *
         * The intersection creates a new relation with tuples common in relationA and relationB
         *
         *     var rel1 = new affinity.Relation([
         *           {a: { type: affinity.Integer}},
         *           {b: { type: affinity.Integer}},
         *           {c: { type: affinity.Integer}}
         *       ], [
         *           [1, 2, 3],
         *           [4, 5, 6],
         *           [7, 8, 9]
         *       ]);
         *
         *     var rel2 = new affinity.Relation([
         *          {a: { type: affinity.Integer}},
         *          {b: { type: affinity.Integer}},
         *          {c: { type: affinity.Integer}}
         *      ], [
         *          [1, 2, 3]
         *      ]);
         *
         *v    ar rel3 = new affinity.Intersection(rel1, rel2);
         *
         *     // +--------------+--------------+--------------+
         *     // | a : TInteger | b : TInteger | c : TInteger |
         *     // +==============+==============+==============+
         *     // | 1            | 2            | 3            |
         *     // +--------------+--------------+--------------+
         */

        constructor: function (relationA, relationB) {

            this.rels = [relationA, relationB];

            Relation.call(this);

        },

        bindEvents: function () {

            debug.intersection.trace('#bindEvents');

            Intersection.__super__.bindEvents.call(this);

            var that = this;

            var rel1 = that.rels[0],
                rel2 = that.rels[1];


            // BeforeGetHeader

            this.ee.once('beforeGetHeader', function () {

                var header1 = rel1.header();
                var header2 = rel2.header();

                debug.intersection.trace('beforeGetHeader');

                Header.assertUnionCompatible(header1, header2);

                that.header().copy(header1);

            });


            // BeforeGetBody

            this.ee.once('beforeGetBody', function () {

                debug.intersection.trace('beforeGetBody');

                rel1.each(function (tuple1) {

                    if (rel2.index(tuple1) !== null) {
                        that.add(tuple1.clone(), false);
                    }

                })

            });

        },

        afterLeftAdd : function(relation, tuple){

        },

        afterLeftRemove : function(relation, tuple){

        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

        },

        afterRightAdd : function(relation, tuple){

        },

        afterRightRemove : function(relation, tuple){

        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

        }

    }, {

        type : 'Intersection'

    });

module.exports = Intersection;
},{"./../Header.js":6,"./../Relation.js":9,"./../helpers/debug":82,"lodash":103}],18:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var debug = require('./../helpers/debug');

var _ = require('lodash');



var Join = Relation.extend(

    {

        /**
         * @class Operators.Join
         * @param {Relation} relationA
         * @param {Relation} relationB
         * @extends Relation
         *
         * The Join operation returns all possible combinations of tuples from relationA and relationB where
         * the tuples have the same value for their common attributes.
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {fan: { type: affinity.String}}
         *          ],[
         *              [1, 'Mr X'],
         *              [1, 'Miss Dibble'],
         *              [2, 'Nat Bibble']
         *          ]);
         *
         *     var relationC = relationA.join(relationB);
         *
         *     // or
         *
         *     var relationC = new affinity.Join(relationA, relationB)
         *
         *     // <---COMMON ATTRIBUTE---->
         *     // +------------------------+---------------------+--------------------+---------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString | fan : TString |
         *     // +========================+=====================+====================+===============+
         *     // | 1                      | John                | Doe                | Mr X          |
         *     // +------------------------+---------------------+--------------------+---------------+
         *     // | 2                      | John                | Doe                | Miss Dibble   |
         *     // +------------------------+---------------------+--------------------+---------------+
         *     // | 3                      | Mary                | Poppins            | Nat Bibble    |
         *     // +------------------------+---------------------+--------------------+---------------+
         *     //
         *
         */
        constructor: function (relationA, relationB) {

            this.rels = [relationA, relationB];
            this._commonAttributes = [];

            Relation.call(this);

            var that = this;

        },

        bindEvents: function () {

            debug.join.trace('#bindEvents');

            Join.__super__.bindEvents.call(this);

            var that = this;

            var rel1 = that.rels[0];
            var rel2 = that.rels[1];

            // BeforeGetHeader

            this.ee.once('beforeGetHeader', function () {

                debug.join.trace('beforeGetHeader');

                var header1 = rel1.header();
                var header2 = rel2.header();

                Header.assertSameNameSameType(header1, header2);

                that.commonAttributes = Header.commonAttributes(header1, header2);

                that.header().copy(header1);
                that.header().copy(header2);

            });


            // BeforeGetBody

            this.ee.once('beforeGetBody', function () {

                that.header();

                debug.join.trace('beforeGetBody');

                // Loop through each body of the first relation
                rel1.each(function (tuple1) {

                    // Loop through each tuples of the second relation
                    rel2.each(function (tuple2) {

                        var match = Tuple.matchOnAttributes(tuple1, tuple2, that.commonAttributes);

                        // If a match was detected
                        if (match) {

                            // Clone the first tuple
                            var newTuple = new Tuple();

                            // Copy the joined tuple attributes
                            newTuple.copy(tuple1);
                            newTuple.copy(tuple2);

                            // Then add it to the relation
                            that.add(newTuple, false);
                        }

                    }, that);

                }, that)

            });

            that.rels[0].ee.on('afterAdd', function(tuple, index){
                that.afterLeftAdd(that.rels[0], tuple, index);
            });

            that.rels[1].ee.on('afterAdd', function(tuple, index){
                that.afterRightAdd(that.rels[1], tuple, index);
            });

            that.rels[0].ee.on('afterRemove', function(tuple, index){
                that.afterLeftRemove(that.rels[0], tuple, index);
            });

            that.rels[1].ee.on('afterRemove', function(tuple, index){
                that.afterRightRemove(that.rels[0], tuple, index);
            });

            that.rels[0].ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterLeftUpdate(that.rels[0], tuple, attributeName, value, oldValue);
            });

            that.rels[1].ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterLeftUpdate(that.rels[0], tuple, attributeName, value, oldValue);
            });


        },

        afterLeftAdd : function(relation, tuple){
            debug.group.trace('Join#afterLeftAdd');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        },

        afterLeftRemove : function(relation, tuple){
            debug.group.trace('Join#afterLeftRemove');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){
            debug.group.trace('Join#afterLeftUpdate');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        },

        afterRightAdd : function(relation, tuple){
            debug.group.trace('Join#afterRightAdd');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        },

        afterRightRemove : function(relation, tuple){
            debug.group.trace('Join#afterRightRemove');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){
            debug.group.trace('Join#afterRightUpdate');
            var result = this.rels[0].join(this.rels[1]);
            this.adjustTo(result);
        }

    }, {

        type : 'Join'

    });

module.exports = Join;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],19:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Product = Relation.extend(

    {

        /**
         * @class Operators.Product
         * @param {Relation} relationA
         * @param {Relation} relationB
         * @extends Relation
         *
         * Example :
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = new affinity.Relation([
         *              {product: { type: affinity.String}}
         *          ],[
         *              ['Doll'],
         *              ['PlayMobile'],
         *          ]);
         *
         *     var relationC = relationA.product(relationB);
         *
         *     // or
         *
         *     var relationC = new affinity.Product(relationA, relationB)
         *
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString | product : TString |
         *     // +========================+=====================+====================+===================+
         *     // | 1                      | John                | Doe                | Doll              |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | 2                      | John                | Doe                | PlayMobile        |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | 1                      | Mary                | Poppins            | Doll              |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | 2                      | Mary                | Poppins            | PlayMobile        |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | 1                      | Lucky               | Luke               | Doll              |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     // | 2                      | Lucky               | Luke               | PlayMobile        |
         *     // +------------------------+---------------------+--------------------+-------------------+
         *     //
         *
         */
        constructor: function (relationA, relationB) {

            debug.product.trace('#constructor');

            this.rels = [relationA, relationB];

            Relation.call(this);

        },

        bindEvents: function () {

            debug.product.trace('#bindEvents');

            Product.__super__.bindEvents.call(this);

            var that = this;

            var rel1 = this.rels[0];
            var rel2 = this.rels[1];

            // BeforeGetHeader

            that.ee.once('beforeGetHeader', function () {

                debug.product.trace('beforeGetHeader');

                var header1 = rel1.header();
                var header2 = rel2.header();

                // Check that the two relations have disjoint headers
                Header.assertDisjoint(header1, header2);

                that.header().copy(header1.setUnion(header2));

            });


            // BeforeGetBody

            that.ee.once('beforeGetBody', function () {

                debug.product.trace('beforeGetBody');

                var tupleSet = rel1.setProduct(rel2);

                tupleSet.each(function (tuplePair) {

                    var newTuple = new Tuple();

                    newTuple.copy(tuplePair.get('0'));
                    newTuple.copy(tuplePair.get('1'));

                    that.add(newTuple, false);

                }, that);

            });

        },

        afterLeftAdd : function(relation, tuple){

        },

        afterLeftRemove : function(relation, tuple){

        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

        },

        afterRightAdd : function(relation, tuple){

        },

        afterRightRemove : function(relation, tuple){

        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

        }

    }, {

        type : 'Product'

    });

module.exports = Product;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],20:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Projection = Relation.extend(

    {

        /**
         * @class Operators.Projection
         * @param {Relation} relation
         * @param {String[]} args
         * @extends Relation
         *
         * Example :
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *     // | 2                      | Mary                | Poppins            |
         *     // +------------------------+---------------------+--------------------+
         *     // | 3                      | Lucky               | Luke               |
         *     // +------------------------+---------------------+--------------------+
         *
         *     var relationB = relationA.project(['firstName']);
         *
         *     // or
         *
         *     var relationC = new affinity.Projection(relationA, ['firstName']);
         *
         *     // +---------------------+
         *     // | firstName : TString |
         *     // +=====================+
         *     // | John                |
         *     // +---------------------+
         *     // | Mary                |
         *     // +---------------------+
         *     // | Lucky               |
         *     // +---------------------+
         *
         */
        constructor: function (relation, args) {

            this.rel = relation;
            this.args = args;

            Relation.call(this);

        },

        bindEvents: function () {

            debug.projection.trace('#bindEvents');

            Projection.__super__.bindEvents.call(this);

            var that = this;

            var relation = this.rel;

            that.ee.once('beforeGetBody', function () {

                debug.projection.trace('beforeGetBody');

                relation.each(function (tuple) {

                    var newTuple = new Tuple();

                    newTuple.copy(tuple, that.args);

                    that.add(newTuple);

                }, that)

            });

            that.ee.once('beforeGetHeader', function () {

                debug.projection.trace('beforeGetHeader');

                that.header().copy(relation.header().project(that.args))

            });

            // Binds the base relation afterAdd event
            relation.ee.on('afterAdd', function(tuple, index){
                that.afterAdd(relation, tuple);
            });

            // Binds the base relation afterRemove event
            relation.ee.on('afterRemove', function(tuple, index){
                that.afterRemove(relation, tuple);
            });

            // Binds the base relation afterUpdate event
            relation.ee.on('afterUpdate', function(tuple, attributeName, value, oldValue){
                that.afterUpdate(relation, tuple, attributeName, value, oldValue);
            });

        },

        afterAdd : function(relation, tuple){
            var result = relation.project(this.args);
            debug.group.trace('Projection#afterAdd');
            this.adjustTo(result);
        },

        afterRemove : function(relation, tuple){
            var result = relation.project(this.args);
            debug.group.trace('Projection#afterRemove');
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = relation.project(this.args);
            debug.group.trace('Projection#afterUpdate');
            this.adjustTo(result);
        }

    }, {

        type : 'Projection'

    });

module.exports = Projection;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],21:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Tuple = require('./../Tuple.js');
var Set = require('./../Set.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Rename = Relation.extend(

    {

        /**
         * @class Operators.Rename
         * @param {Relation} relation
         * @param {Object} args
         * @extends Relation
         *
         * Example :
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = relationA.rename({'firstName':'familyName'})
         *
         *     // or
         *
         *     var relationC = new affinity.Projection(relationA, {'lastName':'familyName'});
         *
         *     //                                                <--RENAMED ATTRIBUTE--->
         *     // +------------------------+---------------------+----------------------+
         *     // | characterId : TInteger | firstName : TString | familyName : TString |
         *     // +========================+=====================+======================+
         *     // | 1                      | John                | Doe                  |
         *     // +------------------------+---------------------+----------------------+
         *     // | 2                      | Mary                | Poppins              |
         *     // +------------------------+---------------------+----------------------+
         *     // | 3                      | Lucky               | Luke                 |
         *     // +------------------------+---------------------+----------------------+
         */
        constructor: function (relation, args) {

            this.relation = relation;
            this.args = args;

            Relation.call(this);

        },

        bindEvents: function () {

            debug.rename.trace('#bindEvents');

            Rename.__super__.bindEvents.call(this);

            var that = this;

            that.ee.once('beforeGetBody', function () {

                debug.rename.trace('beforeGetBody');

                //var a, b, tupleCount, tuple, tuples, keys, keyCount, key, newName;

                //that._body = new Set({type: Tuple});

                //tuples = that.relation.body();
                //tupleCount = tuples.length;
                //keys = Object.keys(that.args);
                //keyCount = keys.length;

                that.relation.each(function(tuple){

                    var newTuple = tuple.clone();

                    _.forIn(that.args, function(value, key){

                        if(value !== key){
                            newTuple.set(value, newTuple.get(key));
                            delete newTuple.attributes[key];
                        }

                    });

                    that.add(newTuple, false);

                });

            });

            that.ee.once('beforeGetHeader', function () {

                debug.rename.trace('beforeGetHeader');

                that.header().copy(that.relation.header().rename(that.args));

            });

        },

        afterAdd : function(relation, tuple){
            var result = this.relation.rename(this.args);
            this.adjustTo(result);
        },

        afterRemove : function(relation, tuple){
            var result = this.relation.rename(this.args);
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = this.relation.rename(this.args);
            this.adjustTo(result);
        }

    }, {



    }, {

        type : 'Rename'

    });

module.exports = Rename;
},{"./../Relation.js":9,"./../Set.js":10,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],22:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');
var Function = require('./../Function.js');



var Restriction = Relation.extend(

    {

        /**
         * @class Operators.Restriction
         * @param {Relation} relation
         * @param {Function} predicate
         * @extends Relation
         *
         * Example :
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var characterId = relationA.get('characterId')
         *     var firstName = relationA.get('firstName')
         *     var lastName = relationA.get('lastName')
         *
         *
         *
         *     var relationC = relationA.restrict(characterId.equals(1))
         *
         *     // or
         *
         *     var relationC = new affinity.Projection(relationA, characterId.equals(1));
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *
         */
        constructor: function (relation, predicate) {

            this.rel = relation;
            this.predicate = predicate;
            Relation.call(this);

        },

        bindEvents: function () {

            debug.restriction.trace('#bindEvents');

            Restriction.__super__.bindEvents.call(this);

            var that = this;


            that.ee.once('beforeGetHeader', function () {

                debug.restriction.trace('beforeGetHeader');

                that.header().copy(that.rel.header());

            });


            that.ee.once('beforeGetBody', function () {

                that.rel.each( function (tuple) { that.afterAdd(tuple); })

            });

            that.rel.ee.on('afterAdd', function(tuple){
                that.afterAdd(tuple);
            })

        },

        afterAdd : function(tuple){

            debug.restriction.trace('afterAdd');

            var that = this;

            that.header();

            if(that.predicate instanceof Function){

                that.predicate.convertAttributeToTuple();

                if (that.predicate.assignTuple(tuple).value() === true) {
                    that.add(tuple.clone(), false);
                }

            } else if (_.isFunction(that.predicate)) {

                if(that.predicate(tuple)){
                    that.add(tuple.clone(), false);
                }

            } else {
                throw new TypeError('Unsupported predicate type')
            }

        },

        afterRemove : function(relation, tuple){
            var result = this.relation.restrict(this.predicate);
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = this.relation.restrict(this.predicate);
            this.adjustTo(result);
        }

    }, {

        type : 'Restriction'

    });

module.exports = Restriction;
},{"./../Function.js":5,"./../Header.js":6,"./../Relation.js":9,"./../helpers/debug":82,"lodash":103}],23:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');
var equal = require('./../helpers/equal');



var SemiDifference = Relation.extend(

    {

        /**
         * @class Operators.SemiDifference
         * @extends Relation
         * @param {Relation} relationA The relation from which to seek tuples with no counterpart
         * @param {Relation} relationB The relation containing the counterparts
         *
         * The SemiDifference will find all tuples in A that do not have a counterpart in B on their common attributes
         *
         *     // Find the characters that do not have fans
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {fan: { type: affinity.String}}
         *          ],[
         *              [1, 'Mr X'],
         *              [1, 'Miss Dibble'],
         *              [2, 'Nat Bibble']
         *          ]);
         *
         *     var relationC = relationA.sdifference(relationB);
         *
         *     // or
         *
         *     var relationC = new affinity.SemiDifference(relationA, relationB)
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 3                      | Lucky               | Luke               |
         *     // +------------------------+---------------------+--------------------+
         *     //
         *     // Lucky Luke is the only character without a fan
         *
         */
        constructor: function (relationA, relationB) {

            debug.semiDifference.trace('#constructor');

            this.rels = [relationA, relationB];

            Relation.call(this);

        },

        bindEvents: function () {

            debug.semiDifference.trace('#bindEvents');

            // Calling the parent bindEvents
            SemiDifference.__super__.bindEvents.call(this);

            var that = this;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                debug.semiDifference.trace('beforeGetHeader');

                Header.assertSameNameSameType(that.rels[0].header(), that.rels[1].header());

                that.commonAttributes = that.rels[0].header().setIntersection(that.rels[1].header());

                that.header().copy(that.rels[0].header());

            });


            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                that.header();

                debug.semiDifference.trace('beforeGetBody');

                var rel1 = that.rels[0];
                var rel2 = that.rels[1];

                rel1.each(function(tuple1){

                    var counterpart = false;

                    if(that.commonAttributes.length() > 0){

                        rel2.each(function(tuple2){

                            // Check if tuple1 has same common attributes as tuple2

                            var match = Tuple.matchOnAttributes(tuple1, tuple2, that.commonAttributes);

                            if(match){
                                counterpart = true;
                                return false;
                            }

                        });

                    }

                    if(!counterpart){
                        that.add(tuple1.clone(), false);
                    }

                })

            });

        },

        afterLeftAdd : function(relation, tuple){

        },

        afterLeftRemove : function(relation, tuple){

        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

        },

        afterRightAdd : function(relation, tuple){

        },

        afterRightRemove : function(relation, tuple){

        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

        }

    }, {

        type : 'SemiDifference'

    });

module.exports = SemiDifference;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"./../helpers/equal":83,"lodash":103}],24:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');
var equal = require('./../helpers/equal');



var SemiJoin = Relation.extend(

    {

        /**
         * @class Operators.SemiJoin
         * @extends Relation
         * @param {Relation} relationA The relation from which to seek tuples with their counterparts in B
         * @param {Relation} relationB The relation containing the counterparts
         *
         * The SemiJoin will find all tuples in A that have a counterpart in B on their common attributes
         *
         *     // Find the characters that have fans
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {fan: { type: affinity.String}}
         *          ],[
         *              [1, 'Mr X'],
         *              [1, 'Miss Dibble'],
         *              [2, 'Nat Bibble']
         *          ]);
         *
         *     var relationC = relationA.sjoin(relationB);
         *
         *     // or
         *
         *     var relationC = new affinity.SemiJoin(relationA, relationB)
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *     // | 2                      | Mary                | Poppins            |
         *     // +------------------------+---------------------+--------------------+
         *     //
         *     // John Doe and Mary Poppins have fans
         */
        constructor: function (relationA, relationB) {

            debug.semiJoin.trace('#constructor');

            this.rels = [relationA, relationB];

            Relation.call(this);

        },

        bindEvents: function () {

            debug.semiJoin.trace('#bindEvents');

            // Calling the parent bindEvents
            SemiJoin.__super__.bindEvents.call(this);

            var that = this;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                debug.semiJoin.trace('beforeGetHeader');

                Header.assertSameNameSameType(that.rels[0].header(), that.rels[1].header());

                that.commonAttributes = that.rels[0].header().setIntersection(that.rels[1].header());

                that.header().copy(that.rels[0].header());

            });


            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.semiJoin.trace('beforeGetBody');

                var relation1 = that.rels[0];
                var relation2 = that.rels[1];

                relation1.each(function(tuple1){

                    var counterpart = false;

                    if (that.commonAttributes.length() > 0){

                        relation2.each(function(tuple2){

                            var match = Tuple.matchOnAttributes(tuple1, tuple2, that.commonAttributes);

                            if(match){
                                counterpart = true;
                                return false;
                            }

                        });

                    }

                    if(counterpart){
                        that.add(tuple1.clone(), false);
                    }

                })

            });

        },

        afterLeftAdd : function(relation, tuple){

        },

        afterLeftRemove : function(relation, tuple){

        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

        },

        afterRightAdd : function(relation, tuple){

        },

        afterRightRemove : function(relation, tuple){

        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

        }

    }, {

        type : 'SemiJoin'

    });

module.exports = SemiJoin;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"./../helpers/equal":83,"lodash":103}],25:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var Attribute = require('./../Attribute.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');

var Summarize = Relation.extend({

    /**
     * @class Operators.Summarize
     * @extends Relation
     *
     * The Summarize operation will be the projection result of given relation attributes
     * while extending this resulting relation with calculated attributes.
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { id : {type : affinity.Integer} },
     *         { name : {type : affinity.String} },
     *         { age : {type : affinity.Integer} },
     *     ],[
     *         [1, 'John Doe', 23],
     *         [2, 'John Doe', 35],
     *         [3, 'John Doe', 27],
     *         [4, 'Bo Derek', 12],
     *         [5, 'Bo Derek', 7],
     *         [6, 'Marilyn Monroe', 16],
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var summarized = relation.summarize(
     *         ['name'],
     *         [
     *             { "age.avg()" : age.avg()        },
     *             { "age.sum()" : age.sum()        },
     *             { "count()"   : affinity.count() }
     *         ]
     *     );
     *
     *     summarized.print();
     *
     *     // +------------------+----------------------+---------------------+---------------------+
     *     // | name : String    | age.avg() : Float    | age.sum() : Float   | count() : Integer   |
     *     // +==================+======================+=====================+=====================+
     *     // | John Doe         | 28.333333333333332   | 85                  | 3                   |
     *     // +------------------+----------------------+---------------------+---------------------+
     *     // | Bo Derek         | 9.5                  | 19                  | 2                   |
     *     // +------------------+----------------------+---------------------+---------------------+
     *     // | Marilyn Monroe   | 16                   | 16                  | 1                   |
     *     // +------------------+----------------------+---------------------+---------------------+
     */

    /**
     * Create a new Summary relation
     * @param {Relation} relation The relation to summarize
     * @param {Attribute[]|String[]} attributes The attributes to keep
     * @param {Object[]} summaries The summary expressions
     */
    constructor : function(relation, attributes, summaries){

        this.args = {};

        this.args.relation = relation;

        this.args.attributes = attributes;

        this.args.summaries = summaries;

        Relation.call(this);

    },

    bindEvents : function(){

        debug.semiJoin.trace('#bindEvents');

        // Calling the parent bindEvents
        Summarize.__super__.bindEvents.call(this);

        var that = this;

        that.ee.once('beforeGetHeader', function(){

            var relation = that.args.relation;

            var header = relation.header();

            var attributes = that.args.attributes;

            var summaries = that.args.summaries;

            // Check that the given attributes exist in the
            // base header.
            Header.assertAttributesExist(header, attributes);

            // Copy the given attributes from the base header
            that.header().copy(relation.header(), attributes);

            // Add the summaries attributes
            _.forEach(summaries, function(summary){

                var summaryName = Object.keys(summary)[0];

                var summaryExpression = summary[summaryName];

                var summaryType = summaryExpression.type();

                var newAttribute = new Attribute({name : summaryName, type : summaryType});

                that.header().add(newAttribute);

            });

        });

        that.ee.once('beforeGetBody', function(){

            var relation = that.args.relation;

            var header = relation.header();

            var attributes = that.args.attributes;

            var summaries = that.args.summaries;

            var instanceAttributes = new Header();

            instanceAttributes.copy(header, attributes);

            // These are the attributes that will be grouped
            var otherAttributes = header.setDifference(instanceAttributes);

            var otherAttributeNames = [];

            otherAttributes.each(function(otherAttribute){
                otherAttributeNames.push(otherAttribute.name);
            });

            // Create an intermediary group relation
            var grouped = relation.group('___grouped___', otherAttributeNames);

            grouped.each(function(groupedTuple){

                // Create the tuple that will be inserted
                var newTuple = new Tuple();

                // Copy the non-grouped attributes into the new tuple
                newTuple.copy(groupedTuple, attributes);

                // Get the grouped relation
                var groupedRelation = groupedTuple.get('___grouped___');

                _.forEach(summaries, function(summary){

                    var summaryName = Object.keys(summary)[0];

                    var summaryExpression = summary[summaryName];

                    summaryExpression.relation = groupedRelation;

                    var summaryValue = summaryExpression.value();

                    newTuple.set(summaryName, summaryValue);

                });

                that.add(newTuple);

            });

        })

    },

    afterAdd : function(relation, tuple){

    },

    afterRemove : function(relation, tuple){

    },

    afterUpdate : function(relation, tuple, attributeName, value, oldValue){

    }

}, {

    type : 'Summarize'

});


module.exports = Summarize;
},{"./../Attribute.js":2,"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],26:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Ungroup = Relation.extend(
    {

        /**
         * @class Operators.Ungroup
         * @extends Relation
         * @param {Relation} relation The relation to ungroup
         * @param {String[]} groupedAttributes The grouped attribute names to ungroup
         *
         * The Ungroup operation will ungroup the specified grouped attributes.
         *
         *     var relationA = new affinity.Relation([
         *              {a: { type: affinity.Integer}},
         *              {b: { type: affinity.Integer}},
         *              {c: { type: affinity.Integer}}
         *          ],[
         *              [1, 2, 3],
         *              [4, 5, 6],
         *              [4, 9, 9],
         *              [7, 8, 9]
         *          ]);
         *
         *     var relationB = relationA.group('groupedAttribute', ['b', 'c'])
         *
         *     // +--------------+---------------------------------+
         *     // | a : TInteger | groupedAttribute : Relation     |
         *     // +==============+=================================+
         *     // | 1            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 2            | 3            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         *     // | 4            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 5            | 6            | |
         *     // |              | +--------------+--------------+ |
         *     // |              | | 9            | 9            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         *     // | 7            | +--------------+--------------+ |
         *     // |              | | b : TInteger | c : TInteger | |
         *     // |              | +==============+==============+ |
         *     // |              | | 8            | 9            | |
         *     // |              | +--------------+--------------+ |
         *     // +--------------+---------------------------------+
         *
         *     var relationC = relationB.ungroup(['groupedAttribute']);
         *
         *     //                 <----UNGROUPED ATTRIBUTES---->
         *     // +--------------+--------------+--------------+
         *     // | a : TInteger | b : TInteger | c : TInteger |
         *     // +==============+==============+==============+
         *     // | 1            | 2            | 3            |
         *     // +--------------+--------------+--------------+
         *     // | 4            | 5            | 6            |
         *     // +--------------+--------------+--------------+
         *     // | 4            | 9            | 9            |
         *     // +--------------+--------------+--------------+
         *     // | 7            | 8            | 9            |
         *     // +--------------+--------------+--------------+
         *
         *     relationC.equal(relationA) // true
         */
        constructor: function (relation, groupedAttributes) {

            debug.ungroup.trace('#constructor');

            this.relation = relation;
            this.groupedAttributeNames = groupedAttributes;

            Relation.call(this);

        },

        bindEvents: function () {

            debug.ungroup.trace('#bindEvents');

            // Calling the parent bindEvents
            Ungroup.__super__.bindEvents.call(this);

            var that = this;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                debug.ungroup.trace('beforeGetHeader');

                // Let's "flatten" the headers. We will add the nested relation header attributes
                // to this relation

                _.forEach(that.groupedAttributeNames, function(groupedAttributeName){

                    // A RVA (relation-valued attribute) stores a copy of the header of it's nested relations
                    // in the attribute.relationHeader property.
                    var relationHeader = that.relation.header().get(groupedAttributeName).relationHeader;

                    that.header().copy(relationHeader);

                });

                // Let's add all the other non-grouped attributes to the header

                that.relation.header().each(function(attribute){

                    var grouped = _.any(that.groupedAttributeNames, function(groupedAttributeName){

                        return groupedAttributeName === attribute.name;

                    });

                    if(!grouped){

                        that.header().add(attribute.clone());

                    }

                });

            });

            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.ungroup.trace('beforeGetBody');

                that.relation.each(function(tuple){

                    _.forEach(that.groupedAttributeNames, function(groupedAttributeName){

                        tuple.get(groupedAttributeName).each(function(nestedTuple){

                            var newTuple = new Tuple();

                            // Copy the non grouped attributes from the root tuple
                            newTuple.copy(tuple, that.groupedAttributeNames, true);

                            // Copy the attributes from the nested tuple

                            newTuple.copy(nestedTuple);

                            that.add(newTuple, false);

                        })

                    })

                })

            });

        },

        afterAdd : function(relation, tuple){
            var result = this.relation.ungroup(this.groupedAttributeNames);
            this.adjustTo(result);
        },

        afterRemove : function(relation, tuple){
            var result = this.relation.ungroup(this.groupedAttributeNames);
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = this.relation.ungroup(this.groupedAttributeNames);
            this.adjustTo(result);
        }

    }, {

        type : 'Ungroup'

    });

module.exports = Ungroup;
},{"./../Header.js":6,"./../Relation.js":9,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],27:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Union = Relation.extend(

    {

        /**
         * @class Operators.Union
         * @param {Relation} relationA
         * @param {Relation} relationB
         * @extends Relation
         *
         * Example :
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *
         *     var relationB = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'Mr', 'X'],
         *              [2, 'Lady', 'Gaga'],
         *              [3, 'Bo', 'Vril']
         *          ]);
         *
         *     var relationC = relationA.union(relationB)
         *
         *     // or
         *
         *     var relationC = new affinity.Union(relationA, relationB);
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+   -
         *     // | 1                      | John                | Doe                |    |
         *     // +------------------------+---------------------+--------------------+    |
         *     // | 2                      | Mary                | Poppins            |    | RelationA
         *     // +------------------------+---------------------+--------------------+    |
         *     // | 3                      | Lucky               | Luke               |    |
         *     // +------------------------+---------------------+--------------------+   -
         *     // | 1                      | Mr                  | X                  |    |
         *     // +------------------------+---------------------+--------------------+    |
         *     // | 2                      | Lady                | Gaga               |    | RelationB
         *     // +------------------------+---------------------+--------------------+    |
         *     // | 3                      | Bo                  | Vril               |    |
         *     // +------------------------+---------------------+--------------------+   -
         *
         */
        constructor: function (relationA, relationB) {
            this.rels = [relationA, relationB];
            Relation.call(this);
        },

        bindEvents: function () {

            debug.union.trace('#bindEvents');

            Union.__super__.bindEvents.call(this);

            var that = this;

            that.ee.once('beforeGetBody', function () {

                debug.union.trace('beforeGetBody');

                _.forEach(that.rels, function (relation) {

                    relation.each(function(tuple){

                        that.add(tuple.clone());

                    });

                }, that)

            });

            that.ee.once('beforeGetHeader', function () {

                debug.union.trace('beforeGetHeader');

                Header.assertUnionCompatible(that.rels[0].header(), that.rels[1].header());

                that.header().copy(that.rels[0].header());

            });

        },

        afterLeftAdd : function(relation, tuple){

        },

        afterLeftRemove : function(relation, tuple){

        },

        afterLeftUpdate : function(relation, tuple, attributeName, value, oldValue){

        },

        afterRightAdd : function(relation, tuple){

        },

        afterRightRemove : function(relation, tuple){

        },

        afterRightUpdate : function(relation, tuple, attributeName, value, oldValue){

        }

    }, {

        type : 'Union'

    });

module.exports = Union;
},{"./../Header.js":6,"./../Relation.js":9,"./../helpers/debug":82,"lodash":103}],28:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Header = require('./../Header.js');
var Tuple = require('./../Tuple.js');
var Set = require('./../Set.js');
var Attribute = require('./../Attribute.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Unwrap = Relation.extend(

    {

        /**
         * @class Operators.Unwrap
         * @extends Relation
         * @param {Relation} relation The relation to Unwrap
         * @param {String[]|String|Set|Header} attributeNames The name of the wrapped attributes to unwrap
         *
         * The Unwrap operator will reverse the {@link Operators.Wrap} operation, converting a tuple-valued attribute into
         * the attributes of the tuples.
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     var relationB = relationA.Unwrap('UnwrappedAttribute', ['firstName','lastName']);
         *
         *
         *     // +-------------------------------------------------------------------------+
         *     // | characterId : TInteger | unwrappedAttribute : Tuple                     |
         *     // +========================+================================================+
         *     // | 1                      | Tuple{firstName : 'John', lastName : 'Doe'}    |
         *     // +-------------------------------------------------------------------------+
         *     // | 2                      | Tuple{firstName : 'Mary', lastName : 'Poppins'}|
         *     // +-------------------------------------------------------------------------+
         *     // | 3                      | Tuple{firstName : 'Lucky', lastName : 'Luke'}  |
         *     // +-------------------------------------------------------------------------+
         *     //
         *
         *     var relationC = relationB.unwrap('unwrappedAttribute');
         *
         *     // or
         *
         *     var relationC = new affinity.Unwrap(relationB, 'unwrappedAttribute');
         *
         *
         *     //                          <-------UNWRAPPED ATTRIBUTES--------------->
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *     // | 2                      | Mary                | Poppins            |
         *     // +------------------------+---------------------+--------------------+
         *     // | 3                      | Lucky               | Luke               |
         *     // +------------------------+---------------------+--------------------+
         *
         */
        constructor: function (relation, attributeNames) {

            debug.unwrap.trace('#constructor');

            // Check if the relation argument is of good type
            if(!(relation instanceof Relation)){
                throw new TypeError('Specified relation is of wrong type');
            }

            // If the attributeNames is a string, coerce it to an array
            if(_.isString(attributeNames)){
                attributeNames = [attributeNames];
            }

            // If the attributeNames is not an array or set, throw an error
            if(!_.isArray(attributeNames) && !(attributeNames instanceof Set)){
                throw new Error('Unsupported type of specified attributeNames to unwrap');
            }

            if(_.isArray(attributeNames) && attributeNames.length <= 0){
                throw new Error('You must specify attributes to unwrap!');
            }

            if((attributeNames instanceof Set) && attributeNames.length() <= 0){
                throw new Error('You must specify attributes to unwrap!');
            }

            this.attributeNames = attributeNames;
            this.relation = relation;

            Relation.call(this);

        },

        bindEvents: function () {

            debug.unwrap.trace('#bindEvents');

            // Calling the parent bindEvents
            Unwrap.__super__.bindEvents.call(this);

            var relation = this.relation;

            var that = this;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                debug.unwrap.trace('beforeGetHeader');

                // Copy all attributes from the base header that will not be unwrapped
                that.header().copy(relation.header(), that.attributeNames, true);

                // Get all attributes that were wrapped in the base relation
                var alreadyWrappedAttributes = new Header();
                relation.header().each(function(attribute){
                    if(attribute.wrappedAttributes){
                        alreadyWrappedAttributes.add(attribute.clone());
                    }
                });

                // Get the attributes which will be unwrapped
                var unwrappedAttributes = new Header();
                unwrappedAttributes.copy(relation.header(), that.attributeNames);
                that.unwrappedAttributes = unwrappedAttributes;

                // Get the attributes which will not be unwrapped
                var nonUnwrappedAttributes = new Header();
                nonUnwrappedAttributes.copy(relation.header(), that.attributeNames, true);
                that.nonUnwrappedAttributes = nonUnwrappedAttributes;

                // Check that the attributes to be unwrapped are wrapped. We would not want
                // to unwrap non-wrapped attributes!
                if(!unwrappedAttributes.isSubset(alreadyWrappedAttributes)){
                    throw new Error('Specified attributes are not all wrapped attributes. Must specify attributes which are wrapped.');
                }

                // Add all nested unwrapped attributes in the header
                unwrappedAttributes.each(function(unwrappedAttribute){
                    unwrappedAttribute.wrappedAttributes.each(function(wrappedAttribute){
                        that.header().add(wrappedAttribute.clone());
                    })
                })

            });

            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.unwrap.trace('beforeGetBody');

                // Loop through each tuple of the relation
                that.relation.each(function(tuple){

                    // Create the tuple to be inserted
                    var newTuple = new Tuple();

                    // Assign the values to the attributes which will not be unwrapped
                    that.nonUnwrappedAttributes.each(function(attribute){
                        newTuple.set(attribute.name, tuple.get(attribute.name));
                    });

                    // Loop through the attributes to be unwrapped
                    that.unwrappedAttributes.each(function(unwrappedAttribute){

                        // Loop through the wrapped attribute header
                        unwrappedAttribute.wrappedAttributes.each(function(wrappedAttribute){

                            // Set the tuple value for this attribute
                            newTuple.set(wrappedAttribute.name, tuple.get(unwrappedAttribute.name).get(wrappedAttribute.name));

                        })

                    });

                    that.add(newTuple);

                })

            });

        },

        afterAdd : function(relation, tuple){
            var result = this.relation.unwrap(this.attributeNames);
            this.adjustTo(result);
        },

        afterRemove : function(relation, tuple){
            var result = this.relation.unwrap(this.attributeNames);
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = this.relation.unwrap(this.attributeNames);
            this.adjustTo(result);
        }

    }, {

        type : 'Unwrap'

    });

module.exports = Unwrap;
},{"./../Attribute.js":2,"./../Header.js":6,"./../Relation.js":9,"./../Set.js":10,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],29:[function(require,module,exports){
var Relation = require('./../Relation.js');
var Set = require('./../Set.js');
var Header = require('./../Header.js');
var Attribute = require('./../Attribute.js');
var Tuple = require('./../Tuple.js');
var _ = require('lodash');
var debug = require('./../helpers/debug');



var Wrap = Relation.extend(

    {

        /**
         * @class Operators.Wrap
         * @extends Relation
         * @param {Relation} relationA The relation to wrap
         * @param {String} wrappingAttributeName The name of the wrapping attribute
         * @param {String[]} wrappedAttributes The wrappedAttributes to wrap
         *
         * The Wrap will gather multiple wrappedAttributes into a single one, converting them to a tuple-valued attribute
         *
         *     var relationA = new affinity.Relation([
         *              {characterId: { type: affinity.Integer}},
         *              {firstName: { type: affinity.String}},
         *              {lastName: { type: affinity.String}}
         *          ],[
         *              [1, 'John', 'Doe'],
         *              [2, 'Mary', 'Poppins'],
         *              [3, 'Lucky', 'Luke']
         *          ]);
         *
         *     // +------------------------+---------------------+--------------------+
         *     // | characterId : TInteger | firstName : TString | lastName : TString |
         *     // +========================+=====================+====================+
         *     // | 1                      | John                | Doe                |
         *     // +------------------------+---------------------+--------------------+
         *     // | 2                      | Mary                | Poppins            |
         *     // +------------------------+---------------------+--------------------+
         *     // | 3                      | Lucky               | Luke               |
         *     // +------------------------+---------------------+--------------------+
         *
         *     var relationC = relationA.wrap('wrappedAttribute', ['firstName','lastName']);
         *
         *     // or
         *
         *     var relationC = new affinity.Wrap(relationA, 'wrappedAttribute', ['firstName','lastName']);
         *
         *     //                          <----WRAPPING ATTRIBUTE-------------------------->
         *     // +-------------------------------------------------------------------------+
         *     // | characterId : TInteger | wrappedAttribute : Tuple                       |
         *     // +========================+================================================+
         *     // | 1                      | Tuple{firstName : 'John', lastName : 'Doe'}    |
         *     // +-------------------------------------------------------------------------+
         *     // | 2                      | Tuple{firstName : 'Mary', lastName : 'Poppins'}|
         *     // +-------------------------------------------------------------------------+
         *     // | 3                      | Tuple{firstName : 'Lucky', lastName : 'Luke'}  |
         *     // +-------------------------------------------------------------------------+
         *     //
         *
         */
        constructor: function (relationA, wrappingAttributeName, wrappedAttributes) {

            debug.wrap.trace('#constructor');

            this.relation = relationA;

            Attribute.assertValidName(wrappingAttributeName);

            if(!_.isArray(wrappedAttributes) && !(wrappedAttributes instanceof Set)){
                throw new Error('Wrapped attributes must be an array or set of attributes / attribute names');
            }

            if(_.isArray(wrappedAttributes) && wrappedAttributes.length <= 0){
                throw new Error('There must be at least one attribute to wrap');
            }

            if(wrappedAttributes instanceof Set && wrappedAttributes.length() <= 0){
                throw new Error('There must be at least one attribute to wrap');
            }

            this.wrappedAttributeName = wrappingAttributeName;
            this.wrappedAttributes = wrappedAttributes;

            Relation.call(this);

        },

        bindEvents: function () {

            debug.wrap.trace('#bindEvents');

            // Calling the parent bindEvents
            Wrap.__super__.bindEvents.call(this);

            var that = this;

            // BeforeGetHeader
            this.ee.once('beforeGetHeader', function () {

                debug.wrap.trace('beforeGetHeader');

                // Check that the passed attributes exist in the base header
                Header.assertAttributesExist(that.relation, that.wrappedAttributes);

                // Extract the wrapped attributes, convert them to a Header instance
                var wrappedAttributes = new Header();
                wrappedAttributes.copy(that.relation.header(), that.wrappedAttributes);
                that.wrappedAttributes = wrappedAttributes;

                // Extract the non wrapped attributes in another variable, and
                // copy the attributes in this header
                that.nonWrappedAttributes = new Header();
                that.nonWrappedAttributes.copy(that.relation.header(), that.wrappedAttributes, true);
                that.header().copy(that.nonWrappedAttributes);

                // Create the wrapped attribute
                var newWrappedAttribute = new Attribute({name : that.wrappedAttributeName, type : Tuple})

                // Store the wrapped header in the attribute
                newWrappedAttribute.wrappedAttributes = that.wrappedAttributes;

                // Add it to the header
                that.header().add(newWrappedAttribute);

            });


            // BeforeGetBody
            this.ee.once('beforeGetBody', function () {

                debug.wrap.trace('beforeGetBody');

                that.relation.each(function(tuple){

                    // Create the tuple we will later insert
                    var newTuple = new Tuple();

                    // Copy the value of the non-wrapped attributes
                    newTuple.copy(tuple, that.nonWrappedAttributes);

                    // Create the nested tuple
                    var nestedTuple = new Tuple();

                    // Copy the values of the wrapped attributes in the nested tuple
                    nestedTuple.copy(tuple, that.wrappedAttributes);

                    // Add the nested tuple to the containing tuple
                    newTuple.set(that.wrappedAttributeName, nestedTuple);

                    that.add(newTuple);

                })

            });

        },

        afterAdd : function(relation, tuple){
            var result = this.relation.wrap(this.wrappedAttributeName, this.wrappedAttributes);
            this.adjustTo(result);
        },

        afterRemove : function(relation, tuple){
            var result = this.relation.wrap(this.wrappedAttributeName, this.wrappedAttributes);
            this.adjustTo(result);
        },

        afterUpdate : function(relation, tuple, attributeName, value, oldValue){
            var result = this.relation.wrap(this.wrappedAttributeName, this.wrappedAttributes);
            this.adjustTo(result);
        }

    }, {

        type : 'Wrap'

    });

module.exports = Wrap;
},{"./../Attribute.js":2,"./../Header.js":6,"./../Relation.js":9,"./../Set.js":10,"./../Tuple.js":11,"./../helpers/debug":82,"lodash":103}],30:[function(require,module,exports){
var Function = require('./../../Function');

var Boolean = require('./../../types/Boolean.js');

var _ = require('lodash');

var All = Function.extend({

    /**
     * @class Functions.Aggregate.All
     * @extends Function
     *
     * Functions that checks if all the tuples in a relation match the
     * given boolean predicate.
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var name = relation.get('name');
     *     var age = relation.get('age')
     *
     *     var all = relation.all(age.gt(20));
     *
     *     console.log(all.value());
     *
     *     // true
     */

    constructor : function(relation, predicate){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'All';

        this.predicate = predicate;

        this.relation = relation;

        this.type(Boolean);

    },


    value : function(){

        var relation = this.relation;

        var predicate = this.predicate;

        var result = true;

        predicate.convertAttributeToTuple();

        relation.each(function(tuple){

            predicate.assignTuple(tuple);

            if( predicate.value() === false ){

                result = false;
                return false;

            }

        });

        return result;

    }

});

module.exports = All;
},{"./../../Function":5,"./../../types/Boolean.js":93,"lodash":103}],31:[function(require,module,exports){
var Function = require('./../../Function');

var Boolean = require('./../../types/Boolean.js');

var _ = require('lodash');

var Any = Function.extend({

    /**
     * @class Functions.Aggregate.Any
     * @extends Function
     *
     * Functions that checks if any of the tuples in a relation match the
     * given boolean predicate.
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var name = relation.get('name');
     *     var age = relation.get('age')
     *
     *     var any = relation.any(age.gt(50));
     *
     *     console.log(any.value());
     *
     *     // true
     */

    constructor : function(relation, predicate){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Any';

        this.type(Boolean);

        this.relation = relation;

        this.predicate = predicate;

    },

    value : function(){

        var relation = this.relation;

        var predicate = this.predicate;

        var result = false;

        predicate.convertAttributeToTuple();

        relation.each(function(tuple){

            predicate.assignTuple(tuple);

            if( predicate.value() === true ){

                result = true;
                return false;

            }

        });

        return result;

    }
});

module.exports = Any;
},{"./../../Function":5,"./../../types/Boolean.js":93,"lodash":103}],32:[function(require,module,exports){
var Function = require('./../../Function');

var Float = require('./../../types/Float.js');

var _ = require('lodash');

var Average = Function.extend({

    /**
     * @class Functions.Aggregate.Average
     * @extends Function
     *
     * Functions that returns the average for a relation
     * attribute
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var max = relation.avg(age)
     *
     *     console.log(max.value());
     *
     *     // 38.33333333
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Average';

        this.type(Float);

        this.attribute = attribute;

        this.relation = attribute.header.relation;

    },

    value : function(){

        var attribute = this.attribute;

        var relation = this.relation;

        var result = 0;

        var length = relation.length();

        relation.each(function(tuple){

            result += tuple.get(attribute.name);

        });

        result = result / length;

        return result;

    }
});

module.exports = Average;
},{"./../../Function":5,"./../../types/Float.js":95,"lodash":103}],33:[function(require,module,exports){
var Function = require('./../../Function');

var Integer = require('./../../types/Integer.js');

var _ = require('lodash');

var Count = Function.extend({

    /**
     * @class Functions.Aggregate.Count
     * @extends Function
     *
     * Functions that counts the number of tuples
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var count = relation.count()
     *
     *     console.log(count.value());
     *
     *     // 3
     */

    constructor : function(relation){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Count';

        this.type(Integer);

        this.relation = relation;

    },

    value : function(){

        return this.relation.length();

    }

});

module.exports = Count;
},{"./../../Function":5,"./../../types/Integer.js":96,"lodash":103}],34:[function(require,module,exports){
var Function = require('./../../Function');

var compare = require('./../../helpers/compare.js');

var Integer = require('./../../types/Integer.js');

var Maximum = Function.extend({

    /**
     * @class Functions.Aggregate.Maximum
     * @extends Function
     *
     * Functions that returns the largest value of an attribute in a relation.
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var max = relation.max(age)
     *
     *     console.log(max.value());
     *
     *     // 56
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Maximum';

        this.type(Integer);

        this.attribute = attribute;

        this.relation = attribute.header.relation;

    },

    value : function(){

        var relation = this.relation;

        var attribute = this.attribute;

        var type = this.attribute.type;

        var max = null;

        relation.each(function(tuple){

            var value = tuple.get(attribute.name);

            if(max === null){
                max = value;
            } else if ( compare(type, value, max) > 0 ){
                max = value;
            }

        });

        return max;

    }
});

module.exports = Maximum;
},{"./../../Function":5,"./../../helpers/compare.js":81,"./../../types/Integer.js":96}],35:[function(require,module,exports){
var Function = require('./../../Function');

var compare = require('./../../helpers/compare.js');

var Integer = require('./../../types/Integer.js');

var Minimum = Function.extend({

    /**
     * @class Functions.Aggregate.Minimum
     * @extends Function
     *
     * Functions that returns the minimum value of an attribute in a relation.
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var min = relation.min(age);
     *
     *     console.log(min.value());
     *
     *     // 23
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Minimum';

        this.type(Integer);

        this.attribute = attribute;

        this.relation = attribute.header.relation;

    },

    value : function(){

        var relation = this.relation;

        var attribute = this.attribute;

        var type = this.attribute.type;

        var min = null;

        relation.each(function(tuple){

            var value = tuple.get(attribute.name);

            if(min === null){
                min = value;
            } else if ( compare(type, value, min) < 0 ){
                min = value;
            }

        });

        return min;

    }

});

module.exports = Minimum;
},{"./../../Function":5,"./../../helpers/compare.js":81,"./../../types/Integer.js":96}],36:[function(require,module,exports){
var Function = require('./../../Function');

var Float = require('./../../types/Float.js');

var Variance = require('./Variance.js');

var StandardDeviation = Function.extend({

    /**
     * @class Functions.Aggregate.StandardDeviation
     * @extends Function
     *
     * Functions that returns the standard deviation
     * of an attribute in a relation
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var stdev = relation.standardDeviation(age)
     *
     *     console.log(stdev.value());
     *
     *     // 16.6232768531
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'StandardDeviation';

        this.type(Float);

        this.attribute = attribute;

    },

    value : function(){

        var attribute = this.attribute;

        var variance = new Variance(attribute).value();

        return Math.sqrt(variance);

    }
});

module.exports = StandardDeviation;
},{"./../../Function":5,"./../../types/Float.js":95,"./Variance.js":38}],37:[function(require,module,exports){
var Function = require('./../../Function');

var Float = require('./../../types/Float.js');

var Sum = Function.extend({

    /**
     * @class Functions.Aggregate.Count
     * @extends Function
     *
     * Functions that calculates the sum of all values for
     * an attribute in a relation
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var sum = relation.sum(age);
     *
     *     console.log(sum.value());
     *
     *     // 115
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Sum';

        this.type(Float);

        this.attribute = attribute;

        this.relation = attribute.header.relation;

    },

    value : function(){

        var relation = this.relation;

        var attributeName = this.attribute.name;

        var sum = 0;

        relation.each(function(tuple){

            sum += tuple.get(attributeName);

        });

        return sum;

    }

});

module.exports = Sum;
},{"./../../Function":5,"./../../types/Float.js":95}],38:[function(require,module,exports){
var Function = require('./../../Function');

var Average = require('./Average.js');

var Float = require('./../../types/Float.js');

var Variance = Function.extend({

    /**
     * @class Functions.Aggregate.Variance
     * @extends Function
     *
     * Functions that returns the variance
     * of attribute values in a relation
     *
     * Example :
     *
     *     var relation = new affinity.Relation([
     *         { name : { type : affinity.String } },
     *         { age : { type : affinity.Integer } }
     *     ],[
     *         ['John Doe', 23],
     *         ['Mark Clinton', 36],
     *         ['Super Woman', 56]
     *     ]);
     *
     *     var age = relation.get('age');
     *
     *     var variance = relation.variance(age)
     *
     *     console.log(variance.value());
     *
     *     // 184.22222
     */

    constructor : function(attribute){

        Function.apply(this, Array.prototype.slice.call(arguments,0));

        this.name = 'Sum';

        this.type(Float);

        this.attribute = attribute;

        this.relation = attribute.header.relation

    },

    value : function(){

        var attribute = this.attribute;

        var relation = this.relation;

        var attributeName = this.attribute.name;

        var average = new Average(attribute).value();

        var length = relation.length();

        var totalVariance = 0;

        relation.each(function(tuple){

            var value = tuple.get(attributeName);

            totalVariance += Math.pow((value - average), 2);

        });

        return totalVariance / length;

    }
});

module.exports = Variance;
},{"./../../Function":5,"./../../types/Float.js":95,"./Average.js":32}],39:[function(require,module,exports){
var Function = require('./../../Function.js');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');
var equal = require('./../../helpers/equal');

var FEqual = Function.extend(

    {

        /**
         * @class Functions.Comparable.Equal
         * @extends Function
         *
         * Function that compares if two values are equal. Only applies
         * to types that implement a static "equal" method or to primitives.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ diedIn322BC : died.eq(-322) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([{ diedIn322BC : new affinity.Equal(died, -322) }]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | diedIn322BC : TBoolean |
         *      // +================+=================+=================+========================+
         *      // | Aristotle      | -384            | -322            | true                   |
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | Plato          | -428            | -348            | false                  |
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | Socrates       | -470            | -399            | false                  |
         *      // +----------------+-----------------+-----------------+------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.eq(-322));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(new affinity.Equal(died, -322));
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments,0));

            this.name = 'Equals';

            this.type(TBoolean);

        },

        /**
         * Gets the result of the function
         * @returns {Boolean}
         */
        value: function () {

            return equal(null, this.parameters[0], this.parameters[1]);

        }

});

module.exports = FEqual;
},{"./../../Function.js":5,"./../../helpers/equal":83,"./../../types/Boolean.js":93,"lodash":103}],40:[function(require,module,exports){
var Function = require('./../../Function.js');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');
var compare = require('./../../helpers/compare');

var GreaterThan = Function.extend(

    {

        /**
         * @class Functions.Comparable.GreaterThan
         * @extends Function
         *
         * Function that checks if a value is greater than another one.
         * Only applies to types that implement the static "compare" method
         * or to primitives.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ diedAfter350BC : died.gt(-322) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([{ diedAfter350BC : new affinity.GreaterThan(died, -322) }]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | diedAfter350BC : TBoolean |
         *      // +================+=================+=================+===========================+
         *      // | Aristotle      | -384            | -322            | true                      |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | Plato          | -428            | -348            | true                      |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | Socrates       | -470            | -399            | true                      |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.gt(-350));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(new affinity.GreaterThan(died, -350));
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *      // | Plato          | -428            | -348            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.name = 'GreaterThan';

            this.type(TBoolean);

        },

        /**
         * Gets the result of the function
         * @returns {boolean}
         */
        value: function () {

            return (compare(null, this.parameters[0], this.parameters[1]) > 0);

        }

    },{

    });

module.exports = GreaterThan;
},{"./../../Function.js":5,"./../../helpers/compare":81,"./../../types/Boolean.js":93,"lodash":103}],41:[function(require,module,exports){
var Function = require('./../../Function.js');
var compare = require('./../../helpers/compare');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var FLargerThanEqual = Function.extend(

    {

        /**
         * @class Functions.Comparable.GreaterThanEqual
         * @extends Function
         *
         * Function that checks if a value is greater than or equal to another one. It only applies
         * to types that implement a static "compare" method or to primitives.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ diedSince348BC : died.gte(-348) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([{ diedSince348BC : new affinity.GreaterThanEqual(died, -348) }]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | diedSince348BC : TBoolean |
         *      // +================+=================+=================+===========================+
         *      // | Aristotle      | -384            | -322            | false                     |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | Plato          | -428            | -348            | true                      |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *      // | Socrates       | -470            | -399            | true                      |
         *      // +----------------+-----------------+-----------------+---------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.gte(-348));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(new affinity.GreaterThanEqual(died, -348));
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *      // | Plato          | -428            | -348            |
         *      // +----------------+-----------------+-----------------+
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.name = 'GreaterThanEqual';

            this.type(TBoolean);

        },

        /**
         * Gets the result of the function
         * @returns {boolean}
         */
        value: function () {

            return (compare(null, this.parameters[0], this.parameters[1]) >= 0);

        }

    },{



    });

module.exports = FLargerThanEqual;
},{"./../../Function.js":5,"./../../helpers/compare":81,"./../../types/Boolean.js":93,"lodash":103}],42:[function(require,module,exports){
var Function = require('./../../Function.js');
var compare = require('./../../helpers/compare');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var FSmallerThan = Function.extend(

    {

        /**
         * @class Functions.Comparable.SmallerThan
         * @extends Function
         *
         * Function that checks if a value is smaller than another one. It only applies
         * to types that implement a static "compare" method or to primitives.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ diedBefore348BC : died.st(-348) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([{ diedBefore348BC : new affinity.SmallerThan(died, -348) }]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | diedBefore348BC : TBoolean |
         *      // +================+=================+=================+============================+
         *      // | Aristotle      | -384            | -322            | true                       |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Plato          | -428            | -348            | false                      |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Socrates       | -470            | -399            | false                      |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.st(-348));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(new affinity.SmallerThan(died, -348));
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.name = 'SmallerThan';

            this.type(TBoolean);

        },

        /**
         * Gets the result of the function
         * @returns {boolean}
         */
        value: function () {

            return (compare(null, this.parameters[0], this.parameters[1]) < 0);

        }

    },{



    });

module.exports = FSmallerThan;
},{"./../../Function.js":5,"./../../helpers/compare":81,"./../../types/Boolean.js":93,"lodash":103}],43:[function(require,module,exports){
var Function = require('./../../Function.js');
var compare = require('./../../helpers/compare');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var FSmallerThanEqual = Function.extend(

    {

        /**
         * @class Functions.Comparable.SmallerThanEqual
         * @extends Function
         *
         * Function that checks if a value is smaller than or equal to another one. It only applies
         * to types that implement a static "compare" method or to primitives.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ diedUpTo348BC : died.ste(-348) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([{ diedUpTo348BC : new affinity.SmallerThanEqual(died, -348) }]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+--------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | diedUpTo348BC : TBoolean |
         *      // +================+=================+=================+==========================+
         *      // | Aristotle      | -384            | -322            | true                     |
         *      // +----------------+-----------------+-----------------+--------------------------+
         *      // | Plato          | -428            | -348            | true                     |
         *      // +----------------+-----------------+-----------------+--------------------------+
         *      // | Socrates       | -470            | -399            | false                    |
         *      // +----------------+-----------------+-----------------+--------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.ste(-348));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(new affinity.SmallerThanEqual(died, -348));
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *      // | Plato          | -428            | -348            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.name = 'SmallerThanEqual';

            this.type(TBoolean);

        },

        /**
         * Gets the result of the function
         * @returns {boolean}
         */
        value: function () {

            return (compare(null, this.parameters[0], this.parameters[1]) <= 0);

        }

    },{



    });

module.exports = FSmallerThanEqual;
},{"./../../Function.js":5,"./../../helpers/compare":81,"./../../types/Boolean.js":93,"lodash":103}],44:[function(require,module,exports){
var Function = require('./../../Function.js');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var And = Function.extend(
    {

        /**
         * @class Functions.Connective.And
         * @extends Function
         *
         * Function that checks if its arguments all return a true boolean.
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ "322to384BC" : died.eq(-322).and(born.eq(-384)) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([
         *          { diedIn322BC : new affinity.And(new affinity.Equal(died, -322), new affinity.Equal(born, -384)) }
         *      ]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | 322to384BC : TBoolean  |
         *      // +================+=================+=================+========================+
         *      // | Aristotle      | -384            | -322            | true                   |
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | Plato          | -428            | -348            | false                  |
         *      // +----------------+-----------------+-----------------+------------------------+
         *      // | Socrates       | -470            | -399            | false                  |
         *      // +----------------+-----------------+-----------------+------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(died.eq(-322).and(born.eq(-384)));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(
         *          new affinity.And(new affinity.Equal(died, -322), new affinity.Equal(born, -384))
         *      );
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TBoolean);

            this.name = 'And';

        },

        /**
         * Gets the function return value
         * @returns {boolean}
         */
        value: function () {

            return _.every(this.parameters, function(parameter){

                if(!_.isBoolean(parameter)){
                    parameter = parameter.value();
                }
                return parameter;

            });

        }

    },{



    });

module.exports = And;
},{"./../../Function.js":5,"./../../types/Boolean.js":93,"lodash":103}],45:[function(require,module,exports){
var Function = require('./../../Function.js');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var Not = Function.extend(

    {

        /**
         * @class Functions.Connective.Not
         * @extends Function
         *
         * Function that checks if its argument returns false
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ "notBornIn384BC" : born.not().eq(-384) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([
         *          { diedIn322BC : new affinity.Not(new affinity.Equal(born, -322)) }
         *      ]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | notBornIn384BC : TBoolean  |
         *      // +================+=================+=================+============================+
         *      // | Aristotle      | -384            | -322            | false                      |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Plato          | -428            | -348            | true                       |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Socrates       | -470            | -399            | true                       |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(born.not().eq(-384));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(
         *          new affinity.Not(new affinity.Equal(born, -322))
         *      );
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Plato          | -428            | -348            |
         *      // +----------------+-----------------+-----------------+
         *      // | Socrates       | -470            | -399            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.type(TBoolean);

            this.name = 'Not';

        },

        /**
         * Gets the function return value
         * @returns {boolean}
         */
        value: function () {

            if(!_.isBoolean(this.parameters[0])){
                return !this.parameters[0].value();
            }

            return !this.parameters[0];

        }

    },{



    });

module.exports = Not;
},{"./../../Function.js":5,"./../../types/Boolean.js":93,"lodash":103}],46:[function(require,module,exports){
var Function = require('./../../Function.js');
var TBoolean = require('./../../types/Boolean.js');
var _ = require('lodash');

var Or = Function.extend(
    {

        /**
         * @class Functions.Connective.Or
         * @extends Function
         *
         * Function that checks if one of its arguments return true
         *
         * When used with an Extension operator :
         *
         *      var philosophers = new affinity.Relation([
         *              {name: { type: affinity.String}},
         *              {born: { type: affinity.Integer}},
         *              {died: { type: affinity.Integer}}
         *          ],[
         *              ['Aristotle', -384, -322],
         *              ['Plato',     -428, -348],
         *              ['Socrates',  -470, -399]
         *          ]);
         *
         *      name = philosophers.get('name');
         *      born = philosophers.get('born');
         *      died = philosophers.get('died');
         *
         *      var extended = philosophers.extend([{ "born384or428BC" : born.eq(-384).or(born.eq(-428)) }]);
         *
         *      // or equivalent :
         *
         *      var extended = philosophers.extend([
         *          { diedIn322BC : new affinity.Or(new affinity.Equal(born, -384), new affinity.Equal(born, -428)) }
         *      ]);
         *
         *      extended.print();
         *
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | name : TString | born : TInteger | died : TInteger | born384or428BC : TBoolean  |
         *      // +================+=================+=================+============================+
         *      // | Aristotle      | -384            | -322            | true                       |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Plato          | -428            | -348            | true                       |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *      // | Socrates       | -470            | -399            | false                      |
         *      // +----------------+-----------------+-----------------+----------------------------+
         *
         *
         * When used with a Restriction operator :
         *
         *      var restricted = philosophers.restrict(born.eq(-384).or(born.eq(-428)));
         *
         *      // or equivalent :
         *
         *      var restricted = philosophers.restrict(
         *          new affinity.Or(new affinity.Equal(born, -384), new affinity.Equal(born, -428))
         *      );
         *
         *      restricted.print();
         *
         *      // +----------------+-----------------+-----------------+
         *      // | name : TString | born : TInteger | died : TInteger |
         *      // +================+=================+=================+
         *      // | Aristotle      | -384            | -322            |
         *      // +----------------+-----------------+-----------------+
         *      // | Plato          | -428            | -348            |
         *      // +----------------+-----------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, arguments);

            this.type(TBoolean);

            this.name = 'Or';

        },

        value: function () {


            return _.any(this.parameters, function(parameter){

                if(!_.isBoolean(parameter)){
                    parameter = parameter.value();
                }
                return parameter;

            });

        }

    },{


    });

module.exports = Or;
},{"./../../Function.js":5,"./../../types/Boolean.js":93,"lodash":103}],47:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FDayOfMonth = Function.extend(
    {

        /**
         * @class Functions.Date.DayOfMonth
         * @extends Function
         *
         * Function that extracts a date's day of the month
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2014, 1, 07), 'Sochi'],
         *          [new Date(2014, 0, 02), 'Chocolate rush'],
         *          [new Date(2014, 3, 15), 'Millionth coffee drank']
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.dayOfMonth()" : date.dayOfMonth() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.dayOfMonth()" : new affinity.DayOfMonth(date) } ]);
         *
         *      extended.print();
         *
         *      +-------------------------------------------+--------------------------+-------------------------------+
         *      | date : Date                               | name : String            | date.dayOfMonth() : Integer   |
         *      +===========================================+==========================+===============================+
         *      | Fri Feb 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 7                             |
         *      +-------------------------------------------+--------------------------+-------------------------------+
         *      | Thu Jan 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 2                             |
         *      +-------------------------------------------+--------------------------+-------------------------------+
         *      | Tue Apr 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 15                            |
         *      +-------------------------------------------+--------------------------+-------------------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'DayOfMonth';

        },

        /**
         * Gets the function's return value
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0]).getDate();

        }

    },{


    });

module.exports = FDayOfMonth;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],48:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FDayOfWeek = Function.extend(
    {

        /**
         * @class Functions.Date.DayOfWeek
         * @extends Function
         *
         * Function that extracts a date's day of the week
         *
         * Sunday is 0, Saturday is 6
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2014, 1, 07), 'Sochi'],
         *          [new Date(2014, 0, 02), 'Chocolate rush'],
         *          [new Date(2014, 3, 15), 'Millionth coffee drank']
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.dayOfWeek()" : date.dayOfWeek() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.dayOfWeek()" : new affinity.DayOfWeek(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | date : Date                               | name : String            | date.dayOfWeek() : Integer   |
         *      // +===========================================+==========================+==============================+
         *      // | Fri Feb 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 5                            |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | Thu Jan 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 4                            |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | Tue Apr 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 2                            |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'DayOfWeek';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0]).getDay();

        }

    },{


    });

module.exports = FDayOfWeek;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],49:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FDayOfYear = Function.extend(
    {

        /**
         * @class Functions.Date.DayOfYear
         * @extends Function
         *
         * Function that extracts a date's day of the year
         *
         * January 1st is 0
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2014, 1, 07), 'Sochi'],
         *          [new Date(2014, 0, 02), 'Chocolate rush'],
         *          [new Date(2014, 3, 15), 'Millionth coffee drank']
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.dayOfYear()" : date.dayOfYear() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.dayOfYear()" : new affinity.DayOfYear(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | date : Date                               | name : String            | date.dayOfYear() : Integer   |
         *      // +===========================================+==========================+==============================+
         *      // | Fri Feb 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 37                           |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | Thu Jan 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 1                            |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *      // | Tue Apr 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 104                          |
         *      // +-------------------------------------------+--------------------------+------------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'DayOfYear';

        },

        value: function () {

            var date = value(this.parameters[0]);

            var begin = new Date(date.getFullYear(),0,1);

            return Math.ceil((date - begin) / 86400000);

        }

    },{


    });

module.exports = FDayOfYear;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],50:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FHours = Function.extend(
    {

        /**
         * @class Functions.Date.Hours
         * @extends Function
         *
         * Function that extracts a date's hours component as an integer
         *
         * Midnight is 0
         *
         * With extend operation :
         *
         *      var wokeUp = new Date();
         *      wokeUp.setHours(8);
         *
         *      var breakfast = new Date();
         *      breakfast.setHours(9)
         *
         *      var dinner = new Date();
         *      dinner.setHours(18);
         *
         *      var events = new affinity.Relation([
         *          {time : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [wokeUp, 'Woke Up'],
         *          [breakfast, 'Breakfast'],
         *          [dinner, 'Dinner']
         *      ])
         *
         *      var time = events.get('time')
         *
         *      var extended = events.extend([ { "time.hours()" : time.hours() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "time.hours()" : new affinity.Hours(time) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+-----------------+--------------------------+
         *      // | time : Date                               | name : String   | time.hours() : Integer   |
         *      // +===========================================+=================+==========================+
         *      // | Sun Jun 29 2014 08:43:39 GMT-0400 (EDT)   | Woke Up         | 8                        |
         *      // +-------------------------------------------+-----------------+--------------------------+
         *      // | Sun Jun 29 2014 09:43:39 GMT-0400 (EDT)   | Breakfast       | 9                        |
         *      // +-------------------------------------------+-----------------+--------------------------+
         *      // | Sun Jun 29 2014 18:43:39 GMT-0400 (EDT)   | Dinner          | 18                       |
         *      // +-------------------------------------------+-----------------+--------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Hours';

        },

        /**
         * Gets the function's return value
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0]).getHours();

        }

    },{


    });

module.exports = FHours;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],51:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FMilliseconds = Function.extend(
    {

        /**
         * @class Functions.Date.Milliseconds
         * @extends Function
         *
         * Function that extracts a date's milliseconds component
         *
         * Midnight is 0
         *
         * With extend operation :
         *
         *      var date1 = new Date();
         *      date1.setMilliseconds(100);
         *
         *
         *      var date2 = new Date();
         *      date2.setMilliseconds(200);
         *
         *      var date3 = new Date();
         *      date3.setMilliseocnds(300);
         *
         *      var events = new affinity.Relation([
         *          {time : {type : affinity.Date}}
         *      ],[
         *         [date1], [date2], [date3]
         *      ])
         *
         *      var time = events.get('time')
         *
         *      var extended = events.extend([ { "time.milliseconds()" : time.milliseconds() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "time.milliseconds()" : new affinity.Milliseconds(time) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+---------------------------------+
         *      // | time : Date                               | time.milliseconds() : Integer   |
         *      // +===========================================+=================================+
         *      // | Sun Jun 29 2014 08:44:17 GMT-0400 (EDT)   | 100                             |
         *      // +-------------------------------------------+---------------------------------+
         *      // | Sun Jun 29 2014 08:44:17 GMT-0400 (EDT)   | 200                             |
         *      // +-------------------------------------------+---------------------------------+
         *      // | Sun Jun 29 2014 08:44:17 GMT-0400 (EDT)   | 557                             |
         *      // +-------------------------------------------+---------------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Milliseconds';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0]).getMilliseconds();

        }

    },{


    });

module.exports = FMilliseconds;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],52:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FMinutes = Function.extend(
    {

        /**
         * @class Functions.Date.Minutes
         * @extends Function
         *
         * Function that extracts a date's minutes component as an integer
         *
         *
         * With extend operation :
         *
         *      var quarterToFive = new Date();
         *      quarterToFive.setHours(4);
         *      quarterToFive.setMinutes(45);
         *
         *      var five = new Date();
         *      five.setHours(5)
         *      five.setMinutes(0);
         *
         *      var sixThirty = new Date();
         *      sixThirty.setHours(6);
         *      sixThirty.setMinutes(30);
         *
         *
         *      var events = new affinity.Relation([
         *          {time : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [quarterToFive, 'Quarter to Five'],
         *          [five, 'Five'],
         *          [sixThirty, 'Six Thirty']
         *      ])
         *
         *      var time = events.get('time')
         *
         *      var extended = events.extend([ { "time.minutes()" : time.minutes() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "time.minutes()" : new affinity.Minutes(time) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+-------------------+----------------------------+
         *      // | time : Date                               | name : String     | time.minutes() : Integer   |
         *      // +===========================================+===================+============================+
         *      // | Sun Jun 29 2014 04:45:49 GMT-0400 (EDT)   | Quarter to Five   | 45                         |
         *      // +-------------------------------------------+-------------------+----------------------------+
         *      // | Sun Jun 29 2014 05:00:49 GMT-0400 (EDT)   | Five              | 0                          |
         *      // +-------------------------------------------+-------------------+----------------------------+
         *      // | Sun Jun 29 2014 06:30:49 GMT-0400 (EDT)   | Six Thirty        | 30                         |
         *      // +-------------------------------------------+-------------------+----------------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Minutes';

        },

        value: function () {

            return value(this.parameters[0]).getMinutes();

        }

    },{


    });

module.exports = FMinutes;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],53:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var FMonth = Function.extend(
    {

        /**
         * @class Functions.Date.Month
         * @extends Function
         *
         * Function that extracts a date's month number
         *
         * January is 0
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2014, 1, 07), 'Sochi'],
         *          [new Date(2014, 0, 02), 'Chocolate rush'],
         *          [new Date(2014, 3, 15), 'Millionth coffee drank']
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.month()" : date.month() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.month()" : new affinity.Month(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+--------------------------+--------------------------+
         *      // | date : Date                               | name : String            | date.month() : Integer   |
         *      // +===========================================+==========================+==========================+
         *      // | Fri Feb 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 1                        |
         *      // +-------------------------------------------+--------------------------+--------------------------+
         *      // | Thu Jan 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 0                        |
         *      // +-------------------------------------------+--------------------------+--------------------------+
         *      // | Tue Apr 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 3                        |
         *      // +-------------------------------------------+--------------------------+--------------------------+
         *      //
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Month';

        },

        value: function () {

            return value(this.parameters[0]).getMonth();

        }

    },{


    });

module.exports = FMonth;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],54:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var Seconds = Function.extend(
    {

        /**
         * @class Functions.Date.Seconds
         * @extends Function
         *
         * Function that extracts a date's second number
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(), 'Now'],
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.seconds()" : date.seconds() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.seconds()" : new affinity.Seconds(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+-----------------+----------------------------+
         *      // | date : Date                               | name : String   | date.seconds() : Integer   |
         *      // +===========================================+=================+============================+
         *      // | Sun Jun 29 2014 08:51:05 GMT-0400 (EDT)   | Now             | 5                          |
         *      // +-------------------------------------------+-----------------+----------------------------+
         *      //
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Seconds';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0]).getSeconds();

        }

    },{


    });

module.exports = Seconds;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],55:[function(require,module,exports){
var Function = require('./../../Function.js');
var Integer = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var Timestamp = Function.extend(

    {

        /**
         * @class Functions.Date.Timestamp
         * @extends Function
         *
         * Function that extracts a date's timestamp
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(), 'Now'],
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.timestamp()" : date.ts() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.timestamp()" : new affinity.Timestamp(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+-----------------+------------------------------+
         *      // | date : Date                               | name : String   | date.timestamp() : Integer   |
         *      // +===========================================+=================+==============================+
         *      // | Sun Jun 29 2014 10:02:34 GMT-0400 (EDT)   | Now             | 1404050554805                |
         *      // +-------------------------------------------+-----------------+------------------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(Integer);

            this.name = 'Timestamp';

        },

        value: function () {

            var param = value(this.parameters[0]);

            return value(this.parameters[0]).getTime();

        }

    },{


    });

module.exports = Timestamp;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],56:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var WeekOfYear = Function.extend(
    {

        /**
         * @class Functions.Date.WeekOfYear
         * @extends Function
         *
         * Function that extracts a date's week number (0-51)
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2014, 02, 07), 'Sochi'],
         *          [new Date(2014, 01, 02), 'Chocolate rush'],
         *          [new Date(2014, 04, 15), 'Millionth coffee drank']
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.weekOfYear()" : date.weekOfYear() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.weekOfYear()" : new affinity.weekOfYear(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+--------------------------+-------------------------------+
         *      // | date : Date                               | name : String            | date.weekOfYear() : Integer   |
         *      // +===========================================+==========================+===============================+
         *      // | Fri Mar 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 10                            |
         *      // +-------------------------------------------+--------------------------+-------------------------------+
         *      // | Sun Feb 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 5                             |
         *      // +-------------------------------------------+--------------------------+-------------------------------+
         *      // | Thu May 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 20                            |
         *      // +-------------------------------------------+--------------------------+-------------------------------+
         *      //
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'WeekOfYear';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            var d = new Date(+value(this.parameters[0]));
            d.setHours(0,0,0);
            d.setDate(d.getDate()+4-(d.getDay()||7));
            return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);

        }

    },{


    });

module.exports = WeekOfYear;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],57:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var Year = Function.extend(
    {

        /**
         * @class Functions.Date.Year
         * @extends Function
         *
         *
         * Function that extracts a date's full year number
         *
         * With extend operation :
         *
         *      var events = new affinity.Relation([
         *          {date : {type : affinity.Date}},
         *          {name : {type : affinity.String}}
         *      ],[
         *          [new Date(2013, 01, 02)],
         *          [new Date(2011, 06, 30)],
         *          [new Date(2010, 04, 15)]
         *      ])
         *
         *      var date = events.get('date')
         *
         *      var extended = events.extend([ { "date.year()" : date.year() } ]);
         *
         *      // or equivalent
         *
         *      var extended = events.extend([ { "date.year()" : new affinity.Year(date) } ]);
         *
         *      extended.print();
         *
         *      // +-------------------------------------------+--------------------------+-------------------------+
         *      // | date : Date                               | name : String            | date.year() : Integer   |
         *      // +===========================================+==========================+=========================+
         *      // | Fri Mar 07 2014 00:00:00 GMT-0500 (EST)   | Sochi                    | 2014                    |
         *      // +-------------------------------------------+--------------------------+-------------------------+
         *      // | Sun Feb 02 2014 00:00:00 GMT-0500 (EST)   | Chocolate rush           | 2014                    |
         *      // +-------------------------------------------+--------------------------+-------------------------+
         *      // | Thu May 15 2014 00:00:00 GMT-0400 (EDT)   | Millionth coffee drank   | 2014                    |
         *      // +-------------------------------------------+--------------------------+-------------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TInteger);

            this.name = 'Year';

        },

        value: function () {

            return value(this.parameters[0]).getFullYear();

        }

    },{


    });

module.exports = Year;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],58:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Absolute = Function.extend(
    {

        /**
         * @class Functions.Numeric.Absolute
         * @extends Function
         *
         * Function that extracts the Absolute value of a Number
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [-10], [-5], [0], [5], [10]]
         *      ])
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "A.abs()" : A.abs() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "A.abs()" : new affinity.Absolute(A) }]);
         *
         *      extended.print();
         *
         *      //+---------------+---------------------+
         *      //| A : Integer   | A.abs() : Integer   |
         *      //+===============+=====================+
         *      //| -10           | 10                  |
         *      //+---------------+---------------------+
         *      //| -5            | 5                   |
         *      //+---------------+---------------------+
         *      //| 0             | 0                   |
         *      //+---------------+---------------------+
         *      //| 5             | 5                   |
         *      //+---------------+---------------------+
         *      //| 10            | 10                  |
         *      //+---------------+---------------------+
         *
         */

        /**
         * @param {Number|Function|Attribute} param The number to absolucize
         *
         * Create a new Absolute function
         */
        constructor: function (param) {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Absolute';

        },

        /**
         * @returns {Number} The result
         *
         * Gets the function result
         */
        value: function () {

            return Math.abs(value(this.parameters[0]));

        }

    });

Absolute.mixin(require('./../../mixins/numeric'));
Absolute.mixin(require('./../../mixins/comparable'));
Absolute.mixin(require('./../../mixins/size-comparable'));

module.exports = Absolute;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],59:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FCeil = Function.extend(
    {

        /**
         * @class Functions.Numeric.Ceil
         * @extends Function
         *
         * Function that rounds a number upwards
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [1.01], [-2.85], [3], [3.12], [10.2]]
         *      ])
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "A.ceil()" : A.ceil() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "A.ceil()" : new affinity.Ceil(A) }]);
         *
         *      extended.print();
         *
         *      //+---------------+----------------------+
         *      //| A : Integer   | A.ceil() : Integer   |
         *      //+===============+======================+
         *      //| 1.01          | 2                    |
         *      //+---------------+----------------------+
         *      //| -2.85         | -2                   |
         *      //+---------------+----------------------+
         *      //| 3             | 3                    |
         *      //+---------------+----------------------+
         *      //| 3.12          | 4                    |
         *      //+---------------+----------------------+
         *      //| 10.2          | 11                   |
         *      //+---------------+----------------------+
         *
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Ceil';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return Math.ceil(value(this.parameters[0]));

        }

    });

FCeil.mixin(require('./../../mixins/numeric'));
FCeil.mixin(require('./../../mixins/comparable'));
FCeil.mixin(require('./../../mixins/size-comparable'));

module.exports = FCeil;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],60:[function(require,module,exports){
var Function = require('./../../Function.js');
var Numeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Cosine = Function.extend(
    {

        /**
         * @class Functions.Numeric.Cosine
         * @extends Function
         *
         * Function that returns the cosine of a number
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [0], [Math.PI/2], [Math.PI], [3*Math.PI/2], [2*Math.PI]
         *      ])
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "cos(A)" : A.cos() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "cos(A)" : new affinity.Cosine(A) }]);
         *
         *      extended.print();
         *
         *      // The following result shows a bug, but it's not affinity's fault.
         *      // Due to a bug in V8
         *      // (see this http://stackoverflow.com/questions/24455775/why-does-node-not-evaluate-math-tanmath-pi-2-to-infinity-but-chrome-v8-does)
         *      // Math.tan(Math.PI/2) won't evaluate to Infinity.
         *      // Math.tan(Math.PI) won't evaluate to 0.
         *      // And so on. This is due to Math.cos(Math.PI/2) not evaluating to 0.
         *
         *      // This will be fixed in node v0.11. as I tested the v0.11.14-pre version.
         *
         *      //+---------------+--------------------------+
         *      //| A : Integer   | cos(A) : Numeric         |
         *      //+===============+==========================+
         *      //| 0             | 1                        |
         *      //+---------------+--------------------------+
         *      //| PI/2          | 6.123031769111886e-17    |
         *      //+---------------+--------------------------+
         *      //| π             | -1                       |
         *      //+---------------+--------------------------+
         *      //| 3π/2          | -1.836909530733566e-16   |
         *      //+---------------+--------------------------+
         *      //| 2π            | 1                        |
         *      //+---------------+--------------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(Numeric);

            this.name = 'Cos';

        },

        /**
         * Gets the function result
         * @returns {Number}
         */
        value: function () {

            return Math.cos(value(this.parameters[0]));

        }

    });

Cosine.mixin(require('./../../mixins/numeric'));
Cosine.mixin(require('./../../mixins/comparable'));
Cosine.mixin(require('./../../mixins/size-comparable'));

module.exports = Cosine;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],61:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FDivision = Function.extend(
    {

        /**
         * @class Functions.Numeric.Division
         * @extends Function
         *
         * Function that returns the result of a division between two numbers
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [-2], [-1], [0], [1], [2]]
         *      ])
         *
         *      var relation2 = relation.extend([{B : relation.get('A')}]);
         *
         *      var product = relation2.project(['A']).product(relation2.get('B'));
         *
         *      var A = product.get('A');
         *      var B = product.get('B');
         *
         *
         *      var extended = product.extend([{"A / B" : A.div(B)}]);
         *
         *      // or equivalent
         *
         *      new affinity.Extend(product, [{ "A / B" : new affinity.Division(A, B) }])
         *
         *
         *      extended.print();
         *
         *
         *      // (Standard behaviour of JavaScript)
         *      // +---------------+---------------+-----------------+
         *      // | A : Integer   | B : Integer   | A / B : Numeric |
         *      // +===============+===============+=================+
         *      // | -2            | -2            | 1               |
         *      // +---------------+---------------+-----------------+
         *      // | -2            | -1            | 2               |
         *      // +---------------+---------------+-----------------+
         *      // | -2            | 0             | -Infinity       |
         *      // +---------------+---------------+-----------------+
         *      // | -2            | 1             | -2              |
         *      // +---------------+---------------+-----------------+
         *      // | -2            | 2             | -1              |
         *      // +---------------+---------------+-----------------+
         *      // | -1            | -2            | 0.5             |
         *      // +---------------+---------------+-----------------+
         *      // | -1            | -1            | 1               |
         *      // +---------------+---------------+-----------------+
         *      // | -1            | 0             | -Infinity       |
         *      // +---------------+---------------+-----------------+
         *      // | -1            | 1             | -1              |
         *      // +---------------+---------------+-----------------+
         *      // | -1            | 2             | -0.5            |
         *      // +---------------+---------------+-----------------+
         *      // | 0             | -2            | 0               |
         *      // +---------------+---------------+-----------------+
         *      // | 0             | -1            | 0               |
         *      // +---------------+---------------+-----------------+
         *      // | 0             | 0             | NaN             |
         *      // +---------------+---------------+-----------------+
         *      // | 0             | 1             | 0               |
         *      // +---------------+---------------+-----------------+
         *      // | 0             | 2             | 0               |
         *      // +---------------+---------------+-----------------+
         *      // | 1             | -2            | -0.5            |
         *      // +---------------+---------------+-----------------+
         *      // | 1             | -1            | -1              |
         *      // +---------------+---------------+-----------------+
         *      // | 1             | 0             | Infinity        |
         *      // +---------------+---------------+-----------------+
         *      // | 1             | 1             | 1               |
         *      // +---------------+---------------+-----------------+
         *      // | 1             | 2             | 0.5             |
         *      // +---------------+---------------+-----------------+
         *      // | 2             | -2            | -1              |
         *      // +---------------+---------------+-----------------+
         *      // | 2             | -1            | -2              |
         *      // +---------------+---------------+-----------------+
         *      // | 2             | 0             | Infinity        |
         *      // +---------------+---------------+-----------------+
         *      // | 2             | 1             | 2               |
         *      // +---------------+---------------+-----------------+
         *      // | 2             | 2             | 1               |
         *      // +---------------+---------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Division';

        },

        /**
         * Gets the function result
         * @returns {number}
         */
        value: function () {

            return value(this.parameters[0])/value(this.parameters[1]);

        }

    });

FDivision.mixin(require('./../../mixins/numeric'));
FDivision.mixin(require('./../../mixins/comparable'));
FDivision.mixin(require('./../../mixins/size-comparable'));

module.exports = FDivision;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],62:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FExp = Function.extend(
    {

        /**
         * @class Functions.Numeric.Exponential
         * @extends Function
         *
         * Returns the exponential of a number (e^x)
         *
         * Example :
         *
         *     var relation = new affinity.Relation([{ A : {type : affinity.Integer} }],[[-2], [-1],[0],[1],[2]]);
         *
         *     var extended = relation.extend([{ "A.exp()" : relation.get('A').exp()}])
         *
         *     or equivalent
         *
         *     var extended = relation.extend([{ "A.exp()" : new affinity.Exp(A)}]);
         *
         *     extended.print();
         *
         *     // +---------------+-----------------------+
         *     // | A : Integer   | A.exp() : Numeric     |
         *     // +===============+=======================+
         *     // | -2            | 0.1353352832366127    |
         *     // +---------------+-----------------------+
         *     // | -1            | 0.36787944117144233   |
         *     // +---------------+-----------------------+
         *     // | 0             | 1                     |
         *     // +---------------+-----------------------+
         *     // | 1             | 2.718281828459045     |
         *     // +---------------+-----------------------+
         *     // | 2             | 7.38905609893065      |
         *     // +---------------+-----------------------+
         *
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Exponent';

        },

        /**
         * Gets the function result
         * @returns {number}
         */
        value: function () {

            return Math.exp(value(this.parameters[0]));

        }

    });

FExp.mixin(require('./../../mixins/numeric'));
FExp.mixin(require('./../../mixins/comparable'));
FExp.mixin(require('./../../mixins/size-comparable'));

module.exports = FExp;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],63:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Floor = Function.extend(
    {

        /**
         * @class Functions.Numeric.Floor
         * @extends Function
         *
         * Function that rounds a number downwards
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [1.01], [-2.85], [3], [3.12], [10.2]]
         *      ])
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "A.floor()" : A.Floor() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "A.floor()" : new affinity.floor(A) }]);
         *
         *      extended.print();
         *
         *      //+---------------+-----------------------+
         *      //| A : Integer   | A.floor() : Integer   |
         *      //+===============+=======================+
         *      //| 1.01          | 1                     |
         *      //+---------------+-----------------------+
         *      //| -2.85         | -3                    |
         *      //+---------------+-----------------------+
         *      //| 3             | 3                     |
         *      //+---------------+-----------------------+
         *      //| 3.12          | 3                     |
         *      //+---------------+-----------------------+
         *      //| 10.2          | 10                    |
         *      //+---------------+-----------------------+
         *
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Floor';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return Math.floor(value(this.parameters[0]));

        }

    });

Floor.mixin(require('./../../mixins/numeric'));
Floor.mixin(require('./../../mixins/comparable'));
Floor.mixin(require('./../../mixins/size-comparable'));

module.exports = Floor;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],64:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');
var type = require('./../../helpers/type');

var FMinus = Function.extend(
    {

        /**
         * @class Functions.Numeric.Minus
         * @extends Function
         *
         * Subtracts two numbers
         *
         * Example :
         *
         *     var relation = new affinity.Relation([
         *              {A : {type : affinity.Integer}},
         *              {B : {type : affinity.Integer}}
         *          ],[
         *              [1, 2],
         *              [0, 0],
         *              [10, 1]
         *          ]);
         *
         *     var A = relation.get('A');
         *     var B = relation.get('B');
         *
         *     var extended = relation.extend([{ "A - B" : A.minus(B)}])
         *
         *     // or equivalent
         *
         *     var extended = relation.extend([{"A - B" : new affinity.Minus(A, B)}])
         *
         *     extended.print();
         *
         *     // +---------------+---------------+-------------------+
         *     // | A : Integer   | B : Integer   | A - B : Integer   |
         *     // +===============+===============+===================+
         *     // | 1             | 2             | -1                |
         *     // +---------------+---------------+-------------------+
         *     // | 0             | 0             | 0                 |
         *     // +---------------+---------------+-------------------+
         *     // | 10            | 1             | 9                 |
         *     // +---------------+---------------+-------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(type(this.parameters[0]));

            this.name = 'Minus';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return this.type().coerce(value(this.parameters[0])-value(this.parameters[1]));

        }

    });

FMinus.mixin(require('./../../mixins/numeric'));
FMinus.mixin(require('./../../mixins/comparable'));
FMinus.mixin(require('./../../mixins/size-comparable'));

module.exports = FMinus;
},{"./../../Function.js":5,"./../../helpers/type":84,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],65:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FModulo = Function.extend(
    {

        /**
         * @class Functions.Numeric.Modulo
         * @extends Function
         *
         * Gets the modulo of two numbers
         *
         * Example :
         *
         *     var relation = new affinity.Relation([
         *              {A : {type : affinity.Integer}},
         *              {B : {type : affinity.Integer}}
         *          ],[
         *              [1, 2],
         *              [0, 0],
         *              [10, 1],
         *              [10, 2]
         *          ]);
         *
         *     var A = relation.get('A');
         *     var B = relation.get('B');
         *
         *     var extended = relation.extend([{"A % B" : A.mod(B)}]);
         *
         *     // or equivalent
         *
         *     var extended = relation.extend([{"A % B" : new affinity.Modulo(A, B)}]);
         *
         *     extended.print();
         *
         *     // +---------------+---------------+--------------------+
         *     // | A : Integer   | B : Integer   | A % B : Numeric    |
         *     // +===============+===============+====================+
         *     // | 1             | 2             | 1                  |
         *     // +---------------+---------------+--------------------+
         *     // | 0             | 0             | NaN                |
         *     // +---------------+---------------+--------------------+
         *     // | 10            | 1             | 0                  |
         *     // +---------------+---------------+--------------------+
         *     // | 10            | 2             | 0                  |
         *     // +---------------+---------------+--------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Modulo';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value : function () {

            return value(this.parameters[0])%value(this.parameters[1]);

        }

    });

FModulo.mixin(require('./../../mixins/numeric'));
FModulo.mixin(require('./../../mixins/comparable'));
FModulo.mixin(require('./../../mixins/size-comparable'));

module.exports = FModulo;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],66:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FMultiplication = Function.extend(
    {

        /**
         * @class Functions.Numeric.Multiplication
         * @extends Function
         *
         * Multiplies two numbers
         *
         * example :
         *
         *     var relation = new affinity.Relation([
         *          { A : { type : affinity.Integer}},
         *          { B : { type : affinity.Integer}},
         *     ],[
         *          [1, -1],
         *          [-1, 1],
         *          [0, 10],
         *          [1, 10],
         *          [2, -10],
         *     ])
         *
         *     var A = relation.get('A')
         *     var B = relation.get('B')
         *
         *     var extended = relation.extend([{ "A x B" : A.times(B)}])
         *
         *     // or
         *
         *     var extended = relation.extend([{ "A x B" : new affinity.Multiplication(A, B)}])
         *
         *     extended.print()
         *
         *     // +---------------+---------------+-----------------+
         *     // | A : Integer   | B : Integer   | A x B : Numeric |
         *     // +===============+===============+=================+
         *     // | 1             | -1            | -1              |
         *     // +---------------+---------------+-----------------+
         *     // | -1            | 1             | -1              |
         *     // +---------------+---------------+-----------------+
         *     // | 0             | 10            | 0               |
         *     // +---------------+---------------+-----------------+
         *     // | 1             | 10            | 10              |
         *     // +---------------+---------------+-----------------+
         *     // | 2             | -10           | -20             |
         *     // +---------------+---------------+-----------------+
         *
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Multiplication';

        },

        value : function () {

            return value(this.parameters[0])*value(this.parameters[1]);

        }

    });

FMultiplication.mixin(require('./../../mixins/numeric'));
FMultiplication.mixin(require('./../../mixins/comparable'));
FMultiplication.mixin(require('./../../mixins/size-comparable'));

module.exports = FMultiplication;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],67:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');
var type = require('./../../helpers/type');

var Plus = Function.extend(
    {

        /**
         * @class Functions.Numeric.Plus
         * @extends Function
         *
         * Adds two numbers
         *
         * example :
         *
         *     var relation = new affinity.Relation([
         *          { A : { type : affinity.Integer}},
         *          { B : { type : affinity.Integer}},
         *     ],[
         *          [1, -1],
         *          [-1, 1],
         *          [0, 10],
         *          [1, 10],
         *          [2, -10],
         *     ])
         *
         *     var A = relation.get('A')
         *     var B = relation.get('B')
         *
         *     var extended = relation.extend([{ "A + B" : A.plus(B)}])
         *
         *     // or
         *
         *     var extended = relation.extend([{ "A + B" : new affinity.Plus(A, B)}])
         *
         *     extended.print()
         *
         *     // +---------------+---------------+-----------------+
         *     // | A : Integer   | B : Integer   | A + B : Numeric |
         *     // +===============+===============+=================+
         *     // | 1             | -1            | 0               |
         *     // +---------------+---------------+-----------------+
         *     // | -1            | 1             | 0               |
         *     // +---------------+---------------+-----------------+
         *     // | 0             | 10            | 10              |
         *     // +---------------+---------------+-----------------+
         *     // | 1             | 10            | 11              |
         *     // +---------------+---------------+-----------------+
         *     // | 2             | -10           | -18             |
         *     // +---------------+---------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(this.parameters[0]);

            this.name = 'Plus';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return this.type().coerce(value(this.parameters[0])+value(this.parameters[1]));

        }

    });

Plus.mixin(require('./../../mixins/numeric'));
Plus.mixin(require('./../../mixins/comparable'));
Plus.mixin(require('./../../mixins/size-comparable'));

module.exports = Plus;
},{"./../../Function.js":5,"./../../helpers/type":84,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],68:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FPow = Function.extend(
    {

        /**
         * @class Functions.Numeric.Power
         * @extends Function
         *
         * Returns a number to the power of another number
         *
         * example :
         *
         *     var relation = new affinity.Relation([
         *          { A : { type : affinity.Integer}},
         *          { B : { type : affinity.Integer}},
         *     ],[
         *          [1, -1],
         *          [-1, 1],
         *          [0, 10],
         *          [1, 10],
         *          [2, -10],
         *     ])
         *
         *     var A = relation.get('A')
         *     var B = relation.get('B')
         *
         *     var extended = relation.extend([{ "A ^ B" : A.pow(B)}])
         *
         *     // or
         *
         *     var extended = relation.extend([{ "A ^ B" : new affinity.Pow(A, B)}])
         *
         *     extended.print()
         *
         *     // +---------------+---------------+-----------------+
         *     // | A : Integer   | B : Integer   | A ^ B : Numeric |
         *     // +===============+===============+=================+
         *     // | 1             | -1            | 1               |
         *     // +---------------+---------------+-----------------+
         *     // | -1            | 1             | -1              |
         *     // +---------------+---------------+-----------------+
         *     // | 0             | 10            | 0               |
         *     // +---------------+---------------+-----------------+
         *     // | 1             | 10            | 1               |
         *     // +---------------+---------------+-----------------+
         *     // | 2             | -10           | 0.0009765625    |
         *     // +---------------+---------------+-----------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Power';

        },

        /**
         * Gets the function's return value;
         * @returns {number}
         */
        value: function () {

            return Math.pow(value(this.parameters[0]),value(this.parameters[1]));

        }

    });

FPow.mixin(require('./../../mixins/numeric'));
FPow.mixin(require('./../../mixins/comparable'));
FPow.mixin(require('./../../mixins/size-comparable'));

module.exports = FPow;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],69:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Round = Function.extend(
    {

        /**
         * @class Functions.Numeric.Round
         * @extends Function
         *
         * Rounds a number to its closest whole number
         *
         * example :
         *
         *     var relation = new affinity.Relation([
         *          { A : { type : affinity.Integer}}
         *     ],[
         *          [-10],[-5],[-2],[-1],[0],[1],[2],[5],[10]
         *     ]);
         *
         *     var A = relation.get('A');
         *
         *     var extended = relation.extend([{"A.sqrt()" : A.sqrt()}, {"A.sqrt().round()" : A.sqrt().round()}]);
         *
         *     // or
         *
         *     var extended = relation.extend([
         *         {"A.sqrt()"         : new affinity.SquareRoot(A)},
         *         {"A.sqrt().round()" : new affinity.Round(new affinity.SquareRoot(A))}
         *     ]);
         *
         *     extended.print();
         *
         *     // +---------------+----------------------+------------------------------+
         *     // | A : Integer   | A.sqrt() : Numeric   | A.sqrt().round() : Numeric   |
         *     // +===============+======================+==============================+
         *     // | -10           | NaN                  | NaN                          |
         *     // +---------------+----------------------+------------------------------+
         *     // | -5            | NaN                  | NaN                          |
         *     // +---------------+----------------------+------------------------------+
         *     // | -2            | NaN                  | NaN                          |
         *     // +---------------+----------------------+------------------------------+
         *     // | -1            | NaN                  | NaN                          |
         *     // +---------------+----------------------+------------------------------+
         *     // | 0             | 0                    | 0                            |
         *     // +---------------+----------------------+------------------------------+
         *     // | 1             | 1                    | 1                            |
         *     // +---------------+----------------------+------------------------------+
         *     // | 2             | 1.4142135623730951   | 1                            |
         *     // +---------------+----------------------+------------------------------+
         *     // | 5             | 2.23606797749979     | 2                            |
         *     // +---------------+----------------------+------------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Round';

        },

        /**
         * Gets the function's return value
         * @returns {number}
         */
        value: function () {

            return Math.round(value(this.parameters[0]));

        }

    });

Round.mixin(require('./../../mixins/numeric'));
Round.mixin(require('./../../mixins/comparable'));
Round.mixin(require('./../../mixins/size-comparable'));

module.exports = Round;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],70:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Sine = Function.extend(
    {

        /**
         * @class Functions.Numeric.Sine
         * @extends Function
         *
         * Function that returns the sine of a number
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [0], [Math.PI/2], [Math.PI], [3*Math.PI/2], [2*Math.PI]
         *      ])
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "sin(A)" : A.sin() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "sin(A)" : new affinity.Sine(A) }]);
         *
         *      extended.print();
         *
         *      //+---------------+------------------+
         *      //| A : Integer   | sin(A) : Numeric |
         *      //+===============+==================+
         *      //| 0             | 0                |
         *      //+---------------+------------------+
         *      //| PI/2          | 1                |
         *      //+---------------+------------------+
         *      //| π             | 0                |
         *      //+---------------+------------------+
         *      //| 3π/2          | 1                |
         *      //+---------------+------------------+
         *      //| 2π            | 0                |
         *      //+---------------+------------------+
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Sine';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return Math.sin(value(this.parameters[0]));

        }

    });

Sine.mixin(require('./../../mixins/numeric'));
Sine.mixin(require('./../../mixins/comparable'));
Sine.mixin(require('./../../mixins/size-comparable'));

module.exports = Sine;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],71:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var FSquareRoot = Function.extend(
    {

        /**
         * @class Functions.Numeric.SquareRoot
         * @extends Function
         *
         *
         * Returns the square root of a number
         *
         * example :
         *
         *     var relation = new affinity.Relation([
         *          { A : { type : affinity.Integer}}
         *     ],[
         *          [-10],[-5],[-2],[-1],[0],[1],[2],[5],[10]
         *     ])
         *
         *     var A = relation.get('A')
         *
         *     var extended = relation.extend([{"A.sqrt()" : A.sqrt()}]);
         *
         *     // or
         *
         *     var extended = relation.extend([{ "A.sqrt()" : new affinity.Sqrt(A)}])
         *
         *     extended.print();
         *
         *     // +---------------+----------------------+
         *     // | A : Integer   | A.sqrt() : Numeric   |
         *     // +===============+======================+
         *     // | -10           | NaN                  |
         *     // +---------------+----------------------+
         *     // | -5            | NaN                  |
         *     // +---------------+----------------------+
         *     // | -2            | NaN                  |
         *     // +---------------+----------------------+
         *     // | -1            | NaN                  |
         *     // +---------------+----------------------+
         *     // | 0             | 0                    |
         *     // +---------------+----------------------+
         *     // | 1             | 1                    |
         *     // +---------------+----------------------+
         *     // | 2             | 1.4142135623730951   |
         *     // +---------------+----------------------+
         *     // | 5             | 2.23606797749979     |
         *     // +---------------+----------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Square Root';

        },

        /**
         * Gets the function result
         * @returns {number}
         */
        value: function () {

            return Math.sqrt(value(this.parameters[0]));

        }

    });

FSquareRoot.mixin(require('./../../mixins/numeric'));
FSquareRoot.mixin(require('./../../mixins/comparable'));
FSquareRoot.mixin(require('./../../mixins/size-comparable'));

module.exports = FSquareRoot;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],72:[function(require,module,exports){
var Function = require('./../../Function.js');
var TNumeric = require('./../../types/Numeric.js');
var value = require('./../../helpers/value');

var Tangent = Function.extend(
    {

        /**
         * @class Functions.Numeric.Tangent
         * @extends Function
         *
         * Function that returns the Tangent of a number
         *
         * Example with Extend operator :
         *
         *      var relation = new affinity.Relation([
         *          { A :  {type : affinity.Integer} },
         *      ],[
         *          [0], [Math.PI/2], [Math.PI], [3*Math.PI/2], [2*Math.PI]
         *      ]);
         *
         *      var A = relation.get('A');
         *
         *
         *      var extended = relation.extend([{ "tan(A)" : A.tan() }]);
         *
         *      // or
         *
         *      var extended = relation.extend([{ "tan(A)" : new affinity.Tangent(A) }]);
         *
         *      extended.print();
         *
         *      // The following result shows a bug, but it's not affinity's fault.
         *      // Due to a bug in V8
         *      // (see this http://stackoverflow.com/questions/24455775/why-does-node-not-evaluate-math-tanmath-pi-2-to-infinity-but-chrome-v8-does)
         *      // Math.tan(Math.PI/2) won't evaluate to Infinity.
         *      // Math.tan(Math.PI) won't evaluate to 0.
         *      // And so on. This is due to Math.cos(Math.PI/2) not evaluating to 0.
         *
         *      // This will be fixed in node v0.11. as I tested the v0.11.14-pre version.
         *
         *      //+---------------+---------------------------+
         *      //| A : Integer   | tan(A) : Numeric          |
         *      //+===============+===========================+
         *      //| 0             | 0                         |
         *      //+---------------+---------------------------+
         *      //| PI/2          | 16331778728383844         |
         *      //+---------------+---------------------------+
         *      //| π             | -1.2246063538223773e-16   |
         *      //+---------------+---------------------------+
         *      //| 3π/2          | 5443926242794615          |
         *      //+---------------+---------------------------+
         *      //| 2π            | -2.4492127076447545e-16   |
         *      //+---------------+---------------------------+
         *
         */
        constructor: function () {

            Function.apply(this, Array.prototype.slice.call(arguments, 0));

            this.type(TNumeric);

            this.name = 'Tangent';

        },

        /**
         * Gets the function return value
         * @returns {number}
         */
        value: function () {

            return Math.tan(value(this.parameters[0]));

        }

    });

Tangent.mixin(require('./../../mixins/numeric'));
Tangent.mixin(require('./../../mixins/comparable'));
Tangent.mixin(require('./../../mixins/size-comparable'));

module.exports = Tangent;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../mixins/comparable":86,"./../../mixins/numeric":90,"./../../mixins/size-comparable":91,"./../../types/Numeric.js":97}],73:[function(require,module,exports){
var Function = require('./../../Function.js');
var TInteger = require('./../../types/Integer.js');
var value = require('./../../helpers/value');

var Length = Function.extend({

    /**
     * @class Functions.String.Length
     *
     * Returns the length of a string
     *
     * Example with Extension operator :
     *
     *     var affinity = require('./index.js');
     *
     *     var relation = new affinity.Relation([
     *          { name : { type : affinity.String}}
     *     ],[
     *          ['John Doe'], ['Mark Clinton'], ['Bo Vril']
     *     ]);
     *
     *     var name = relation.get('name');
     *
     *     var extended = relation.extend([{"name.length()" : name.length()}]);
     *
     *     // or
     *
     *     var extended = relation.extend([
     *         {"name.length()" : new affinity.Length(name)}
     *     ]);
     *
     *     extended.print();
     *
     *     // +-----------------+-------------------------+
     *     // | name : String   | name.length() : Integer |
     *     // +=================+=========================+
     *     // | John Doe        | 8                       |
     *     // +-----------------+-------------------------+
     *     // | Mark Clinton    | 12                      |
     *     // +-----------------+-------------------------+
     *     // | Bo Vril         | 7                       |
     *     // +-----------------+-------------------------+
     *
     */
    constructor: function () {

        Function.apply(this, Array.prototype.slice.call(arguments, 0));

        this.type(TInteger);

        this.name = 'Length';

    },

    /**
     * Gets the function return value
     * @returns {number}
     */
    value: function () {

        return value(this.parameters[0]).length;

    }

});

module.exports = Length;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/Integer.js":96}],74:[function(require,module,exports){
var Function = require('./../../Function.js');
var TString = require('./../../types/String.js');
var value = require('./../../helpers/value');

var Length = Function.extend({

    /**
     * @class Functions.String.Lowercase
     *
     * Returns the lowercase version of a string
     *
     * Example with Extension operator :
     *
     *     var affinity = require('./index.js');
     *
     *     var relation = new affinity.Relation([
     *          { name : { type : affinity.String}}
     *     ],[
     *          ['John Doe'], ['Mark Clinton'], ['Bo Vril']
     *     ]);
     *
     *     var name = relation.get('name');
     *
     *     var extended = relation.extend([{"name.lowercase()" : name.lowercase()}]);
     *
     *     // or
     *
     *     var extended = relation.extend([
     *         { "name.lowercase()" : new affinity.Lowercase(name) }
     *     ])
     *
     *     extended.print();
     *
     *     // +-----------------+---------------------------+
     *     // | name : String   | name.lowercase() : String |
     *     // +=================+===========================+
     *     // | John Doe        | john doe                  |
     *     // +-----------------+---------------------------+
     *     // | Mark Clinton    | mark clinton              |
     *     // +-----------------+---------------------------+
     *     // | Bo Vril         | bo vril                   |
     *     // +-----------------+---------------------------+
     */
    constructor: function () {

        Function.apply(this, Array.prototype.slice.call(arguments, 0));

        this.type(TString);

        this.name = 'Lowercase';

    },

    value: function () {

        return value(this.parameters[0]).toLowerCase();

    }

});

module.exports = Length;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/String.js":99}],75:[function(require,module,exports){
var Function = require('./../../Function.js');
var TString = require('./../../types/String.js');
var value = require('./../../helpers/value');

var Uppercase = Function.extend({

    /**
     * @class Functions.String.Substring
     *
     * Returns a substring from a string
     *
     * Example with Extension operator :
     *
     *     var affinity = require('./index.js');
     *
     *     var relation = new affinity.Relation([
     *          { name : { type : affinity.String}}
     *     ],[
     *          ['John Doe'], ['Mark Clinton'], ['Bo Vril']
     *     ]);
     *
     *     var name = relation.get('name');
     *
     *     var extended = relation.extend([{"name.substr(0,5)" : name.substr(0, 5)}]);
     *
     *     //or
     *
     *     var extended = relation.extend([
     *         { "name.substr(0,5)" : new affinity.Substring(name, 0, 5) }
     *     ]);
     *
     *     extended.print();
     *
     *     // +-----------------+---------------------------+
     *     // | name : String   | name.substr(0,5) : String |
     *     // +=================+===========================+
     *     // | John Doe        | John                      |
     *     // +-----------------+---------------------------+
     *     // | Mark Clinton    | Mark                      |
     *     // +-----------------+---------------------------+
     *     // | Bo Vril         | Bo Vr                     |
     *     // +-----------------+---------------------------+
     */
    constructor: function () {

        Function.apply(this, Array.prototype.slice.call(arguments, 0));

        this.type(TString);

        this.name = 'Substring';

    },

    value: function () {

        var start = value(this.parameters[1]);
        var length = value(this.parameters[2]);
        return value(this.parameters[0]).substr(start, length);

    }

});

module.exports = Uppercase;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/String.js":99}],76:[function(require,module,exports){
var Function = require('./../../Function.js');
var TString = require('./../../types/String.js');
var value = require('./../../helpers/value');

var Test = Function.extend({

    /**
     * @class Functions.String.Test
     *
     * Tests a regex on a string.
     *
     * Example with Extension operator :
     *
     *     var affinity = require('./index.js');
     *
     *     var relation = new affinity.Relation([
     *          { name : { type : affinity.String}}
     *     ],[
     *          ['John Doe'], ['Mark Clinton'], ['Bo Vril']
     *     ]);
     *
     *     var name = relation.get('name');
     *
     *     var extended = relation.extend([{ "name.test(/Doe/)" : name.test(/Doe/)}]);
     *
     *     // or
     *
     *     var extended = relation.extend([
     *         { "name.test(/Doe/)" : new affinity.Test(name, /Doe/) }
     *     ])
     *
     *     extended.print();
     *
     *     // +-----------------+----------------------------+
     *     // | name : String   | name.test(/Doe/) : Boolean |
     *     // +=================+============================+
     *     // | John Doe        | true                       |
     *     // +-----------------+----------------------------+
     *     // | Mark Clinton    | false                      |
     *     // +-----------------+----------------------------+
     *     // | Bo Vril         | false                      |
     *     // +-----------------+----------------------------+
     */
    constructor: function () {

        Function.apply(this, Array.prototype.slice.call(arguments, 0));

        this.type(TString);

        this.name = 'Test';

    },

    /**
     * Gets the function return value
     * @returns {boolean}
     */
    value: function () {

        var regex = value(this.parameters[1]);
        return regex.test(value(this.parameters[0]));

    }

});

module.exports = Test;
},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/String.js":99}],77:[function(require,module,exports){
var Function = require('./../../Function.js');
var TString = require('./../../types/String.js');
var value = require('./../../helpers/value');

var Uppercase = Function.extend({

    /**
     * @class Functions.String.Uppercase
     *
     * Returns the uppercase version of a string
     *
     * Example with Extension operator :
     *
     *     var affinity = require('./index.js');
     *
     *     var relation = new affinity.Relation([
     *          { upcs : { type : affinity.String}}
     *     ],[
     *          ['John Doe'], ['Mark Clinton'], ['Bo Vril']
     *     ]);
     *
     *     var extended = relation.extend([{"name.uppercase()" : relation.get('name').uppercase()}]);
     *
     *     // or
     *
     *     var extended = relation.extend([
     *         { "name.uppercase()" : new affinity.Uppercase(name) }
     *     ])
     *
     *     extended.print();
     *
     *     // +-----------------+---------------------------+
     *     // | name : String   | name.uppercase() : String |
     *     // +=================+===========================+
     *     // | John Doe        | JOHN DOE                  |
     *     // +-----------------+---------------------------+
     *     // | Mark Clinton    | MARK CLINTON              |
     *     // +-----------------+---------------------------+
     *     // | Bo Vril         | BO VRIL                   |
     *     // +-----------------+---------------------------+
     */
    constructor: function () {

        Function.apply(this, Array.prototype.slice.call(arguments, 0));

        this.type(TString);

        this.name = 'Uppercase';

    },

    /**
     * Gets the function return value
     * @returns {string}
     */
    value: function () {

        return value(this.parameters[0]).toUpperCase();

    }

});

module.exports = Uppercase;



},{"./../../Function.js":5,"./../../helpers/value":85,"./../../types/String.js":99}],78:[function(require,module,exports){
var Function = require('./../../Function.js');
var Type = require('./../../Type.js');
var TBoolean = require('./../../types/Boolean.js');

var TupleAttribute = Function.extend({

    /**
     * @class Functions.Tuple.AttributeValue
     * @extends Function
     *
     * When building a predicate, you pass the Header Attributes directly like this :
     *
     *     var extended = relation.extend(relation.get('attribute1').plus(relation.get('attribute2')));
     *
     * In the documentation for Relation#get, it is specified that it returns an Attribute.
     *
     * Though, when building predicates for restriction or extension operators, we convert the passed Attributes
     * into a function TupleAttribute. So this is the same as the above :
     *
     *     var extended = relation.extend(new affinity.TupleAttribute('attribute1').plus(new affinity.TupleAttribute('attribute2')));
     *
     * Directly passing the Header Attribute is just some nice sugar.
     *
     */
    constructor: function (attributeName) {

        Function.apply(this, arguments);

        this.attributeName = attributeName;

        this.name = 'TupleAttribute';

    },

    /**
     * Gets the function return value
     * @returns {*}
     */
    value: function () {

        var tuple = this.parameters[0];

        var attributeName = this.attributeName;

        if(!tuple.attributes.hasOwnProperty(attributeName)){
            throw new Error('Attribute "'+attributeName+'" does not exist in Tuple');
        }

        return tuple.get(attributeName);

    },

    /**
     * Assigns a tuple to the function
     * @param tuple
     */
    assignTuple : function(tuple){

        this.parameters[0] = tuple;

    }

},{


});

module.exports = TupleAttribute;
},{"./../../Function.js":5,"./../../Type.js":12,"./../../types/Boolean.js":93}],79:[function(require,module,exports){
var _ = require('lodash');
var debug = require('./debug');

var clone = function (element) {

    debug.clone.trace('#clone');

    if (element.clone && _.isFunction(element.clone)) {

        return element.clone();

    } else {

        return _.cloneDeep(element);

    }

};

module.exports = clone;
},{"./debug":82,"lodash":103}],80:[function(require,module,exports){
var _ = require('lodash');
var debug = require('./debug');
var coerce = function (type, value) {
    debug.coerce.trace('#coerce');
    if(value instanceof type){
        return value;
    } else if (type && _.isFunction(type.coerce)) {
        return type.coerce.apply(this, Array.prototype.slice.call(arguments, 1));
    } else {
        if (type && value instanceof type) {
            return value;
        }
        if (type) {
            var result = new (type.prototype.constructor.bind.apply(type, (Array.prototype.slice.call(arguments, 0))));
        } else {
            result = value;
        }
        return result;
    }
};
module.exports = coerce;
},{"./debug":82,"lodash":103}],81:[function(require,module,exports){
var value = require('./value');
var _ = require('lodash');
var Function = require('./../Function');
var Type = require('./../Type');
var debug = require('./debug');

var compare = function (type, value1, value2) {

    debug.compare.trace('#compare');

    // Get the function return values if applicable

    value1 = value(value1);
    value2 = value(value2);


    // Access the type's equal function

    if(value1 instanceof Type){
        return value1.constructor.compare(value1, value2);
    }

    if(value2 instanceof Type){
        return value2.constructor.compare(value1, value2);
    }

    if(value1 instanceof Date){
        value1 = value1.getTime();
    }

    if(value2 instanceof Date){
        value2 = value2.getTime();
    }


    if(value1 === value2){
        return 0;
    } else if (value1 > value2){
        return 1;
    } else if (value2 > value1){
        return -1;
    }


};

module.exports = compare;
},{"./../Function":5,"./../Type":12,"./debug":82,"./value":85,"lodash":103}],82:[function(require,module,exports){

var log4js;

try {
    log4js = require("log4js");

    log4js.configure({
        appenders: [
            { type: 'console' }
        ],
        replaceConsole: false
    });

    log4js.setGlobalLogLevel(log4js.levels.WARN);

} catch(e) {
    log4js = {};

    var logger = function(){
        this.trace = this.warn = this.debug = function(){
            return;
        }
    };

    log4js.getLogger = function(){
        return new logger();
    };
}

var Set = module.exports.set = log4js.getLogger('Set');
var Relation = module.exports.relation = log4js.getLogger('Relation');
var Header = module.exports.header = log4js.getLogger('Header');

var Compose = module.exports.compose = log4js.getLogger('Compose');
var Difference = module.exports.difference = log4js.getLogger('Difference');
var Extend = module.exports.extend = log4js.getLogger('Extend');
var Group = module.exports.group = log4js.getLogger('Group');
var Intersection = module.exports.intersection = log4js.getLogger('Intersection');
var Join = module.exports.join = log4js.getLogger('Join');
var Product = module.exports.product = log4js.getLogger('Product');
var Projection = module.exports.projection = log4js.getLogger('Projection');
var Rename = module.exports.rename = log4js.getLogger('Rename');
var Restriction = module.exports.restriction = log4js.getLogger('Restriction');
var SemiJoin = module.exports.semiJoin = log4js.getLogger('SemiJoin');
var SemiDifference = module.exports.semiDifference = log4js.getLogger('SemiDifference');
var Ungroup = module.exports.ungroup = log4js.getLogger('Ungroup');
var Union = module.exports.union = log4js.getLogger('Union');
var Unwrap = module.exports.unwrap = log4js.getLogger('Unwrap');
var Wrap = module.exports.wrap = log4js.getLogger('Wrap');
var TableDump = module.exports.reldump = log4js.getLogger('TableDump');
var Test = module.exports.test = log4js.getLogger('Test');

var Index = module.exports.index = log4js.getLogger('Index');
var Key = module.exports.key = log4js.getLogger('Key');
var ForeignKey = module.exports.foreignKey = log4js.getLogger('ForeignKey');


var Clone = module.exports.clone = log4js.getLogger('Clone');
var Type = module.exports.type = log4js.getLogger('Type');
var Coerce = module.exports.coerce = log4js.getLogger('Coerce');
var Compare = module.exports.compare = log4js.getLogger('Compare');
var Value = module.exports.value = log4js.getLogger('Value');
var Equal = module.exports.equal = log4js.getLogger('Equal');



},{"log4js":undefined}],83:[function(require,module,exports){
var value = require('./value');
var _ = require('lodash');
var Function = require('./../Function');
var Type = require('./../Type');
var debug = require('./debug');

var equal = function (type, value1, value2) {

    debug.equal.trace('#equal');

    // Get the function return values if applicable

    value1 = value(value1);
    value2 = value(value2);

    if(_.isUndefined(value1) && _.isUndefined(value2)){
        return true;
    } else if (_.isUndefined(value1) || _.isUndefined(value2)){
        return false;
    } else if (_.isNull(value1) && _.isNull(value2)){
        return true;
    } else if (_.isNull(value1) || _.isNull(value2)){
        return false;
    }


    // Access the type's equal function

    if(value1.constructor && value1.constructor.equal){
        return value1.constructor.equal(value1, value2);
    }

    if(value2.constructor && value2.constructor.equal){
        return value2.constructor.equal(value1, value2);
    }


    // Fallback on good'ol lodash

    return _.isEqual(value1, value2);


};

module.exports = equal;
},{"./../Function":5,"./../Type":12,"./debug":82,"./value":85,"lodash":103}],84:[function(require,module,exports){
var value = require('./value');
var _ = require('lodash');
var Function = require('./../Function');
var Attribute = require('./../Attribute');
var Type = require('./../Type');
var debug = require('./debug');

var TBoolean = require('./../types/Boolean');
var TString = require('./../types/String');
var TDate = require('./../types/Date');
var TInteger = require('./../types/Integer');
var TNumeric = require('./../types/Numeric');
var TFloat = require('./../types/Float');


var type = function(thang){

    debug.type.trace('#type');

    if(thang instanceof Attribute){
        return thang.type;
    }

    if(thang instanceof Type){
        return thang.constructor;
    }

    if(thang instanceof Function){
        return thang.type();
    }

    if(_.isBoolean(thang)){
        return TBoolean;
    }

    if(_.isNumber(thang)){
        return TNumeric;
    }

    if(_.isDate(thang)){
        return TDate;
    }

};

module.exports = type;


},{"./../Attribute":2,"./../Function":5,"./../Type":12,"./../types/Boolean":93,"./../types/Date":94,"./../types/Float":95,"./../types/Integer":96,"./../types/Numeric":97,"./../types/String":99,"./debug":82,"./value":85,"lodash":103}],85:[function(require,module,exports){

var debug = require('./debug');
var Function = require('./../Function');

var value = function (value) {

    debug.value.trace('#value');

    if(value instanceof Function){

        value = value.value();

    }

    return value;

};

module.exports = value;
},{"./../Function":5,"./debug":82}],86:[function(require,module,exports){
/**
 * @class Mixins.Comparable
 */


/**
 * @member Mixins.Comparable
 */
module.exports.equals = function (attr) {

    var Equal = require('./../functions/comparable/Equal.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Equal(this, attr));
    }

    return new Equal(this, attr);

};

/**
 * @member Mixins.Comparable
 */
module.exports.eq = function(attr){
    return module.exports.equals.call(this, attr);
};
},{"./../functions/comparable/Equal.js":39}],87:[function(require,module,exports){
/**
 * @class Mixins.Chainable
 */

/**
 * @member Mixins.Chainable
 */
module.exports.and = function (param) {

    var And = require('./../functions/connective/And.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new And(this, param));
    }

    return new And(this, param);

};

/**
 * @member Mixins.Chainable
 */
module.exports.or = function () {

    var Or = require('./../functions/connective/Or.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Or(this));
    }

    return new Or(this);

};
},{"./../functions/connective/And.js":44,"./../functions/connective/Or.js":46}],88:[function(require,module,exports){
module.exports.dayOfMonth = function () {

    var DayOfMonth = require('./../functions/date/DayOfMonth.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new DayOfMonth(this));
    }

    return new DayOfMonth(this);

};

module.exports.dayOfWeek = function () {

    var DayOfWeek = require('./../functions/date/DayOfWeek.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new DayOfWeek(this));
    }

    return new DayOfWeek(this);

};

module.exports.dayOfYear = function () {

    var DayOfYear = require('./../functions/date/DayOfYear.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new DayOfYear(this));
    }

    return new DayOfYear(this);

};


module.exports.month = function () {

    var Month = require('./../functions/date/Month.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Month(this));
    }

    return new Month(this);

};

module.exports.ts = function () {

    var Timestamp = require('./../functions/date/Timestamp.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Timestamp(this));
    }

    return new Timestamp(this);

};

module.exports.weekOfYear = function () {

    var WeekOfYear = require('./../functions/date/WeekOfYear.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new WeekOfYear(this));
    }

    return new WeekOfYear(this);

};

module.exports.year = function () {

    var Year = require('./../functions/date/Year.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Year(this));
    }

    return new Year(this);

};

module.exports.hours = function () {

    var Hours = require('./../functions/date/Hours.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Hours(this));
    }

    return new Hours(this);

};

module.exports.minutes = function () {

    var Minutes = require('./../functions/date/Minutes.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Minutes(this));
    }

    return new Minutes(this);

};

module.exports.seconds = function () {

    var Seconds = require('./../functions/date/Seconds.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Seconds(this));
    }

    return new Seconds(this);

};

module.exports.milliseconds = function () {

    var Milliseconds = require('./../functions/date/Milliseconds.js');

    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Milliseconds(this));
    }

    return new Milliseconds(this);

};
},{"./../functions/date/DayOfMonth.js":47,"./../functions/date/DayOfWeek.js":48,"./../functions/date/DayOfYear.js":49,"./../functions/date/Hours.js":50,"./../functions/date/Milliseconds.js":51,"./../functions/date/Minutes.js":52,"./../functions/date/Month.js":53,"./../functions/date/Seconds.js":54,"./../functions/date/Timestamp.js":55,"./../functions/date/WeekOfYear.js":56,"./../functions/date/Year.js":57}],89:[function(require,module,exports){
/**
 * @class Mixins.Negatable
 */

/**
 * @member Mixins.Negatable
 */
module.exports.not = function (attr) {

    this._negated = true;
    return this;

};
},{}],90:[function(require,module,exports){
module.exports.abs = function () {
    var Absolute = require('./../functions/numeric/Absolute.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Absolute(this));
    }
    return new Absolute(this);
};

module.exports.ceil = function (attr) {
    var Ceil = require('./../functions/numeric/Ceil.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Ceil(this));
    }
    return new Ceil(this);
};

module.exports.floor = function (attr) {
    var Floor = require('./../functions/numeric/Floor.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Ceil(this));
    }
    return new Floor(this);
};

module.exports.cos = function (attr) {
    var Cos = require('./../functions/numeric/Cosine.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Cos(this));
    }
    return new Cos(this);
};

module.exports.div = function (attr) {
    var Division = require('./../functions/numeric/Division.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Division(this, attr));
    }
    return new Division(this, attr);
};


module.exports.exp = function () {
    var Exp = require('./../functions/numeric/Exponential.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Exp(this));
    }
    return new Exp(this);
};


module.exports.minus = function (attr) {
    var Minus = require('./../functions/numeric/Minus.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Minus(this, attr));
    }
    return new Minus(this, attr);
};


module.exports.mod = function (attr) {
    var Modulo = require('./../functions/numeric/Modulo.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Modulo(this, attr));
    }
    return new Modulo(this, attr);
};


module.exports.times = function (attr) {
    var Multiplication = require('./../functions/numeric/Multiplication.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Multiplication(this, attr));
    }
    return new Multiplication(this, attr);
};


module.exports.plus = function (attr) {
    var Plus = require('./../functions/numeric/Plus.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Plus(this, attr));
    }
    return new Plus(this, attr);
};


module.exports.pow = function (attr) {
    var Pow = require('./../functions/numeric/Power.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Pow(this, attr));
    }
    return new Pow(this, attr);
};


module.exports.round = function () {
    var Round = require('./../functions/numeric/Round.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Round(this));
    }
    return new Round(this);
};


module.exports.sin = function () {
    var Sin = require('./../functions/numeric/Sine.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Sin(this));
    }
    return new Sin(this);
};


module.exports.sqrt = function () {
    var Sqrt = require('./../functions/numeric/SquareRoot.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Sqrt(this));
    }
    return new Sqrt(this);
};


module.exports.tan = function () {
    var Tan = require('./../functions/numeric/Tangent.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Tan(this));
    }
    return new Tan(this);
};

module.exports.avg = function(){

    var Average = require('./../functions/aggregate/Average.js');
    return new Average(this);

};

module.exports.standardDeviation = function(){

    var StandardDeviation = require('./../functions/aggregate/StandardDeviation.js');
    return new StandardDeviation(this);

};

module.exports.sum = function(){

    var Sum = require('./../functions/aggregate/Sum.js');
    return new Sum(this);

};

module.exports.variance = function(){

    var Variance = require('./../functions/aggregate/Variance.js');
    return new Variance(this);

};


},{"./../functions/aggregate/Average.js":32,"./../functions/aggregate/StandardDeviation.js":36,"./../functions/aggregate/Sum.js":37,"./../functions/aggregate/Variance.js":38,"./../functions/numeric/Absolute.js":58,"./../functions/numeric/Ceil.js":59,"./../functions/numeric/Cosine.js":60,"./../functions/numeric/Division.js":61,"./../functions/numeric/Exponential.js":62,"./../functions/numeric/Floor.js":63,"./../functions/numeric/Minus.js":64,"./../functions/numeric/Modulo.js":65,"./../functions/numeric/Multiplication.js":66,"./../functions/numeric/Plus.js":67,"./../functions/numeric/Power.js":68,"./../functions/numeric/Round.js":69,"./../functions/numeric/Sine.js":70,"./../functions/numeric/SquareRoot.js":71,"./../functions/numeric/Tangent.js":72}],91:[function(require,module,exports){
/**
 * @class Mixins.SizeComparable
 */

/**
 * @member Mixins.SizeComparable
 */
module.exports.gt = function (attr) {
    var GreaterThan = require('./../functions/comparable/GreaterThan.js');
    return new GreaterThan(this, attr);
};

/**
 * @member Mixins.SizeComparable
 */
module.exports.gte = function (attr) {
    var GreaterThanEqual = require('./../functions/comparable/GreaterThanEqual.js');
    return new GreaterThanEqual(this, attr);
};

/**
 * @member Mixins.SizeComparable
 */
module.exports.st = function (attr) {
    var SmallerThan = require('./../functions/comparable/SmallerThan.js');
    return new SmallerThan(this, attr);
};

/**
 * @member Mixins.SizeComparable
 */
module.exports.ste = function (attr) {
    var SmallerThanEqual = require('./../functions/comparable/SmallerThanEqual.js');
    return new SmallerThanEqual(this, attr);
};

module.exports.max = function(){
    var Maximum = require('./../functions/aggregate/Maximum');

    return new Maximum(this);
};

module.exports.min = function(){
    var Minimum = require('./../functions/aggregate/Minimum');

    return new Minimum(this);
};
},{"./../functions/aggregate/Maximum":34,"./../functions/aggregate/Minimum":35,"./../functions/comparable/GreaterThan.js":40,"./../functions/comparable/GreaterThanEqual.js":41,"./../functions/comparable/SmallerThan.js":42,"./../functions/comparable/SmallerThanEqual.js":43}],92:[function(require,module,exports){


module.exports.length = function () {
    var Length = require('./../functions/string/Length.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Length(this));
    }
    return new Length(this);
};

module.exports.lowercase = function () {
    var Lowercase = require('./../functions/string/Lowercase.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Lowercase(this));
    }
    return new Lowercase(this);
};

module.exports.test = function (regex) {
    var Test = require('./../functions/string/Test.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Test(this, regex));
    }
    return new Test(this, regex);
};

module.exports.substr = function (index, len) {
    var Substring = require('./../functions/string/Substring.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Substring(this, index, len));
    }
    return new Substring(this, index, len);
};

module.exports.uppercase = function () {
    var Uppercase = require('./../functions/string/Uppercase.js');
    if (this._checkNegatedAttribute) {
        return this._checkNegatedAttribute(new Uppercase(this));
    }
    return new Uppercase(this);
};
},{"./../functions/string/Length.js":73,"./../functions/string/Lowercase.js":74,"./../functions/string/Substring.js":75,"./../functions/string/Test.js":76,"./../functions/string/Uppercase.js":77}],93:[function(require,module,exports){
var Type = require('./../Type');
var _ = require('lodash');

var TBoolean = Type.extend(/**
 * @class Types.Boolean
 * @extends Type
 *
 * Represents a Boolean Type
 *
 * This class should not be instantiated. It is only used to define
 * relation header attribute types or function return types.
 *
 */{



}, {

    /**
     * @param {boolean|Types.Boolean} boolean1
     * @param {boolean|Types.Boolean} boolean2
     * @static
     * @returns {boolean}
     *
     * Method to check if two boolean object are equal
     *
     */
    equal: function (boolean1, boolean2) {

        return boolean1 === boolean2;

    },

    /**
     * @param {*} value The variable to coerce to Boolean type
     * @static
     * @returns {boolean}
     */
    coerce : function(value){

        var lowerCaseValue;

        if(_.isBoolean(value)){
            return value;
        } else if (value === 0){
            return false;
        } else if (value === 1){
            return true;
        } else if (_.isString(value)){

            lowerCaseValue = value.toLowerCase();

            if(lowerCaseValue === 'true' || lowerCaseValue === 't'){
                return true;
            } else if(lowerCaseValue === 'false' || lowerCaseValue === 'f'){
                return false;
            }

        }

    },

    /**
     * @static
     * @returns {string}
     *
     * String representation of the Boolean type
     */
    toString: function () {
        return 'Boolean'
    },

    /**
     * @param {boolean} boolean
     * @static
     * @returns {boolean}
     *
     * Returns the value of a boolean
     */
    value : function(boolean){

        return boolean;

    },

    /**
     * Mixins for Booleans
     * @static
     */
    payload : [
        require('./../mixins/comparable'),
        require('./../mixins/connectable'),
        require('./../mixins/not')
    ],

    type : 'Boolean'

});

module.exports = TBoolean;


},{"./../Type":12,"./../mixins/comparable":86,"./../mixins/connectable":87,"./../mixins/not":89,"lodash":103}],94:[function(require,module,exports){
var Object = require('./Object');
var _ = require('lodash');

var Date = Object.extend({

    /**
     * @class Types.Date
     * @extends Type
     *
     * Represents a Date type.
     *
     * Should not be instantiated. Only used to represent
     * relation header attribute types or function return types.
     */

}, {

    /**
     * Serialize method for Dates.
     * @param {Date|Types.Date} date
     * @static
     * @returns {number}
     */
    serialize : function(date){

        return date.getTime();

    },

    /**
     * Coerces an arbitrary object into a date
     * @param {string|number|Date|Types.Date} value
     * @static
     * @returns {Date}
     */
    coerce : function(value){

        if(_.isString(value)){
            return new Date(value);
        } else if (_.isNumber(value)){
            var result = new Date();
            result.setTime(value);
            return result;
        } else if(_.isDate(value)){
            return value;
        }

    },

    /**
     * Check if two dates are equal
     * @param {Date|Types.Date} date1
     * @param {Date|Types.Date} date2
     * @static
     * @returns {boolean}
     */
    equal: function (date1, date2) {

        return date1 === date2;

    },

    /**
     * String representation of the Date type
     * @static
     * @returns {string}
     */
    toString: function () {
        return 'Date'
    },

    /**
     * Gets the value of a date
     * @static
     * @param date
     * @returns {Date}
     */
    value : function(date){

        return date;

    },

    /**
     * Mixins for dates
     */
    payload : [
        require('./../mixins/comparable'),
        require('./../mixins/size-comparable'),
        require('./../mixins/not'),
        require('./../mixins/date')
    ],

    type : 'Date'

});

module.exports = Date;


},{"./../mixins/comparable":86,"./../mixins/date":88,"./../mixins/not":89,"./../mixins/size-comparable":91,"./Object":98,"lodash":103}],95:[function(require,module,exports){
var Numeric = require('./Numeric.js');
var _ = require('lodash');

var Float = Numeric.extend({

    /**
     * @class Types.Float
     * @extends Types.Numeric
     *
     * Represents a Float type.
     *
     * This class should not be instantiated. It is only used
     * to represent relation header attribute types or function return types.
     */

}, {

    /**
     * String representation of the Float type
     * @static
     * @returns {string}
     */
    toString: function () {
        return 'Float'
    },


    /**
     * Coerces an arbitrary value to Float type
     * @param value
     * @returns {number}
     */
    coerce : function(value){

        if (_.isNumber(value) || _.isString(value)){
            return parseFloat(value);
        }

    },

    primitive : true,

    type : 'Float'

});

module.exports = Float;


},{"./Numeric.js":97,"lodash":103}],96:[function(require,module,exports){
var TNumeric = require('./Numeric.js');
var _ = require('lodash');

var Integer = TNumeric.extend({

    /**
     * @class Types.Integer
     * @extends Types.Numeric
     *
     * Represents an Integer type.
     *
     * This class should not be instantiated. It is only used
     * to represent relation header attribute types or function return types.
     */

}, {

    /**
     * Coerces an arbitrary value to Integer type
     * @param value
     * @returns {number}
     */
    coerce : function(value){

        if (_.isNumber(value) || _.isString(value)){
            return parseInt(value);
        }

    },

    /**
     * String representation of the Integer Type
     * @returns {string}
     */
    toString: function () {
        return 'Integer'
    },

    primitive : true,

    type : 'Integer'

});

module.exports = Integer;


},{"./Numeric.js":97,"lodash":103}],97:[function(require,module,exports){
var Type = require('./../Type');
var _ = require('lodash');

var Numeric = Type.extend({

    /**
     * @class Types.Numeric
     *
     * Represents a Numeric type.
     *
     * This class should not be instantiated. It is only used
     * to represent relation header attribute types or function return types.
     */

}, {

    /**
     * @param {*} value
     * @returns {number}
     *
     * Coerces an arbitrary value to type float
     *
     */
    coerce : function(value){

        if(_.isNumber(value)){
            return value;
        } else if (_.isString(value)){
            return parseFloat(value);
        }

    },

    /**
     * Mixins for Numeric types
     */
    payload : [
        require('./../mixins/comparable'),
        require('./../mixins/size-comparable'),
        require('./../mixins/numeric'),
        require('./../mixins/connectable'),
        require('./../mixins/not')
    ],

    /**
     * Returns the value of the Numeric object
     * @param numeric
     * @returns {*}
     */
    value : function(numeric){

        return numeric;

    },

    equal: function (numeric1, numeric2) {

        return (numeric1 === numeric2);

    },

    toString: function () {
        return 'Numeric'
    },

    primitive : true,

    type : 'Numeric'

});


module.exports = Numeric;


},{"./../Type":12,"./../mixins/comparable":86,"./../mixins/connectable":87,"./../mixins/not":89,"./../mixins/numeric":90,"./../mixins/size-comparable":91,"lodash":103}],98:[function(require,module,exports){
var Type = require('./../Type');
var _ = require('lodash');

var TObject = Type.extend({

    /**
     * @class Types.Object
     * @extends Type
     *
     * Represents an Object Type.
     */

    /**
     * Creates new Object instances
     * @param value
     */
    constructor: function (value) {

        Type.apply(this, Array.prototype.slice.call(arguments, 0));

        if(_.isObject(value)){
            _.extend(this, value);
        }

        this.name = 'Object';
    },

    /**
     * String representation of an Object value
     * @returns {string}
     */
    toString: function () {

        return 'Object';

    }

}, {

    /**
     * Method to coerce an arbitrary value into an Object instance
     * @param value
     * @returns {Object}
     */
    coerce : function(value){

        return value;

    },

    /**
     * Mixins for Object type
     */
    payload : [
        require('./../mixins/comparable'),
        require('./../mixins/connectable'),
        require('./../mixins/not')
    ],

    /**
     * Returns the value of the object
     * @param object
     * @returns {*}
     */
    value : function(object){

        return object;

    },

    /**
     * Tests for equality between two objects
     * @static
     * @param object1
     * @param object2
     * @returns {boolean}
     */
    equal: function (object1, object2) {

        return _.isEqual(object1, object2);

    },

    /**
     * String representation of an object
     * @static
     * @returns {string}
     */
    toString: function () {

        return 'Object'

    },

    /**
     * Object is not a primitive type
     */
    primitive : false,

    type : 'Object'

});


module.exports = TObject;


},{"./../Type":12,"./../mixins/comparable":86,"./../mixins/connectable":87,"./../mixins/not":89,"lodash":103}],99:[function(require,module,exports){
var Type = require('./../Type');
var TBoolean = require('./Boolean');
var _ = require('lodash');

var String = Type.extend({

    /**
     * @class Types.String
     * @extends Type
     *
     * Represents a String Attribute Type.
     *
     * Should not be instantiated. It is only
     * used to represent relation header attribute types or function return types.
     *
     */

}, {

    coerce : function(value){

        return value;

    },

    /**
     * Mixins for String types
     */
    payload : [
        require('./../mixins/comparable'),
        require('./../mixins/size-comparable'),
        require('./../mixins/connectable'),
        require('./../mixins/not'),
        require('./../mixins/string'),
    ],

    /**
     * Checks for equality between two strings
     * @param str1
     * @param str2
     * @returns {boolean}
     */
    equal: function (str1, str2) {

        return str2 === str1;

    },

    /**
     * String representation of a String Type
     * @returns {string}
     */
    toString: function () {
        return 'String'
    },

    /**
     * String is a primitive
     */
    primitive : true,

    type : 'TString'

});

module.exports = String;


},{"./../Type":12,"./../mixins/comparable":86,"./../mixins/connectable":87,"./../mixins/not":89,"./../mixins/size-comparable":91,"./../mixins/string":92,"./Boolean":93,"lodash":103}],100:[function(require,module,exports){
var Type = require('./../Type');
var TBoolean = require('./Boolean');

var TType = Type.extend({

    /**
     * @class Types.Type
     * @extends Type
     *
     * Represents a Type Attribute type.
     *
     * Should not be instantiated. It is only
     * used to represent relation header attribute types or function return types.
     *
     */

}, {

    /**
     * Check if two Types are equal
     * @param {Function} type1
     * @param {Function} type2
     * @returns {boolean}
     */
    equal: function (type1, type2) {

        return (type1 === type2);

    },

    toString: function () {
        return 'Type'
    },

    type : 'Type'

});

module.exports = TType;


},{"./../Type":12,"./Boolean":93}],101:[function(require,module,exports){
/**
 * @class Affinity
 * @type {Object} 
 * @member Affinity
 */
var affinity = {};

//region Types

/**
 * @member Affinity
 * @type {Index}
 */
affinity.Index = require('./affinity/Index.js');

/**
 * @type {Types.Type}  
 * @member Affinity
 */
affinity.Type = require('./affinity/types/Type.js');

/**
 * @type {Set} 
 * @member Affinity
 */
affinity.Set = require('./affinity/Set.js');

/**
 * @type {Relation} 
 * @member Affinity
 */
affinity.Relation = require('./affinity/Relation.js');

/**
 * @type {Tuple} 
 * @member Affinity
 */
affinity.Tuple = require('./affinity/Tuple.js');

/**
 * @type {Header} 
 * @member Affinity
 */
affinity.Header = require('./affinity/Header.js');

/**
 * @type {Attribute} 
 * @member Affinity
 */
affinity.Attribute = require('./affinity/Attribute.js');

/**
 * @type {Types.Object} 
 * @member Affinity
 */
affinity.Object = require('./affinity/types/Object');

/**
 * @type {Types.Integer} 
 * @member Affinity
 */
affinity.Integer = require('./affinity/types/Integer');

/**
 * @type {Types.Float} 
 * @member Affinity
 */
affinity.Float = require('./affinity/types/Float');

/**
 * @type {Types.String} 
 * @member Affinity
 */
affinity.String = require('./affinity/types/String');

/**
 * @type {Types.Boolean} 
 * @member Affinity
 */
affinity.Boolean = require('./affinity/types/Boolean');

/**
 * @type {Types.Date} 
 * @member Affinity
 */
affinity.Date = require('./affinity/types/Date');
//endregion

/**
 * @type {Function} 
 * @member Affinity
 */
affinity.Function = require('./affinity/Function.js');

//region Connective Functions

/**
 * @type {Functions.Connective.And} 
 * @member Affinity
 */
affinity.And = require('./affinity/functions/connective/And.js');

/**
 * @type {Functions.Connective.Or} 
 * @member Affinity
 */
affinity.Or = require('./affinity/functions/connective/Or.js');

/**
 * @type {Functions.Connective.Not} 
 * @member Affinity
 */
affinity.Not = require('./affinity/functions/connective/Not.js');
//endregion

//region Comparative Functions

/**
 * @type {Functions.Comparable.Equal} 
 * @member Affinity
 */
affinity.Equal = require('./affinity/functions/comparable/Equal.js');

/**
 * @type {Functions.Comparable.Equal} 
 * @member Affinity
 */
affinity.eq = function(attr1, attr2){
    return new affinity.Equal(attr1, attr2);
};


/**
 * @type {Functions.Comparable.GreaterThan} 
 * @member Affinity
 */
affinity.GreaterThan = require('./affinity/functions/comparable/GreaterThan.js');

/**
 * @type {Functions.Comparable.GreaterThan} 
 * @member Affinity
 */
affinity.gt = function(attr1, attr2){
    return new affinity.GreaterThan(attr1, attr2);
};


/**
 * @type {Functions.Comparable.GreaterThanEqual} 
 * @member Affinity
 */
affinity.GreaterThanEqual = require('./affinity/functions/comparable/GreaterThanEqual.js');

/**
 * @type {Functions.Comparable.GreaterThanEqual} 
 * @member Affinity
 */
affinity.gte = function(attr1, attr2){
    return new affinity.GreaterThanEqual(attr1, attr2);
};


/**
 * @type {Functions.Comparable.SmallerThan} 
 * @member Affinity
 */
affinity.SmallerThan = require('./affinity/functions/comparable/SmallerThan.js');

/**
 * @type {Functions.Comparable.SmallerThan} 
 * @member Affinity
 */
affinity.st = function(attr1, attr2){
    return new affinity.SmallerThan(attr1, attr2);
};


/**
 * @type {Functions.Comparable.SmallerThanEqual} 
 * @member Affinity
 */
affinity.SmallerThanEqual = require('./affinity/functions/comparable/SmallerThanEqual.js');

/**
 * @type {Functions.Comparable.SmallerThanEqual} 
 * @member Affinity
 */
affinity.ste = function(attr1, attr2){
    return new affinity.SmallerThanEqual(attr1, attr2);
};

//endregion

//region Numeric Functions

/**
 * @type {Functions.Numeric.Absolute} 
 * @member Affinity
 */
affinity.Absolute = require('./affinity/functions/numeric/Absolute.js');

/**
 * @type {Functions.Numeric.Ceil} 
 * @member Affinity
 */
affinity.Ceil = require('./affinity/functions/numeric/Ceil.js');
/**
 * @type {Functions.Numeric.Cosine} 
 * @member Affinity
 */
affinity.Cosine = require('./affinity/functions/numeric/Cosine.js');

/**
 * @type {Functions.Numeric.Division} 
 * @member Affinity
 */
affinity.Division = require('./affinity/functions/numeric/Division.js');

/**
 * @type {Functions.Numeric.Exponential} 
 * @member Affinity
 */
affinity.Exponential = require('./affinity/functions/numeric/Exponential.js');

/**
 * @type {Functions.Numeric.Floor} 
 * @member Affinity
 */
affinity.Floor = require('./affinity/functions/numeric/Floor.js');

/**
 * @type {Functions.Numeric.Minus} 
 * @member Affinity
 */
affinity.Minus = require('./affinity/functions/numeric/Minus.js');

/**
 * @type {Functions.Numeric.Modulo} 
 * @member Affinity
 */
affinity.Modulo = require('./affinity/functions/numeric/Modulo.js');

/**
 * @type {Functions.Numeric.Multiplication} 
 * @member Affinity
 */
affinity.Multiplication = require('./affinity/functions/numeric/Multiplication.js');

/**
 * @type {Functions.Numeric.Plus} 
 * @member Affinity
 */
affinity.Plus = require('./affinity/functions/numeric/Plus.js');

/**
 * @type {Functions.Numeric.Power} 
 * @member Affinity
 */
affinity.Power = require('./affinity/functions/numeric/Power.js');

/**
 * @type {Functions.Numeric.Round} 
 * @member Affinity
 */
affinity.Round = require('./affinity/functions/numeric/Round.js');

/**
 * @type {Functions.Numeric.Sine} 
 * @member Affinity
 */
affinity.Sine = require('./affinity/functions/numeric/Sine.js');

/**
 * @type {Functions.Numeric.SquareRoot} 
 * @member Affinity
 */
affinity.SquareRoot = require('./affinity/functions/numeric/SquareRoot.js');

/**
 * @type {Functions.Numeric.Tangent} 
 * @member Affinity
 */
affinity.Tangent = require('./affinity/functions/numeric/Tangent.js');

/**
 * @param attr
 * @returns {Functions.Numeric.Absolute}
 */
affinity.abs = function(attr){
    return new affinity.Absolute(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Ceil}
 */
affinity.ceil = function(attr){
    return new affinity.Ceil(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Floor}
 */
affinity.floor = function(attr){
    return new affinity.Floor(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Cosine}
 */
affinity.cos = function(attr){
    return new affinity.Cosine(attr);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Division}
 */
affinity.div = function(attr1, attr2){
    return new affinity.Division(attr1, attr2);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Exponential}
 */
affinity.exp = function(attr){
    return new affinity.Exponential(attr);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Minus}
 */
affinity.minus = function(attr1, attr2){
    return new affinity.Minus(attr1, attr2);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Modulo}
 */
affinity.mod = function(attr1, attr2){
    return new affinity.Modulo(attr1, attr2);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Multiplication}
 */
affinity.times = function(attr1, attr2){
    return new affinity.Multiplication(attr1, attr2);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Plus}
 */
affinity.plus = function(attr1, attr2){
    return new affinity.Plus(attr1, attr2);
};

/**
 * @param attr1
 * @param attr2
 * @returns {Functions.Numeric.Power}
 */
affinity.pow = function(attr1, attr2){
    return new affinity.Power(attr1, attr2);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Round}
 */
affinity.round = function(attr){
    return new affinity.Round(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Sine}
 */
affinity.sin = function(attr){
    return new affinity.Sine(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.SquareRoot}
 */
affinity.sqrt = function(attr){
    return new affinity.SquareRoot(attr);
};

/**
 * @param attr
 * @returns {Functions.Numeric.Tangent}
 */
affinity.tan = function(attr){
    return new affinity.Tangent(attr);
};
//endregion

//region String Functions

/**
 * @type {Functions.String.Length} 
 * @member Affinity
 */
affinity.Length = require('./affinity/functions/string/Length.js');

/**
 * @type {Functions.String.Lowercase} 
 * @member Affinity
 */
affinity.Lowercase = require('./affinity/functions/string/Lowercase.js');

/**
 * @type {Functions.String.Test} 
 * @member Affinity
 */
affinity.Test = require('./affinity/functions/string/Test.js');

/**
 * @type {Functions.String.Substring} 
 * @member Affinity
 */
affinity.Substring = require('./affinity/functions/string/Substring.js');

/**
 * @type {Functions.String.Uppercase} 
 * @member Affinity
 */
affinity.Uppercase = require('./affinity/functions/string/Uppercase.js');

/**
 * @param attr
 * @returns {Functions.String.Length}
 */
affinity.length = function(attr){
    return new affinity.Length(attr);
};

/**
 * @param attr
 * @returns {Functions.String.Lowercase}
 */
affinity.lowercase = function(attr){
    return new affinity.Lowercase(attr);
};

/**
 * @param attr
 * @param regex
 * @returns {Functions.String.Test}
 */
affinity.test = function(attr, regex){
    return new affinity.Test(attr, regex);
};

/**
 * @param attr
 * @param start
 * @param length
 * @returns {Functions.String.Substring}
 */
affinity.substr = function(attr, start, length){
    return new affinity.Length(attr, start, length);
};

/**
 * @param attr
 * @returns {Functions.String.Uppercase}
 */
affinity.uppercase = function(attr){
    return new affinity.Length(attr);
};
//endregion

//region Tuple Functions

/**
 * @type {Functions.Tuple.AttributeValue} 
 * @member Affinity
 */
affinity.TupleValue = require('./affinity/functions/tuple/Attribute.js');

/**
 * @param relation
 * @param attributeName
 * @returns {Functions.Tuple.AttributeValue}
 */
affinity.value = function(relation, attributeName){
    var result = new affinity.TupleValue(attributeName);
    result.type(relation.header().get(attributeName));
    return result;
};
//endregion

//region Date Functions

affinity.DayOfMonth = require('./affinity/functions/date/DayOfMonth.js');
affinity.DayOfMonth = require('./affinity/functions/date/DayOfMonth.js');
affinity.DayOfWeek = require('./affinity/functions/date/DayOfWeek.js');
affinity.DayOfYear = require('./affinity/functions/date/DayOfYear.js');
affinity.Hours = require('./affinity/functions/date/Hours.js');
affinity.Milliseconds = require('./affinity/functions/date/Milliseconds.js');
affinity.Minutes = require('./affinity/functions/date/Minutes.js');
affinity.Month = require('./affinity/functions/date/Month.js');
affinity.Seconds = require('./affinity/functions/date/Seconds.js');
affinity.Timestamp = require('./affinity/functions/date/Timestamp.js');
affinity.WeekOfYear = require('./affinity/functions/date/WeekOfYear.js');
affinity.Year = require('./affinity/functions/date/Year.js');
//endregion

affinity.count = function(){
    return new (require('./affinity/functions/aggregate/Count.js'));
};

//region Relational Operators

/**
 * @type {Operators.Composition} 
 * @member Affinity
 */
affinity.Composition = require('./affinity/algebra/Composition.js');

/**
 * @type {Operators.Difference} 
 * @member Affinity
 */
affinity.Difference = require('./affinity/algebra/Difference.js');

/**
 * @type {Operators.Extension} 
 * @member Affinity
 */
affinity.Extension = require('./affinity/algebra/Extension.js');

/**
 * @type {Operators.Group} 
 * @member Affinity
 */
affinity.Group = require('./affinity/algebra/Group.js');

/**
 * @type {Operators.Intersection} 
 * @member Affinity
 */
affinity.Intersection = require('./affinity/algebra/Intersection.js');

/**
 * @type {Operators.Join} 
 * @member Affinity
 */
affinity.Join = require('./affinity/algebra/Join.js');

/**
 * @type {Operators.Product} 
 * @member Affinity
 */
affinity.Product = require('./affinity/algebra/Product.js');

/**
 * @type {Operators.Projection} 
 * @member Affinity
 */
affinity.Projection = require('./affinity/algebra/Projection.js');

/**
 * @type {Operators.Rename} 
 * @member Affinity
 */
affinity.Rename = require('./affinity/algebra/Rename.js');

/**
 * @type {Operators.Restriction} 
 * @member Affinity
 */
affinity.Restriction = require('./affinity/algebra/Restriction.js');

/**
 * @type {Operators.SemiDifference} 
 * @member Affinity
 */
affinity.SemiDifference = require('./affinity/algebra/Semidifference.js');

/**
 * @type {Operators.SemiJoin} 
 * @member Affinity
 */
affinity.SemiJoin = require('./affinity/algebra/Semijoin.js');

/**
 * @type {Operators.Ungroup} 
 * @member Affinity
 */
affinity.Ungroup = require('./affinity/algebra/Ungroup.js');

/**
 * @type {Operators.Union} 
 * @member Affinity
 */
affinity.Union = require('./affinity/algebra/Union.js');

/**
 * @type {Operators.Unwrap} 
 * @member Affinity
 */
affinity.Unwrap = require('./affinity/algebra/Unwrap.js');

/**
 * @type {Operators.Wrap} 
 * @member Affinity
 */
affinity.Wrap = require('./affinity/algebra/Wrap.js');
//endregion

//region Constants

/**
 * @type {Relation} 
 * @member Affinity
 */
affinity.TABLE_DUM = new affinity.Relation([]);

/**
 * @type {Relation} 
 * @member Affinity
 */
affinity.TABLE_DEE = new affinity.Relation([], [
    []
]);
//endregion

module.exports = affinity;

},{"./affinity/Attribute.js":2,"./affinity/Function.js":5,"./affinity/Header.js":6,"./affinity/Index.js":7,"./affinity/Relation.js":9,"./affinity/Set.js":10,"./affinity/Tuple.js":11,"./affinity/algebra/Composition.js":13,"./affinity/algebra/Difference.js":14,"./affinity/algebra/Extension.js":15,"./affinity/algebra/Group.js":16,"./affinity/algebra/Intersection.js":17,"./affinity/algebra/Join.js":18,"./affinity/algebra/Product.js":19,"./affinity/algebra/Projection.js":20,"./affinity/algebra/Rename.js":21,"./affinity/algebra/Restriction.js":22,"./affinity/algebra/Semidifference.js":23,"./affinity/algebra/Semijoin.js":24,"./affinity/algebra/Ungroup.js":26,"./affinity/algebra/Union.js":27,"./affinity/algebra/Unwrap.js":28,"./affinity/algebra/Wrap.js":29,"./affinity/functions/aggregate/Count.js":33,"./affinity/functions/comparable/Equal.js":39,"./affinity/functions/comparable/GreaterThan.js":40,"./affinity/functions/comparable/GreaterThanEqual.js":41,"./affinity/functions/comparable/SmallerThan.js":42,"./affinity/functions/comparable/SmallerThanEqual.js":43,"./affinity/functions/connective/And.js":44,"./affinity/functions/connective/Not.js":45,"./affinity/functions/connective/Or.js":46,"./affinity/functions/date/DayOfMonth.js":47,"./affinity/functions/date/DayOfWeek.js":48,"./affinity/functions/date/DayOfYear.js":49,"./affinity/functions/date/Hours.js":50,"./affinity/functions/date/Milliseconds.js":51,"./affinity/functions/date/Minutes.js":52,"./affinity/functions/date/Month.js":53,"./affinity/functions/date/Seconds.js":54,"./affinity/functions/date/Timestamp.js":55,"./affinity/functions/date/WeekOfYear.js":56,"./affinity/functions/date/Year.js":57,"./affinity/functions/numeric/Absolute.js":58,"./affinity/functions/numeric/Ceil.js":59,"./affinity/functions/numeric/Cosine.js":60,"./affinity/functions/numeric/Division.js":61,"./affinity/functions/numeric/Exponential.js":62,"./affinity/functions/numeric/Floor.js":63,"./affinity/functions/numeric/Minus.js":64,"./affinity/functions/numeric/Modulo.js":65,"./affinity/functions/numeric/Multiplication.js":66,"./affinity/functions/numeric/Plus.js":67,"./affinity/functions/numeric/Power.js":68,"./affinity/functions/numeric/Round.js":69,"./affinity/functions/numeric/Sine.js":70,"./affinity/functions/numeric/SquareRoot.js":71,"./affinity/functions/numeric/Tangent.js":72,"./affinity/functions/string/Length.js":73,"./affinity/functions/string/Lowercase.js":74,"./affinity/functions/string/Substring.js":75,"./affinity/functions/string/Test.js":76,"./affinity/functions/string/Uppercase.js":77,"./affinity/functions/tuple/Attribute.js":78,"./affinity/types/Boolean":93,"./affinity/types/Date":94,"./affinity/types/Float":95,"./affinity/types/Integer":96,"./affinity/types/Object":98,"./affinity/types/String":99,"./affinity/types/Type.js":100}],102:[function(require,module,exports){
'use strict';

/**
 * Representation of a single EventEmitter function.
 *
 * @param {Function} fn Event handler to be called.
 * @param {Mixed} context Context for function execution.
 * @param {Boolean} once Only emit once
 * @api private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Minimal EventEmitter interface that is molded against the Node.js
 * EventEmitter interface.
 *
 * @constructor
 * @api public
 */
function EventEmitter() { /* Nothing to set */ }

/**
 * Holds the assigned EventEmitters by name.
 *
 * @type {Object}
 * @private
 */
EventEmitter.prototype._events = undefined;

/**
 * Return a list of assigned event listeners.
 *
 * @param {String} event The events that should be listed.
 * @returns {Array}
 * @api public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  if (!this._events || !this._events[event]) return [];
  if (this._events[event].fn) return [this._events[event].fn];

  for (var i = 0, l = this._events[event].length, ee = new Array(l); i < l; i++) {
    ee[i] = this._events[event][i].fn;
  }

  return ee;
};

/**
 * Emit an event to all registered event listeners.
 *
 * @param {String} event The name of the event.
 * @returns {Boolean} Indication if we've emitted an event.
 * @api public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  if (!this._events || !this._events[event]) return false;

  var listeners = this._events[event]
    , len = arguments.length
    , args
    , i;

  if ('function' === typeof listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Register a new EventListener for the given event.
 *
 * @param {String} event Name of the event.
 * @param {Functon} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  var listener = new EE(fn, context || this);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Add an EventListener that's only called once.
 *
 * @param {String} event Name of the event.
 * @param {Function} fn Callback function.
 * @param {Mixed} context The context of the function.
 * @api public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  var listener = new EE(fn, context || this, true);

  if (!this._events) this._events = {};
  if (!this._events[event]) this._events[event] = listener;
  else {
    if (!this._events[event].fn) this._events[event].push(listener);
    else this._events[event] = [
      this._events[event], listener
    ];
  }

  return this;
};

/**
 * Remove event listeners.
 *
 * @param {String} event The event we want to remove.
 * @param {Function} fn The listener that we need to find.
 * @param {Boolean} once Only remove once listeners.
 * @api public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, once) {
  if (!this._events || !this._events[event]) return this;

  var listeners = this._events[event]
    , events = [];

  if (fn) {
    if (listeners.fn && (listeners.fn !== fn || (once && !listeners.once))) {
      events.push(listeners);
    }
    if (!listeners.fn) for (var i = 0, length = listeners.length; i < length; i++) {
      if (listeners[i].fn !== fn || (once && !listeners[i].once)) {
        events.push(listeners[i]);
      }
    }
  }

  //
  // Reset the array, or remove it completely if we have no more listeners.
  //
  if (events.length) {
    this._events[event] = events.length === 1 ? events[0] : events;
  } else {
    delete this._events[event];
  }

  return this;
};

/**
 * Remove all listeners or only the listeners for the specified event.
 *
 * @param {String} event The event want to remove all listeners for.
 * @api public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  if (!this._events) return this;

  if (event) delete this._events[event];
  else this._events = {};

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// This function doesn't apply anymore.
//
EventEmitter.prototype.setMaxListeners = function setMaxListeners() {
  return this;
};

//
// Expose the module.
//
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.EventEmitter2 = EventEmitter;
EventEmitter.EventEmitter3 = EventEmitter;

//
// Expose the module.
//
module.exports = EventEmitter;

},{}],103:[function(require,module,exports){
(function (global){
/**
 * @license
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modern -o ./dist/lodash.js`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre ES5 environments */
  var undefined;

  /** Used to pool arrays and objects used internally */
  var arrayPool = [],
      objectPool = [];

  /** Used to generate unique IDs */
  var idCounter = 0;

  /** Used to prefix keys to avoid issues with `__proto__` and properties on `Object.prototype` */
  var keyPrefix = +new Date + '';

  /** Used as the size when optimizations are enabled for large arrays */
  var largeArraySize = 75;

  /** Used as the max size of the `arrayPool` and `objectPool` */
  var maxPoolSize = 40;

  /** Used to detect and test whitespace */
  var whitespace = (
    // whitespace
    ' \t\x0B\f\xA0\ufeff' +

    // line terminators
    '\n\r\u2028\u2029' +

    // unicode category "Zs" space separators
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to match empty string literals in compiled template source */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match ES6 template delimiters
   * http://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-string-literals
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match regexp flags from their coerced string values */
  var reFlags = /\w*$/;

  /** Used to detected named functions */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to match "interpolate" template delimiters */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match leading whitespace and zeros to be removed */
  var reLeadingSpacesAndZeros = RegExp('^[' + whitespace + ']*0+(?=.$)');

  /** Used to ensure capturing order of template delimiters */
  var reNoMatch = /($^)/;

  /** Used to detect functions containing a `this` reference */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals */
  var reUnescapedString = /['\n\r\t\u2028\u2029\\]/g;

  /** Used to assign default `context` object properties */
  var contextProps = [
    'Array', 'Boolean', 'Date', 'Function', 'Math', 'Number', 'Object',
    'RegExp', 'String', '_', 'attachEvent', 'clearTimeout', 'isFinite', 'isNaN',
    'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify */
  var templateCounter = 0;

  /** `Object#toString` result shortcuts */
  var argsClass = '[object Arguments]',
      arrayClass = '[object Array]',
      boolClass = '[object Boolean]',
      dateClass = '[object Date]',
      funcClass = '[object Function]',
      numberClass = '[object Number]',
      objectClass = '[object Object]',
      regexpClass = '[object RegExp]',
      stringClass = '[object String]';

  /** Used to identify object classifications that `_.clone` supports */
  var cloneableClasses = {};
  cloneableClasses[funcClass] = false;
  cloneableClasses[argsClass] = cloneableClasses[arrayClass] =
  cloneableClasses[boolClass] = cloneableClasses[dateClass] =
  cloneableClasses[numberClass] = cloneableClasses[objectClass] =
  cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;

  /** Used as an internal `_.debounce` options object */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used as the property descriptor for `__bindData__` */
  var descriptor = {
    'configurable': false,
    'enumerable': false,
    'value': null,
    'writable': false
  };

  /** Used to determine if values are of the language type Object */
  var objectTypes = {
    'boolean': false,
    'function': true,
    'object': true,
    'number': false,
    'string': false,
    'undefined': false
  };

  /** Used to escape characters for inclusion in compiled string literals */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\t': 't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Used as a reference to the global object */
  var root = (objectTypes[typeof window] && window) || this;

  /** Detect free variable `exports` */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module` */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports` */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
  var freeGlobal = objectTypes[typeof global] && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
    root = freeGlobal;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `_.indexOf` without support for binary searches
   * or `fromIndex` constraints.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value or `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    var index = (fromIndex || 0) - 1,
        length = array ? array.length : 0;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * An implementation of `_.contains` for cache objects that mimics the return
   * signature of `_.indexOf` by returning `0` if the value is found, else `-1`.
   *
   * @private
   * @param {Object} cache The cache object to inspect.
   * @param {*} value The value to search for.
   * @returns {number} Returns `0` if `value` is found, else `-1`.
   */
  function cacheIndexOf(cache, value) {
    var type = typeof value;
    cache = cache.cache;

    if (type == 'boolean' || value == null) {
      return cache[value] ? 0 : -1;
    }
    if (type != 'number' && type != 'string') {
      type = 'object';
    }
    var key = type == 'number' ? value : keyPrefix + value;
    cache = (cache = cache[type]) && cache[key];

    return type == 'object'
      ? (cache && baseIndexOf(cache, value) > -1 ? 0 : -1)
      : (cache ? 0 : -1);
  }

  /**
   * Adds a given value to the corresponding cache object.
   *
   * @private
   * @param {*} value The value to add to the cache.
   */
  function cachePush(value) {
    var cache = this.cache,
        type = typeof value;

    if (type == 'boolean' || value == null) {
      cache[value] = true;
    } else {
      if (type != 'number' && type != 'string') {
        type = 'object';
      }
      var key = type == 'number' ? value : keyPrefix + value,
          typeCache = cache[type] || (cache[type] = {});

      if (type == 'object') {
        (typeCache[key] || (typeCache[key] = [])).push(value);
      } else {
        typeCache[key] = true;
      }
    }
  }

  /**
   * Used by `_.max` and `_.min` as the default callback when a given
   * collection is a string value.
   *
   * @private
   * @param {string} value The character to inspect.
   * @returns {number} Returns the code unit of given character.
   */
  function charAtCallback(value) {
    return value.charCodeAt(0);
  }

  /**
   * Used by `sortBy` to compare transformed `collection` elements, stable sorting
   * them in ascending order.
   *
   * @private
   * @param {Object} a The object to compare to `b`.
   * @param {Object} b The object to compare to `a`.
   * @returns {number} Returns the sort order indicator of `1` or `-1`.
   */
  function compareAscending(a, b) {
    var ac = a.criteria,
        bc = b.criteria,
        index = -1,
        length = ac.length;

    while (++index < length) {
      var value = ac[index],
          other = bc[index];

      if (value !== other) {
        if (value > other || typeof value == 'undefined') {
          return 1;
        }
        if (value < other || typeof other == 'undefined') {
          return -1;
        }
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to return the same value for
    // `a` and `b`. See https://github.com/jashkenas/underscore/pull/1247
    //
    // This also ensures a stable sort in V8 and other engines.
    // See http://code.google.com/p/v8/issues/detail?id=90
    return a.index - b.index;
  }

  /**
   * Creates a cache object to optimize linear searches of large arrays.
   *
   * @private
   * @param {Array} [array=[]] The array to search.
   * @returns {null|Object} Returns the cache object or `null` if caching should not be used.
   */
  function createCache(array) {
    var index = -1,
        length = array.length,
        first = array[0],
        mid = array[(length / 2) | 0],
        last = array[length - 1];

    if (first && typeof first == 'object' &&
        mid && typeof mid == 'object' && last && typeof last == 'object') {
      return false;
    }
    var cache = getObject();
    cache['false'] = cache['null'] = cache['true'] = cache['undefined'] = false;

    var result = getObject();
    result.array = array;
    result.cache = cache;
    result.push = cachePush;

    while (++index < length) {
      result.push(array[index]);
    }
    return result;
  }

  /**
   * Used by `template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} match The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(match) {
    return '\\' + stringEscapes[match];
  }

  /**
   * Gets an array from the array pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Array} The array from the pool.
   */
  function getArray() {
    return arrayPool.pop() || [];
  }

  /**
   * Gets an object from the object pool or creates a new one if the pool is empty.
   *
   * @private
   * @returns {Object} The object from the pool.
   */
  function getObject() {
    return objectPool.pop() || {
      'array': null,
      'cache': null,
      'criteria': null,
      'false': false,
      'index': 0,
      'null': false,
      'number': null,
      'object': null,
      'push': null,
      'string': null,
      'true': false,
      'undefined': false,
      'value': null
    };
  }

  /**
   * Releases the given array back to the array pool.
   *
   * @private
   * @param {Array} [array] The array to release.
   */
  function releaseArray(array) {
    array.length = 0;
    if (arrayPool.length < maxPoolSize) {
      arrayPool.push(array);
    }
  }

  /**
   * Releases the given object back to the object pool.
   *
   * @private
   * @param {Object} [object] The object to release.
   */
  function releaseObject(object) {
    var cache = object.cache;
    if (cache) {
      releaseObject(cache);
    }
    object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;
    if (objectPool.length < maxPoolSize) {
      objectPool.push(object);
    }
  }

  /**
   * Slices the `collection` from the `start` index up to, but not including,
   * the `end` index.
   *
   * Note: This function is used instead of `Array#slice` to support node lists
   * in IE < 9 and to ensure dense arrays are returned.
   *
   * @private
   * @param {Array|Object|string} collection The collection to slice.
   * @param {number} start The start index.
   * @param {number} end The end index.
   * @returns {Array} Returns the new array.
   */
  function slice(array, start, end) {
    start || (start = 0);
    if (typeof end == 'undefined') {
      end = array ? array.length : 0;
    }
    var index = -1,
        length = end - start || 0,
        result = Array(length < 0 ? 0 : length);

    while (++index < length) {
      result[index] = array[start + index];
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new `lodash` function using the given context object.
   *
   * @static
   * @memberOf _
   * @category Utilities
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns the `lodash` function.
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See http://es5.github.io/#x11.1.5.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references */
    var Array = context.Array,
        Boolean = context.Boolean,
        Date = context.Date,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /**
     * Used for `Array` method references.
     *
     * Normally `Array.prototype` would suffice, however, using an array literal
     * avoids issues in Narwhal.
     */
    var arrayRef = [];

    /** Used for native method references */
    var objectProto = Object.prototype;

    /** Used to restore the original `_` reference in `noConflict` */
    var oldDash = context._;

    /** Used to resolve the internal [[Class]] of values */
    var toString = objectProto.toString;

    /** Used to detect if a method is native */
    var reNative = RegExp('^' +
      String(toString)
        .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
        .replace(/toString| for [^\]]+/g, '.*?') + '$'
    );

    /** Native method shortcuts */
    var ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        fnToString = Function.prototype.toString,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        hasOwnProperty = objectProto.hasOwnProperty,
        push = arrayRef.push,
        setTimeout = context.setTimeout,
        splice = arrayRef.splice,
        unshift = arrayRef.unshift;

    /** Used to set meta data on functions */
    var defineProperty = (function() {
      // IE 8 only accepts DOM elements
      try {
        var o = {},
            func = isNative(func = Object.defineProperty) && func,
            result = func(o, o, o) && func;
      } catch(e) { }
      return result;
    }());

    /* Native method shortcuts for methods with the same name as other `lodash` methods */
    var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeIsFinite = context.isFinite,
        nativeIsNaN = context.isNaN,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used to lookup a built-in constructor by [[Class]] */
    var ctorByClass = {};
    ctorByClass[arrayClass] = Array;
    ctorByClass[boolClass] = Boolean;
    ctorByClass[dateClass] = Date;
    ctorByClass[funcClass] = Function;
    ctorByClass[objectClass] = Object;
    ctorByClass[numberClass] = Number;
    ctorByClass[regexpClass] = RegExp;
    ctorByClass[stringClass] = String;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps the given value to enable intuitive
     * method chaining.
     *
     * In addition to Lo-Dash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * Chaining is supported in custom builds as long as the `value` method is
     * implicitly or explicitly included in the build.
     *
     * The chainable wrapper functions are:
     * `after`, `assign`, `bind`, `bindAll`, `bindKey`, `chain`, `compact`,
     * `compose`, `concat`, `countBy`, `create`, `createCallback`, `curry`,
     * `debounce`, `defaults`, `defer`, `delay`, `difference`, `filter`, `flatten`,
     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
     * `invoke`, `keys`, `map`, `max`, `memoize`, `merge`, `min`, `object`, `omit`,
     * `once`, `pairs`, `partial`, `partialRight`, `pick`, `pluck`, `pull`, `push`,
     * `range`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `splice`, `tap`, `throttle`, `times`, `toArray`, `transform`,
     * `union`, `uniq`, `unshift`, `unzip`, `values`, `where`, `without`, `wrap`,
     * and `zip`
     *
     * The non-chainable wrapper functions are:
     * `clone`, `cloneDeep`, `contains`, `escape`, `every`, `find`, `findIndex`,
     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `has`, `identity`,
     * `indexOf`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
     * `isEmpty`, `isEqual`, `isFinite`, `isFunction`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`, `join`,
     * `lastIndexOf`, `mixin`, `noConflict`, `parseInt`, `pop`, `random`, `reduce`,
     * `reduceRight`, `result`, `shift`, `size`, `some`, `sortedIndex`, `runInContext`,
     * `template`, `unescape`, `uniqueId`, and `value`
     *
     * The wrapper functions `first` and `last` return wrapped values when `n` is
     * provided, otherwise they return unwrapped values.
     *
     * Explicit chaining can be enabled by using the `_.chain` method.
     *
     * @name _
     * @constructor
     * @category Chaining
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(num) {
     *   return num * num;
     * });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      // don't wrap if already wrapped, even if wrapped by a different `lodash` constructor
      return (value && typeof value == 'object' && !isArray(value) && hasOwnProperty.call(value, '__wrapped__'))
       ? value
       : new lodashWrapper(value);
    }

    /**
     * A fast path for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap in a `lodash` instance.
     * @param {boolean} chainAll A flag to enable chaining for all methods
     * @returns {Object} Returns a `lodash` instance.
     */
    function lodashWrapper(value, chainAll) {
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }
    // ensure `new lodashWrapper` is an instance of `lodash`
    lodashWrapper.prototype = lodash.prototype;

    /**
     * An object used to flag environments features.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    /**
     * Detect if functions can be decompiled by `Function#toString`
     * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

    /**
     * Detect if `Function#name` is supported (all but IE).
     *
     * @memberOf _.support
     * @type boolean
     */
    support.funcNames = typeof Function.name == 'string';

    /**
     * By default, the template delimiters used by Lo-Dash are similar to those in
     * embedded Ruby (ERB). Change the following template settings to use alternative
     * delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': /<%-([\s\S]+?)%>/g,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': /<%([\s\S]+?)%>/g,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*--------------------------------------------------------------------------*/

    /**
     * The base implementation of `_.bind` that creates the bound function and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new bound function.
     */
    function baseBind(bindData) {
      var func = bindData[0],
          partialArgs = bindData[2],
          thisArg = bindData[4];

      function bound() {
        // `Function#bind` spec
        // http://es5.github.io/#x15.3.4.5
        if (partialArgs) {
          // avoid `arguments` object deoptimizations by using `slice` instead
          // of `Array.prototype.slice.call` and not assigning `arguments` to a
          // variable as a ternary expression
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        // mimic the constructor's `return` behavior
        // http://es5.github.io/#x13.2.2
        if (this instanceof bound) {
          // ensure `new bound` is an instance of `func`
          var thisBinding = baseCreate(func.prototype),
              result = func.apply(thisBinding, args || arguments);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisArg, args || arguments);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.clone` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, callback, stackA, stackB) {
      if (callback) {
        var result = callback(value);
        if (typeof result != 'undefined') {
          return result;
        }
      }
      // inspect [[Class]]
      var isObj = isObject(value);
      if (isObj) {
        var className = toString.call(value);
        if (!cloneableClasses[className]) {
          return value;
        }
        var ctor = ctorByClass[className];
        switch (className) {
          case boolClass:
          case dateClass:
            return new ctor(+value);

          case numberClass:
          case stringClass:
            return new ctor(value);

          case regexpClass:
            result = ctor(value.source, reFlags.exec(value));
            result.lastIndex = value.lastIndex;
            return result;
        }
      } else {
        return value;
      }
      var isArr = isArray(value);
      if (isDeep) {
        // check for circular references and return corresponding clone
        var initedStack = !stackA;
        stackA || (stackA = getArray());
        stackB || (stackB = getArray());

        var length = stackA.length;
        while (length--) {
          if (stackA[length] == value) {
            return stackB[length];
          }
        }
        result = isArr ? ctor(value.length) : {};
      }
      else {
        result = isArr ? slice(value) : assign({}, value);
      }
      // add array properties assigned by `RegExp#exec`
      if (isArr) {
        if (hasOwnProperty.call(value, 'index')) {
          result.index = value.index;
        }
        if (hasOwnProperty.call(value, 'input')) {
          result.input = value.input;
        }
      }
      // exit for shallow clone
      if (!isDeep) {
        return result;
      }
      // add the source value to the stack of traversed objects
      // and associate it with its clone
      stackA.push(value);
      stackB.push(result);

      // recursively populate clone (susceptible to call stack limits)
      (isArr ? forEach : forOwn)(value, function(objValue, key) {
        result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);
      });

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    function baseCreate(prototype, properties) {
      return isObject(prototype) ? nativeCreate(prototype) : {};
    }
    // fallback for browsers without `Object.create`
    if (!nativeCreate) {
      baseCreate = (function() {
        function Object() {}
        return function(prototype) {
          if (isObject(prototype)) {
            Object.prototype = prototype;
            var result = new Object;
            Object.prototype = null;
          }
          return result || context.Object();
        };
      }());
    }

    /**
     * The base implementation of `_.createCallback` without support for creating
     * "_.pluck" or "_.where" style callbacks.
     *
     * @private
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     */
    function baseCreateCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      // exit early for no `thisArg` or already bound by `Function#bind`
      if (typeof thisArg == 'undefined' || !('prototype' in func)) {
        return func;
      }
      var bindData = func.__bindData__;
      if (typeof bindData == 'undefined') {
        if (support.funcNames) {
          bindData = !func.name;
        }
        bindData = bindData || !support.funcDecomp;
        if (!bindData) {
          var source = fnToString.call(func);
          if (!support.funcNames) {
            bindData = !reFuncName.test(source);
          }
          if (!bindData) {
            // checks if `func` references the `this` keyword and stores the result
            bindData = reThis.test(source);
            setBindData(func, bindData);
          }
        }
      }
      // exit early if there are no `this` references or `func` is bound
      if (bindData === false || (bindData !== true && bindData[1] & 1)) {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 2: return function(a, b) {
          return func.call(thisArg, a, b);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
      }
      return bind(func, thisArg);
    }

    /**
     * The base implementation of `createWrapper` that creates the wrapper and
     * sets its meta data.
     *
     * @private
     * @param {Array} bindData The bind data array.
     * @returns {Function} Returns the new function.
     */
    function baseCreateWrapper(bindData) {
      var func = bindData[0],
          bitmask = bindData[1],
          partialArgs = bindData[2],
          partialRightArgs = bindData[3],
          thisArg = bindData[4],
          arity = bindData[5];

      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          key = func;

      function bound() {
        var thisBinding = isBind ? thisArg : this;
        if (partialArgs) {
          var args = slice(partialArgs);
          push.apply(args, arguments);
        }
        if (partialRightArgs || isCurry) {
          args || (args = slice(arguments));
          if (partialRightArgs) {
            push.apply(args, partialRightArgs);
          }
          if (isCurry && args.length < arity) {
            bitmask |= 16 & ~32;
            return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
          }
        }
        args || (args = arguments);
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (this instanceof bound) {
          thisBinding = baseCreate(func.prototype);
          var result = func.apply(thisBinding, args);
          return isObject(result) ? result : thisBinding;
        }
        return func.apply(thisBinding, args);
      }
      setBindData(bound, bindData);
      return bound;
    }

    /**
     * The base implementation of `_.difference` that accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {Array} [values] The array of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     */
    function baseDifference(array, values) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          isLarge = length >= largeArraySize && indexOf === baseIndexOf,
          result = [];

      if (isLarge) {
        var cache = createCache(values);
        if (cache) {
          indexOf = cacheIndexOf;
          values = cache;
        } else {
          isLarge = false;
        }
      }
      while (++index < length) {
        var value = array[index];
        if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      if (isLarge) {
        releaseObject(values);
      }
      return result;
    }

    /**
     * The base implementation of `_.flatten` without support for callback
     * shorthands or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {boolean} [isStrict=false] A flag to restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns a new flattened array.
     */
    function baseFlatten(array, isShallow, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (value && typeof value == 'object' && typeof value.length == 'number'
            && (isArray(value) || isArguments(value))) {
          // recursively flatten arrays (susceptible to call stack limits)
          if (!isShallow) {
            value = baseFlatten(value, isShallow, isStrict);
          }
          var valIndex = -1,
              valLength = value.length,
              resIndex = result.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[resIndex++] = value[valIndex];
          }
        } else if (!isStrict) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.isEqual`, without support for `thisArg` binding,
     * that allows partial "_.where" style comparisons.
     *
     * @private
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {Function} [isWhere=false] A flag to indicate performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `a` objects.
     * @param {Array} [stackB=[]] Tracks traversed `b` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(a, b, callback, isWhere, stackA, stackB) {
      // used to indicate that when comparing objects, `a` has at least the properties of `b`
      if (callback) {
        var result = callback(a, b);
        if (typeof result != 'undefined') {
          return !!result;
        }
      }
      // exit early for identical values
      if (a === b) {
        // treat `+0` vs. `-0` as not equal
        return a !== 0 || (1 / a == 1 / b);
      }
      var type = typeof a,
          otherType = typeof b;

      // exit early for unlike primitive values
      if (a === a &&
          !(a && objectTypes[type]) &&
          !(b && objectTypes[otherType])) {
        return false;
      }
      // exit early for `null` and `undefined` avoiding ES3's Function#call behavior
      // http://es5.github.io/#x15.3.4.4
      if (a == null || b == null) {
        return a === b;
      }
      // compare [[Class]] names
      var className = toString.call(a),
          otherClass = toString.call(b);

      if (className == argsClass) {
        className = objectClass;
      }
      if (otherClass == argsClass) {
        otherClass = objectClass;
      }
      if (className != otherClass) {
        return false;
      }
      switch (className) {
        case boolClass:
        case dateClass:
          // coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal
          return +a == +b;

        case numberClass:
          // treat `NaN` vs. `NaN` as equal
          return (a != +a)
            ? b != +b
            // but treat `+0` vs. `-0` as not equal
            : (a == 0 ? (1 / a == 1 / b) : a == +b);

        case regexpClass:
        case stringClass:
          // coerce regexes to strings (http://es5.github.io/#x15.10.6.4)
          // treat string primitives and their corresponding object instances as equal
          return a == String(b);
      }
      var isArr = className == arrayClass;
      if (!isArr) {
        // unwrap any `lodash` wrapped values
        var aWrapped = hasOwnProperty.call(a, '__wrapped__'),
            bWrapped = hasOwnProperty.call(b, '__wrapped__');

        if (aWrapped || bWrapped) {
          return baseIsEqual(aWrapped ? a.__wrapped__ : a, bWrapped ? b.__wrapped__ : b, callback, isWhere, stackA, stackB);
        }
        // exit for functions and DOM nodes
        if (className != objectClass) {
          return false;
        }
        // in older versions of Opera, `arguments` objects have `Array` constructors
        var ctorA = a.constructor,
            ctorB = b.constructor;

        // non `Object` object instances with different constructors are not equal
        if (ctorA != ctorB &&
              !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) &&
              ('constructor' in a && 'constructor' in b)
            ) {
          return false;
        }
      }
      // assume cyclic structures are equal
      // the algorithm for detecting cyclic structures is adapted from ES 5.1
      // section 15.12.3, abstract operation `JO` (http://es5.github.io/#x15.12.3)
      var initedStack = !stackA;
      stackA || (stackA = getArray());
      stackB || (stackB = getArray());

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == a) {
          return stackB[length] == b;
        }
      }
      var size = 0;
      result = true;

      // add `a` and `b` to the stack of traversed objects
      stackA.push(a);
      stackB.push(b);

      // recursively compare objects and arrays (susceptible to call stack limits)
      if (isArr) {
        // compare lengths to determine if a deep comparison is necessary
        length = a.length;
        size = b.length;
        result = size == length;

        if (result || isWhere) {
          // deep compare the contents, ignoring non-numeric properties
          while (size--) {
            var index = length,
                value = b[size];

            if (isWhere) {
              while (index--) {
                if ((result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB))) {
                  break;
                }
              }
            } else if (!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))) {
              break;
            }
          }
        }
      }
      else {
        // deep compare objects using `forIn`, instead of `forOwn`, to avoid `Object.keys`
        // which, in this case, is more costly
        forIn(b, function(value, key, b) {
          if (hasOwnProperty.call(b, key)) {
            // count the number of properties.
            size++;
            // deep compare each property value.
            return (result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB));
          }
        });

        if (result && !isWhere) {
          // ensure both objects have the same number of properties
          forIn(a, function(value, key, a) {
            if (hasOwnProperty.call(a, key)) {
              // `size` will be `-1` if `a` has more properties than `b`
              return (result = --size > -1);
            }
          });
        }
      }
      stackA.pop();
      stackB.pop();

      if (initedStack) {
        releaseArray(stackA);
        releaseArray(stackB);
      }
      return result;
    }

    /**
     * The base implementation of `_.merge` without argument juggling or support
     * for `thisArg` binding.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     */
    function baseMerge(object, source, callback, stackA, stackB) {
      (isArray(source) ? forEach : forOwn)(source, function(source, key) {
        var found,
            isArr,
            result = source,
            value = object[key];

        if (source && ((isArr = isArray(source)) || isPlainObject(source))) {
          // avoid merging previously merged cyclic sources
          var stackLength = stackA.length;
          while (stackLength--) {
            if ((found = stackA[stackLength] == source)) {
              value = stackB[stackLength];
              break;
            }
          }
          if (!found) {
            var isShallow;
            if (callback) {
              result = callback(value, source);
              if ((isShallow = typeof result != 'undefined')) {
                value = result;
              }
            }
            if (!isShallow) {
              value = isArr
                ? (isArray(value) ? value : [])
                : (isPlainObject(value) ? value : {});
            }
            // add `source` and associated `value` to the stack of traversed objects
            stackA.push(source);
            stackB.push(value);

            // recursively merge objects and arrays (susceptible to call stack limits)
            if (!isShallow) {
              baseMerge(value, source, callback, stackA, stackB);
            }
          }
        }
        else {
          if (callback) {
            result = callback(value, source);
            if (typeof result == 'undefined') {
              result = source;
            }
          }
          if (typeof result != 'undefined') {
            value = result;
          }
        }
        object[key] = value;
      });
    }

    /**
     * The base implementation of `_.random` without argument juggling or support
     * for returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns a random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * or `thisArg` binding.
     *
     * @private
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function} [callback] The function called per iteration.
     * @returns {Array} Returns a duplicate-value-free array.
     */
    function baseUniq(array, isSorted, callback) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array ? array.length : 0,
          result = [];

      var isLarge = !isSorted && length >= largeArraySize && indexOf === baseIndexOf,
          seen = (callback || isLarge) ? getArray() : result;

      if (isLarge) {
        var cache = createCache(seen);
        indexOf = cacheIndexOf;
        seen = cache;
      }
      while (++index < length) {
        var value = array[index],
            computed = callback ? callback(value, index, array) : value;

        if (isSorted
              ? !index || seen[seen.length - 1] !== computed
              : indexOf(seen, computed) < 0
            ) {
          if (callback || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      if (isLarge) {
        releaseArray(seen.array);
        releaseObject(seen);
      } else if (callback) {
        releaseArray(seen);
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an object composed
     * of keys generated from the results of running each element of the collection
     * through a callback. The given `setter` function sets the keys and values
     * of the composed object.
     *
     * @private
     * @param {Function} setter The setter function.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter) {
      return function(collection, callback, thisArg) {
        var result = {};
        callback = lodash.createCallback(callback, thisArg, 3);

        var index = -1,
            length = collection ? collection.length : 0;

        if (typeof length == 'number') {
          while (++index < length) {
            var value = collection[index];
            setter(result, value, callback(value, index, collection), collection);
          }
        } else {
          forOwn(collection, function(value, key, collection) {
            setter(result, value, callback(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that, when called, either curries or invokes `func`
     * with an optional `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of method flags to compose.
     *  The bitmask may be composed of the following flags:
     *  1 - `_.bind`
     *  2 - `_.bindKey`
     *  4 - `_.curry`
     *  8 - `_.curry` (bound)
     *  16 - `_.partial`
     *  32 - `_.partialRight`
     * @param {Array} [partialArgs] An array of arguments to prepend to those
     *  provided to the new function.
     * @param {Array} [partialRightArgs] An array of arguments to append to those
     *  provided to the new function.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new function.
     */
    function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
      var isBind = bitmask & 1,
          isBindKey = bitmask & 2,
          isCurry = bitmask & 4,
          isCurryBound = bitmask & 8,
          isPartial = bitmask & 16,
          isPartialRight = bitmask & 32;

      if (!isBindKey && !isFunction(func)) {
        throw new TypeError;
      }
      if (isPartial && !partialArgs.length) {
        bitmask &= ~16;
        isPartial = partialArgs = false;
      }
      if (isPartialRight && !partialRightArgs.length) {
        bitmask &= ~32;
        isPartialRight = partialRightArgs = false;
      }
      var bindData = func && func.__bindData__;
      if (bindData && bindData !== true) {
        // clone `bindData`
        bindData = slice(bindData);
        if (bindData[2]) {
          bindData[2] = slice(bindData[2]);
        }
        if (bindData[3]) {
          bindData[3] = slice(bindData[3]);
        }
        // set `thisBinding` is not previously bound
        if (isBind && !(bindData[1] & 1)) {
          bindData[4] = thisArg;
        }
        // set if previously bound but not currently (subsequent curried functions)
        if (!isBind && bindData[1] & 1) {
          bitmask |= 8;
        }
        // set curried arity if not yet set
        if (isCurry && !(bindData[1] & 4)) {
          bindData[5] = arity;
        }
        // append partial left arguments
        if (isPartial) {
          push.apply(bindData[2] || (bindData[2] = []), partialArgs);
        }
        // append partial right arguments
        if (isPartialRight) {
          unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
        }
        // merge flags
        bindData[1] |= bitmask;
        return createWrapper.apply(null, bindData);
      }
      // fast path for `_.bind`
      var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
      return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
    }

    /**
     * Used by `escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} match The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeHtmlChar(match) {
      return htmlEscapes[match];
    }

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized, this method returns the custom method, otherwise it returns
     * the `baseIndexOf` function.
     *
     * @private
     * @returns {Function} Returns the "indexOf" function.
     */
    function getIndexOf() {
      var result = (result = lodash.indexOf) === indexOf ? baseIndexOf : result;
      return result;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
     */
    function isNative(value) {
      return typeof value == 'function' && reNative.test(value);
    }

    /**
     * Sets `this` binding data on a given function.
     *
     * @private
     * @param {Function} func The function to set data on.
     * @param {Array} value The data array to set.
     */
    var setBindData = !defineProperty ? noop : function(func, value) {
      descriptor.value = value;
      defineProperty(func, '__bindData__', descriptor);
    };

    /**
     * A fallback implementation of `isPlainObject` which checks if a given value
     * is an object created by the `Object` constructor, assuming objects created
     * by the `Object` constructor have no inherited enumerable properties and that
     * there are no `Object.prototype` extensions.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var ctor,
          result;

      // avoid non Object objects, `arguments` objects, and DOM elements
      if (!(value && toString.call(value) == objectClass) ||
          (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))) {
        return false;
      }
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      forIn(value, function(value, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * Used by `unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} match The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    function unescapeHtmlChar(match) {
      return htmlUnescapes[match];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Checks if `value` is an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an `arguments` object, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })(1, 2, 3);
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == argsClass || false;
    }

    /**
     * Checks if `value` is an array.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an array, else `false`.
     * @example
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     *
     * _.isArray([1, 2, 3]);
     * // => true
     */
    var isArray = nativeIsArray || function(value) {
      return value && typeof value == 'object' && typeof value.length == 'number' &&
        toString.call(value) == arrayClass || false;
    };

    /**
     * A fallback implementation of `Object.keys` which produces an array of the
     * given object's own enumerable property names.
     *
     * @private
     * @type Function
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     */
    var shimKeys = function(object) {
      var index, iterable = object, result = [];
      if (!iterable) return result;
      if (!(objectTypes[typeof object])) return result;
        for (index in iterable) {
          if (hasOwnProperty.call(iterable, index)) {
            result.push(index);
          }
        }
      return result
    };

    /**
     * Creates an array composed of the own enumerable property names of an object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names.
     * @example
     *
     * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
     * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (!isObject(object)) {
        return [];
      }
      return nativeKeys(object);
    };

    /**
     * Used to convert characters to HTML entities:
     *
     * Though the `>` character is escaped for symmetry, characters like `>` and `/`
     * don't require escaping in HTML and have no special meaning unless they're part
     * of a tag or an unquoted attribute value.
     * http://mathiasbynens.be/notes/ambiguous-ampersands (under "semi-related fun fact")
     */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to convert HTML entities to characters */
    var htmlUnescapes = invert(htmlEscapes);

    /** Used to match HTML entities and HTML characters */
    var reEscapedHtml = RegExp('(' + keys(htmlUnescapes).join('|') + ')', 'g'),
        reUnescapedHtml = RegExp('[' + keys(htmlEscapes).join('') + ']', 'g');

    /*--------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources will overwrite property assignments of previous
     * sources. If a callback is provided it will be executed to produce the
     * assigned values. The callback is bound to `thisArg` and invoked with two
     * arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @type Function
     * @alias extend
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
     * // => { 'name': 'fred', 'employer': 'slate' }
     *
     * var defaults = _.partialRight(_.assign, function(a, b) {
     *   return typeof a == 'undefined' ? b : a;
     * });
     *
     * var object = { 'name': 'barney' };
     * defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var assign = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
        var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
      } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
        callback = args[--argsLength];
      }
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
        }
        }
      }
      return result
    };

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects will also
     * be cloned, otherwise they will be assigned by reference. If a callback
     * is provided it will be executed to produce the cloned values. If the
     * callback returns `undefined` cloning will be handled by the method instead.
     * The callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep=false] Specify a deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var shallow = _.clone(characters);
     * shallow[0] === characters[0];
     * // => true
     *
     * var deep = _.clone(characters, true);
     * deep[0] === characters[0];
     * // => false
     *
     * _.mixin({
     *   'clone': _.partialRight(_.clone, function(value) {
     *     return _.isElement(value) ? value.cloneNode(false) : undefined;
     *   })
     * });
     *
     * var clone = _.clone(document.body);
     * clone.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, callback, thisArg) {
      // allows working with "Collections" methods without using their `index`
      // and `collection` arguments for `isDeep` and `callback`
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = callback;
        callback = isDeep;
        isDeep = false;
      }
      return baseClone(value, isDeep, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates a deep clone of `value`. If a callback is provided it will be
     * executed to produce the cloned values. If the callback returns `undefined`
     * cloning will be handled by the method instead. The callback is bound to
     * `thisArg` and invoked with one argument; (value).
     *
     * Note: This method is loosely based on the structured clone algorithm. Functions
     * and DOM nodes are **not** cloned. The enumerable properties of `arguments` objects and
     * objects created by constructors other than `Object` are cloned to plain `Object` objects.
     * See http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to deep clone.
     * @param {Function} [callback] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * var deep = _.cloneDeep(characters);
     * deep[0] === characters[0];
     * // => false
     *
     * var view = {
     *   'label': 'docs',
     *   'node': element
     * };
     *
     * var clone = _.cloneDeep(view, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * clone.node == view.node;
     * // => false
     */
    function cloneDeep(value, callback, thisArg) {
      return baseClone(value, true, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 1));
    }

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties ? assign(result, properties) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property will be ignored.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param- {Object} [guard] Allows working with `_.reduce` without using its
     *  `key` and `object` arguments as sources.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var object = { 'name': 'barney' };
     * _.defaults(object, { 'name': 'fred', 'employer': 'slate' });
     * // => { 'name': 'barney', 'employer': 'slate' }
     */
    var defaults = function(object, source, guard) {
      var index, iterable = object, result = iterable;
      if (!iterable) return result;
      var args = arguments,
          argsIndex = 0,
          argsLength = typeof guard == 'number' ? 2 : args.length;
      while (++argsIndex < argsLength) {
        iterable = args[argsIndex];
        if (iterable && objectTypes[typeof iterable]) {
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (typeof result[index] == 'undefined') result[index] = iterable[index];
        }
        }
      }
      return result
    };

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': false },
     *   'fred': {    'age': 40, 'blocked': true },
     *   'pebbles': { 'age': 1,  'blocked': false }
     * };
     *
     * _.findKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => 'barney' (property order is not guaranteed across environments)
     *
     * // using "_.where" callback shorthand
     * _.findKey(characters, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using "_.pluck" callback shorthand
     * _.findKey(characters, 'blocked');
     * // => 'fred'
     */
    function findKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwn(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [callback=identity] The function called per
     *  iteration. If a property name or object is provided it will be used to
     *  create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {string|undefined} Returns the key of the found element, else `undefined`.
     * @example
     *
     * var characters = {
     *   'barney': {  'age': 36, 'blocked': true },
     *   'fred': {    'age': 40, 'blocked': false },
     *   'pebbles': { 'age': 1,  'blocked': true }
     * };
     *
     * _.findLastKey(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => returns `pebbles`, assuming `_.findKey` returns `barney`
     *
     * // using "_.where" callback shorthand
     * _.findLastKey(characters, { 'age': 40 });
     * // => 'fred'
     *
     * // using "_.pluck" callback shorthand
     * _.findLastKey(characters, 'blocked');
     * // => 'pebbles'
     */
    function findLastKey(object, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forOwnRight(object, function(value, key, object) {
        if (callback(value, key, object)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over own and inherited enumerable properties of an object,
     * executing the callback for each property. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, key, object). Callbacks may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forIn(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'x', 'y', and 'move' (property order is not guaranteed across environments)
     */
    var forIn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        for (index in iterable) {
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forIn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * Shape.prototype.move = function(x, y) {
     *   this.x += x;
     *   this.y += y;
     * };
     *
     * _.forInRight(new Shape, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'move', 'y', and 'x' assuming `_.forIn ` logs 'x', 'y', and 'move'
     */
    function forInRight(object, callback, thisArg) {
      var pairs = [];

      forIn(object, function(value, key) {
        pairs.push(key, value);
      });

      var length = pairs.length;
      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(pairs[length--], pairs[length], object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Iterates over own enumerable properties of an object, executing the callback
     * for each property. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, key, object). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (property order is not guaranteed across environments)
     */
    var forOwn = function(collection, callback, thisArg) {
      var index, iterable = collection, result = iterable;
      if (!iterable) return result;
      if (!objectTypes[typeof iterable]) return result;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
        var ownIndex = -1,
            ownProps = objectTypes[typeof iterable] && keys(iterable),
            length = ownProps ? ownProps.length : 0;

        while (++ownIndex < length) {
          index = ownProps[ownIndex];
          if (callback(iterable[index], index, collection) === false) return result;
        }
      return result
    };

    /**
     * This method is like `_.forOwn` except that it iterates over elements
     * of a `collection` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(num, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, callback, thisArg) {
      var props = keys(object),
          length = props.length;

      callback = baseCreateCallback(callback, thisArg, 3);
      while (length--) {
        var key = props[length];
        if (callback(object[key], key, object) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * Creates a sorted array of property names of all enumerable properties,
     * own and inherited, of `object` that have function values.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property names that have function values.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', 'bindAll', 'clone', 'compact', 'compose', ...]
     */
    function functions(object) {
      var result = [];
      forIn(object, function(value, key) {
        if (isFunction(value)) {
          result.push(key);
        }
      });
      return result.sort();
    }

    /**
     * Checks if the specified property name exists as a direct property of `object`,
     * instead of an inherited property.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to check.
     * @returns {boolean} Returns `true` if key is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of the given object.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the created inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     */
    function invert(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        result[object[key]] = key;
      }
      return result;
    }

    /**
     * Checks if `value` is a boolean value.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a boolean value, else `false`.
     * @example
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        value && typeof value == 'object' && toString.call(value) == boolClass || false;
    }

    /**
     * Checks if `value` is a date.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a date, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     */
    function isDate(value) {
      return value && typeof value == 'object' && toString.call(value) == dateClass || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     */
    function isElement(value) {
      return value && value.nodeType === 1 || false;
    }

    /**
     * Checks if `value` is empty. Arrays, strings, or `arguments` objects with a
     * length of `0` and objects with no own enumerable properties are considered
     * "empty".
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if the `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({});
     * // => true
     *
     * _.isEmpty('');
     * // => true
     */
    function isEmpty(value) {
      var result = true;
      if (!value) {
        return result;
      }
      var className = toString.call(value),
          length = value.length;

      if ((className == arrayClass || className == stringClass || className == argsClass ) ||
          (className == objectClass && typeof length == 'number' && isFunction(value.splice))) {
        return !length;
      }
      forOwn(value, function() {
        return (result = false);
      });
      return result;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent to each other. If a callback is provided it will be executed
     * to compare values. If the callback returns `undefined` comparisons will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (a, b).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} a The value to compare.
     * @param {*} b The other value to compare.
     * @param {Function} [callback] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var copy = { 'name': 'fred' };
     *
     * object == copy;
     * // => false
     *
     * _.isEqual(object, copy);
     * // => true
     *
     * var words = ['hello', 'goodbye'];
     * var otherWords = ['hi', 'goodbye'];
     *
     * _.isEqual(words, otherWords, function(a, b) {
     *   var reGreet = /^(?:hello|hi)$/i,
     *       aGreet = _.isString(a) && reGreet.test(a),
     *       bGreet = _.isString(b) && reGreet.test(b);
     *
     *   return (aGreet || bGreet) ? (aGreet == bGreet) : undefined;
     * });
     * // => true
     */
    function isEqual(a, b, callback, thisArg) {
      return baseIsEqual(a, b, typeof callback == 'function' && baseCreateCallback(callback, thisArg, 2));
    }

    /**
     * Checks if `value` is, or can be coerced to, a finite number.
     *
     * Note: This is not the same as native `isFinite` which will return true for
     * booleans and empty strings. See http://es5.github.io/#x15.1.2.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is finite, else `false`.
     * @example
     *
     * _.isFinite(-101);
     * // => true
     *
     * _.isFinite('10');
     * // => true
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite('');
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    function isFinite(value) {
      return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));
    }

    /**
     * Checks if `value` is a function.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     */
    function isFunction(value) {
      return typeof value == 'function';
    }

    /**
     * Checks if `value` is the language type of Object.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // check if the value is the ECMAScript language type of Object
      // http://es5.github.io/#x8
      // and avoid a V8 bug
      // http://code.google.com/p/v8/issues/detail?id=2291
      return !!(value && objectTypes[typeof value]);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * Note: This is not the same as native `isNaN` which will return `true` for
     * `undefined` and other non-numeric values. See http://es5.github.io/#x15.1.2.4.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // `NaN` as a primitive is the only value that is not equal to itself
      // (perform the [[Class]] check first to avoid errors with some host objects in IE)
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(undefined);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is a number.
     *
     * Note: `NaN` is considered a number. See http://es5.github.io/#x8.5.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(8.4 * 5);
     * // => true
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        value && typeof value == 'object' && toString.call(value) == numberClass || false;
    }

    /**
     * Checks if `value` is an object created by the `Object` constructor.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * _.isPlainObject(new Shape);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && toString.call(value) == objectClass)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is a regular expression.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a regular expression, else `false`.
     * @example
     *
     * _.isRegExp(/fred/);
     * // => true
     */
    function isRegExp(value) {
      return value && typeof value == 'object' && toString.call(value) == regexpClass || false;
    }

    /**
     * Checks if `value` is a string.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is a string, else `false`.
     * @example
     *
     * _.isString('fred');
     * // => true
     */
    function isString(value) {
      return typeof value == 'string' ||
        value && typeof value == 'object' && toString.call(value) == stringClass || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if the `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new object with values of the results of each `callback` execution.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(num) { return num * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var characters = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // using "_.pluck" callback shorthand
     * _.mapValues(characters, 'age');
     * // => { 'fred': 40, 'pebbles': 1 }
     */
    function mapValues(object, callback, thisArg) {
      var result = {};
      callback = lodash.createCallback(callback, thisArg, 3);

      forOwn(object, function(value, key, object) {
        result[key] = callback(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * will overwrite property assignments of previous sources. If a callback is
     * provided it will be executed to produce the merged values of the destination
     * and source properties. If the callback returns `undefined` merging will
     * be handled by the method instead. The callback is bound to `thisArg` and
     * invoked with two arguments; (objectValue, sourceValue).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The destination object.
     * @param {...Object} [source] The source objects.
     * @param {Function} [callback] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the destination object.
     * @example
     *
     * var names = {
     *   'characters': [
     *     { 'name': 'barney' },
     *     { 'name': 'fred' }
     *   ]
     * };
     *
     * var ages = {
     *   'characters': [
     *     { 'age': 36 },
     *     { 'age': 40 }
     *   ]
     * };
     *
     * _.merge(names, ages);
     * // => { 'characters': [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred', 'age': 40 }] }
     *
     * var food = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var otherFood = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(food, otherFood, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot] }
     */
    function merge(object) {
      var args = arguments,
          length = 2;

      if (!isObject(object)) {
        return object;
      }
      // allows working with `_.reduce` and `_.reduceRight` without using
      // their `index` and `collection` arguments
      if (typeof args[2] != 'number') {
        length = args.length;
      }
      if (length > 3 && typeof args[length - 2] == 'function') {
        var callback = baseCreateCallback(args[--length - 1], args[length--], 2);
      } else if (length > 2 && typeof args[length - 1] == 'function') {
        callback = args[--length];
      }
      var sources = slice(arguments, 1, length),
          index = -1,
          stackA = getArray(),
          stackB = getArray();

      while (++index < length) {
        baseMerge(object, sources[index], callback, stackA, stackB);
      }
      releaseArray(stackA);
      releaseArray(stackB);
      return object;
    }

    /**
     * Creates a shallow clone of `object` excluding the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` omitting the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The properties to omit or the
     *  function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object without the omitted properties.
     * @example
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, 'age');
     * // => { 'name': 'fred' }
     *
     * _.omit({ 'name': 'fred', 'age': 40 }, function(value) {
     *   return typeof value == 'number';
     * });
     * // => { 'name': 'fred' }
     */
    function omit(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var props = [];
        forIn(object, function(value, key) {
          props.push(key);
        });
        props = baseDifference(props, baseFlatten(arguments, true, false, 1));

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];
          result[key] = object[key];
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (!callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * Creates a two dimensional array of an object's key-value pairs,
     * i.e. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (property order is not guaranteed across environments)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates a shallow clone of `object` composed of the specified properties.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If a callback is provided it will be executed for each
     * property of `object` picking the properties the callback returns truey
     * for. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The source object.
     * @param {Function|...string|string[]} [callback] The function called per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns an object composed of the picked properties.
     * @example
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, 'name');
     * // => { 'name': 'fred' }
     *
     * _.pick({ 'name': 'fred', '_userid': 'fred1' }, function(value, key) {
     *   return key.charAt(0) != '_';
     * });
     * // => { 'name': 'fred' }
     */
    function pick(object, callback, thisArg) {
      var result = {};
      if (typeof callback != 'function') {
        var index = -1,
            props = baseFlatten(arguments, true, false, 1),
            length = isObject(object) ? props.length : 0;

        while (++index < length) {
          var key = props[index];
          if (key in object) {
            result[key] = object[key];
          }
        }
      } else {
        callback = lodash.createCallback(callback, thisArg, 3);
        forIn(object, function(value, key, object) {
          if (callback(value, key, object)) {
            result[key] = value;
          }
        });
      }
      return result;
    }

    /**
     * An alternative to `_.reduce` this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable properties through a callback, with each callback execution
     * potentially mutating the `accumulator` object. The callback is bound to
     * `thisArg` and invoked with four arguments; (accumulator, value, key, object).
     * Callbacks may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], function(result, num) {
     *   num *= num;
     *   if (num % 2) {
     *     return result.push(num) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, callback, accumulator, thisArg) {
      var isArr = isArray(object);
      if (accumulator == null) {
        if (isArr) {
          accumulator = [];
        } else {
          var ctor = object && object.constructor,
              proto = ctor && ctor.prototype;

          accumulator = baseCreate(proto);
        }
      }
      if (callback) {
        callback = lodash.createCallback(callback, thisArg, 4);
        (isArr ? forEach : forOwn)(object, function(value, index, object) {
          return callback(accumulator, value, index, object);
        });
      }
      return accumulator;
    }

    /**
     * Creates an array composed of the own enumerable property values of `object`.
     *
     * @static
     * @memberOf _
     * @category Objects
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns an array of property values.
     * @example
     *
     * _.values({ 'one': 1, 'two': 2, 'three': 3 });
     * // => [1, 2, 3] (property order is not guaranteed across environments)
     */
    function values(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array of elements from the specified indexes, or keys, of the
     * `collection`. Indexes may be specified as individual arguments or as arrays
     * of indexes.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [index] The indexes of `collection`
     *   to retrieve, specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns a new array of elements corresponding to the
     *  provided indexes.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var args = arguments,
          index = -1,
          props = baseFlatten(args, true, false, 1),
          length = (args[2] && args[2][args[1]] === collection) ? 1 : props.length,
          result = Array(length);

      while(++index < length) {
        result[index] = collection[props[index]];
      }
      return result;
    }

    /**
     * Checks if a given value is present in a collection using strict equality
     * for comparisons, i.e. `===`. If `fromIndex` is negative, it is used as the
     * offset from the end of the collection.
     *
     * @static
     * @memberOf _
     * @alias include
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {*} target The value to check for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if the `target` element is found, else `false`.
     * @example
     *
     * _.contains([1, 2, 3], 1);
     * // => true
     *
     * _.contains([1, 2, 3], 1, 2);
     * // => false
     *
     * _.contains({ 'name': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.contains('pebbles', 'eb');
     * // => true
     */
    function contains(collection, target, fromIndex) {
      var index = -1,
          indexOf = getIndexOf(),
          length = collection ? collection.length : 0,
          result = false;

      fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex) || 0;
      if (isArray(collection)) {
        result = indexOf(collection, target, fromIndex) > -1;
      } else if (typeof length == 'number') {
        result = (isString(collection) ? collection.indexOf(target, fromIndex) : indexOf(collection, target, fromIndex)) > -1;
      } else {
        forOwn(collection, function(value) {
          if (++index >= fromIndex) {
            return !(result = value === target);
          }
        });
      }
      return result;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through the callback. The corresponding value
     * of each key is the number of times the key was returned by the callback.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key]++ : result[key] = 1);
    });

    /**
     * Checks if the given callback returns truey value for **all** elements of
     * a collection. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if all elements passed the callback check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.every(characters, 'age');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.every(characters, { 'age': 36 });
     * // => false
     */
    function every(collection, callback, thisArg) {
      var result = true;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if (!(result = !!callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return (result = !!callback(value, index, collection));
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning an array of all elements
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that passed the callback check.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [2, 4, 6]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.filter(characters, 'blocked');
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     *
     * // using "_.where" callback shorthand
     * _.filter(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     */
    function filter(collection, callback, thisArg) {
      var result = [];
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            result.push(value);
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result.push(value);
          }
        });
      }
      return result;
    }

    /**
     * Iterates over elements of a collection, returning the first element that
     * the callback returns truey for. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect, findWhere
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.find(characters, function(chr) {
     *   return chr.age < 40;
     * });
     * // => { 'name': 'barney', 'age': 36, 'blocked': false }
     *
     * // using "_.where" callback shorthand
     * _.find(characters, { 'age': 1 });
     * // =>  { 'name': 'pebbles', 'age': 1, 'blocked': false }
     *
     * // using "_.pluck" callback shorthand
     * _.find(characters, 'blocked');
     * // => { 'name': 'fred', 'age': 40, 'blocked': true }
     */
    function find(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          var value = collection[index];
          if (callback(value, index, collection)) {
            return value;
          }
        }
      } else {
        var result;
        forOwn(collection, function(value, index, collection) {
          if (callback(value, index, collection)) {
            result = value;
            return false;
          }
        });
        return result;
      }
    }

    /**
     * This method is like `_.find` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the found element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(num) {
     *   return num % 2 == 1;
     * });
     * // => 3
     */
    function findLast(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);
      forEachRight(collection, function(value, index, collection) {
        if (callback(value, index, collection)) {
          result = value;
          return false;
        }
      });
      return result;
    }

    /**
     * Iterates over elements of a collection, executing the callback for each
     * element. The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Callbacks may exit iteration early by
     * explicitly returning `false`.
     *
     * Note: As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(num) { console.log(num); }).join(',');
     * // => logs each number and returns '1,2,3'
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { console.log(num); });
     * // => logs each number and returns the object (property order is not guaranteed across environments)
     */
    function forEach(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (++index < length) {
          if (callback(collection[index], index, collection) === false) {
            break;
          }
        }
      } else {
        forOwn(collection, callback);
      }
      return collection;
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(num) { console.log(num); }).join(',');
     * // => logs each number from right to left and returns '3,2,1'
     */
    function forEachRight(collection, callback, thisArg) {
      var length = collection ? collection.length : 0;
      callback = callback && typeof thisArg == 'undefined' ? callback : baseCreateCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        while (length--) {
          if (callback(collection[length], length, collection) === false) {
            break;
          }
        }
      } else {
        var props = keys(collection);
        length = props.length;
        forOwn(collection, function(value, key, collection) {
          key = props ? props[--length] : --length;
          return callback(collection[key], key, collection);
        });
      }
      return collection;
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of a collection through the callback. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return Math.floor(num); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(num) { return this.floor(num); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using "_.pluck" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      (hasOwnProperty.call(result, key) ? result[key] : result[key] = []).push(value);
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of the collection through the given callback. The corresponding
     * value of each key is the last element responsible for generating the key.
     * The callback is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keys = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keys, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keys, function(key) { return String.fromCharCode(key.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(characters, function(key) { this.fromCharCode(key.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in the `collection`
     * returning an array of the results of each invoked method. Additional arguments
     * will be provided to each invoked method. If `methodName` is a function it
     * will be invoked for, and `this` bound to, each element in the `collection`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [arg] Arguments to invoke the method with.
     * @returns {Array} Returns a new array of the results of each invoked method.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      var args = slice(arguments, 2),
          index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        result[++index] = (isFunc ? methodName : value[methodName]).apply(value, args);
      });
      return result;
    }

    /**
     * Creates an array of values by running each element in the collection
     * through the callback. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of the results of each `callback` execution.
     * @example
     *
     * _.map([1, 2, 3], function(num) { return num * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(num) { return num * 3; });
     * // => [3, 6, 9] (property order is not guaranteed across environments)
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(characters, 'name');
     * // => ['barney', 'fred']
     */
    function map(collection, callback, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      if (typeof length == 'number') {
        var result = Array(length);
        while (++index < length) {
          result[index] = callback(collection[index], index, collection);
        }
      } else {
        result = [];
        forOwn(collection, function(value, key, collection) {
          result[++index] = callback(value, key, collection);
        });
      }
      return result;
    }

    /**
     * Retrieves the maximum value of a collection. If the collection is empty or
     * falsey `-Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.max(characters, function(chr) { return chr.age; });
     * // => { 'name': 'fred', 'age': 40 };
     *
     * // using "_.pluck" callback shorthand
     * _.max(characters, 'age');
     * // => { 'name': 'fred', 'age': 40 };
     */
    function max(collection, callback, thisArg) {
      var computed = -Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value > result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current > computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the minimum value of a collection. If the collection is empty or
     * falsey `Infinity` is returned. If a callback is provided it will be executed
     * for each value in the collection to generate the criterion by which the value
     * is ranked. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.min(characters, function(chr) { return chr.age; });
     * // => { 'name': 'barney', 'age': 36 };
     *
     * // using "_.pluck" callback shorthand
     * _.min(characters, 'age');
     * // => { 'name': 'barney', 'age': 36 };
     */
    function min(collection, callback, thisArg) {
      var computed = Infinity,
          result = computed;

      // allows working with functions like `_.map` without using
      // their `index` argument as a callback
      if (typeof callback != 'function' && thisArg && thisArg[callback] === collection) {
        callback = null;
      }
      if (callback == null && isArray(collection)) {
        var index = -1,
            length = collection.length;

        while (++index < length) {
          var value = collection[index];
          if (value < result) {
            result = value;
          }
        }
      } else {
        callback = (callback == null && isString(collection))
          ? charAtCallback
          : lodash.createCallback(callback, thisArg, 3);

        forEach(collection, function(value, index, collection) {
          var current = callback(value, index, collection);
          if (current < computed) {
            computed = current;
            result = value;
          }
        });
      }
      return result;
    }

    /**
     * Retrieves the value of a specified property from all elements in the collection.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} property The name of the property to pluck.
     * @returns {Array} Returns a new array of property values.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(characters, 'name');
     * // => ['barney', 'fred']
     */
    var pluck = map;

    /**
     * Reduces a collection to a value which is the accumulated result of running
     * each element in the collection through the callback, where each successive
     * callback execution consumes the return value of the previous execution. If
     * `accumulator` is not provided the first element of the collection will be
     * used as the initial `accumulator` value. The callback is bound to `thisArg`
     * and invoked with four arguments; (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, num) {
     *   return sum + num;
     * });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, num, key) {
     *   result[key] = num * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function reduce(collection, callback, accumulator, thisArg) {
      if (!collection) return accumulator;
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);

      var index = -1,
          length = collection.length;

      if (typeof length == 'number') {
        if (noaccum) {
          accumulator = collection[++index];
        }
        while (++index < length) {
          accumulator = callback(accumulator, collection[index], index, collection);
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          accumulator = noaccum
            ? (noaccum = false, value)
            : callback(accumulator, value, index, collection)
        });
      }
      return accumulator;
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [callback=identity] The function called per iteration.
     * @param {*} [accumulator] Initial value of the accumulator.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var list = [[0, 1], [2, 3], [4, 5]];
     * var flat = _.reduceRight(list, function(a, b) { return a.concat(b); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, callback, accumulator, thisArg) {
      var noaccum = arguments.length < 3;
      callback = lodash.createCallback(callback, thisArg, 4);
      forEachRight(collection, function(value, index, collection) {
        accumulator = noaccum
          ? (noaccum = false, value)
          : callback(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The opposite of `_.filter` this method returns the elements of a
     * collection that the callback does **not** return truey for.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of elements that failed the callback check.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4, 5, 6], function(num) { return num % 2 == 0; });
     * // => [1, 3, 5]
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.reject(characters, 'blocked');
     * // => [{ 'name': 'barney', 'age': 36, 'blocked': false }]
     *
     * // using "_.where" callback shorthand
     * _.reject(characters, { 'age': 36 });
     * // => [{ 'name': 'fred', 'age': 40, 'blocked': true }]
     */
    function reject(collection, callback, thisArg) {
      callback = lodash.createCallback(callback, thisArg, 3);
      return filter(collection, function(value, index, collection) {
        return !callback(value, index, collection);
      });
    }

    /**
     * Retrieves a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Allows working with functions like `_.map`
     *  without using their `index` arguments as `n`.
     * @returns {Array} Returns the random sample(s) of `collection`.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (collection && typeof collection.length != 'number') {
        collection = values(collection);
      }
      if (n == null || guard) {
        return collection ? collection[baseRandom(0, collection.length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(nativeMax(0, n), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See http://en.wikipedia.org/wiki/Fisher-Yates_shuffle.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns a new shuffled collection.
     * @example
     *
     * _.shuffle([1, 2, 3, 4, 5, 6]);
     * // => [4, 1, 6, 3, 5, 2]
     */
    function shuffle(collection) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      forEach(collection, function(value) {
        var rand = baseRandom(0, ++index);
        result[index] = result[rand];
        result[rand] = value;
      });
      return result;
    }

    /**
     * Gets the size of the `collection` by returning `collection.length` for arrays
     * and array-like objects or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns `collection.length` or number of own enumerable properties.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return typeof length == 'number' ? length : keys(collection).length;
    }

    /**
     * Checks if the callback returns a truey value for **any** element of a
     * collection. The function returns as soon as it finds a passing value and
     * does not iterate over the entire collection. The callback is bound to
     * `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {boolean} Returns `true` if any element passed the callback check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'blocked': false },
     *   { 'name': 'fred',   'age': 40, 'blocked': true }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.some(characters, 'blocked');
     * // => true
     *
     * // using "_.where" callback shorthand
     * _.some(characters, { 'age': 1 });
     * // => false
     */
    function some(collection, callback, thisArg) {
      var result;
      callback = lodash.createCallback(callback, thisArg, 3);

      var index = -1,
          length = collection ? collection.length : 0;

      if (typeof length == 'number') {
        while (++index < length) {
          if ((result = callback(collection[index], index, collection))) {
            break;
          }
        }
      } else {
        forOwn(collection, function(value, index, collection) {
          return !(result = callback(value, index, collection));
        });
      }
      return !!result;
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through the callback. This method
     * performs a stable sort, that is, it will preserve the original sort order
     * of equal elements. The callback is bound to `thisArg` and invoked with
     * three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an array of property names is provided for `callback` the collection
     * will be sorted by each property value.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of sorted elements.
     * @example
     *
     * _.sortBy([1, 2, 3], function(num) { return Math.sin(num); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(num) { return this.sin(num); }, Math);
     * // => [3, 1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'barney',  'age': 26 },
     *   { 'name': 'fred',    'age': 30 }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.map(_.sortBy(characters, 'age'), _.values);
     * // => [['barney', 26], ['fred', 30], ['barney', 36], ['fred', 40]]
     *
     * // sorting by multiple properties
     * _.map(_.sortBy(characters, ['name', 'age']), _.values);
     * // = > [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortBy(collection, callback, thisArg) {
      var index = -1,
          isArr = isArray(callback),
          length = collection ? collection.length : 0,
          result = Array(typeof length == 'number' ? length : 0);

      if (!isArr) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      forEach(collection, function(value, key, collection) {
        var object = result[++index] = getObject();
        if (isArr) {
          object.criteria = map(callback, function(key) { return value[key]; });
        } else {
          (object.criteria = getArray())[0] = callback(value, key, collection);
        }
        object.index = index;
        object.value = value;
      });

      length = result.length;
      result.sort(compareAscending);
      while (length--) {
        var object = result[length];
        result[length] = object.value;
        if (!isArr) {
          releaseArray(object.criteria);
        }
        releaseObject(object);
      }
      return result;
    }

    /**
     * Converts the `collection` to an array.
     *
     * @static
     * @memberOf _
     * @category Collections
     * @param {Array|Object|string} collection The collection to convert.
     * @returns {Array} Returns the new converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3, 4);
     * // => [2, 3, 4]
     */
    function toArray(collection) {
      if (collection && typeof collection.length == 'number') {
        return slice(collection);
      }
      return values(collection);
    }

    /**
     * Performs a deep comparison of each element in a `collection` to the given
     * `properties` object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Collections
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Object} props The object of property values to filter by.
     * @returns {Array} Returns a new array of elements that have the given properties.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.where(characters, { 'age': 36 });
     * // => [{ 'name': 'barney', 'age': 36, 'pets': ['hoppy'] }]
     *
     * _.where(characters, { 'pets': ['dino'] });
     * // => [{ 'name': 'fred', 'age': 40, 'pets': ['baby puss', 'dino'] }]
     */
    var where = filter;

    /*--------------------------------------------------------------------------*/

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are all falsey.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to compact.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using strict
     * equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
     * // => [1, 3, 4]
     */
    function difference(array) {
      return baseDifference(array, baseFlatten(arguments, true, true, 1));
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element that passes the callback check, instead of the element itself.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': false },
     *   { 'name': 'fred',    'age': 40, 'blocked': true },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': false }
     * ];
     *
     * _.findIndex(characters, function(chr) {
     *   return chr.age < 20;
     * });
     * // => 2
     *
     * // using "_.where" callback shorthand
     * _.findIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findIndex(characters, 'blocked');
     * // => 1
     */
    function findIndex(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        if (callback(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of a `collection` from right to left.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36, 'blocked': true },
     *   { 'name': 'fred',    'age': 40, 'blocked': false },
     *   { 'name': 'pebbles', 'age': 1,  'blocked': true }
     * ];
     *
     * _.findLastIndex(characters, function(chr) {
     *   return chr.age > 30;
     * });
     * // => 1
     *
     * // using "_.where" callback shorthand
     * _.findLastIndex(characters, { 'age': 36 });
     * // => 0
     *
     * // using "_.pluck" callback shorthand
     * _.findLastIndex(characters, 'blocked');
     * // => 2
     */
    function findLastIndex(array, callback, thisArg) {
      var length = array ? array.length : 0;
      callback = lodash.createCallback(callback, thisArg, 3);
      while (length--) {
        if (callback(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element or first `n` elements of an array. If a callback
     * is provided elements at the beginning of the array are returned as long
     * as the callback returns truey. The callback is bound to `thisArg` and
     * invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias head, take
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the first element(s) of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.first([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [1, 2]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false, 'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.first(characters, 'blocked');
     * // => [{ 'name': 'barney', 'blocked': true, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.first(characters, { 'employer': 'slate' }), 'name');
     * // => ['barney', 'fred']
     */
    function first(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = -1;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[0] : undefined;
        }
      }
      return slice(array, 0, nativeMin(nativeMax(0, n), length));
    }

    /**
     * Flattens a nested array (the nesting can be to any depth). If `isShallow`
     * is truey, the array will only be flattened a single level. If a callback
     * is provided each element of the array is passed through the callback before
     * flattening. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to flatten.
     * @param {boolean} [isShallow=false] A flag to restrict flattening to a single level.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     *
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, [[4]]];
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 30, 'pets': ['hoppy'] },
     *   { 'name': 'fred',   'age': 40, 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.flatten(characters, 'pets');
     * // => ['hoppy', 'baby puss', 'dino']
     */
    function flatten(array, isShallow, callback, thisArg) {
      // juggle arguments
      if (typeof isShallow != 'boolean' && isShallow != null) {
        thisArg = callback;
        callback = (typeof isShallow != 'function' && thisArg && thisArg[isShallow] === array) ? null : isShallow;
        isShallow = false;
      }
      if (callback != null) {
        array = map(array, callback, thisArg);
      }
      return baseFlatten(array, isShallow);
    }

    /**
     * Gets the index at which the first occurrence of `value` is found using
     * strict equality for comparisons, i.e. `===`. If the array is already sorted
     * providing `true` for `fromIndex` will run a faster binary search.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * _.indexOf([1, 1, 2, 2, 3, 3], 2, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      if (typeof fromIndex == 'number') {
        var length = array ? array.length : 0;
        fromIndex = (fromIndex < 0 ? nativeMax(0, length + fromIndex) : fromIndex || 0);
      } else if (fromIndex) {
        var index = sortedIndex(array, value);
        return array[index] === value ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element or last `n` elements of an array. If a
     * callback is provided elements at the end of the array are excluded from
     * the result as long as the callback returns truey. The callback is bound
     * to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     *
     * _.initial([1, 2, 3], 2);
     * // => [1]
     *
     * _.initial([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [1]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.initial(characters, 'blocked');
     * // => [{ 'name': 'barney',  'blocked': false, 'employer': 'slate' }]
     *
     * // using "_.where" callback shorthand
     * _.pluck(_.initial(characters, { 'employer': 'na' }), 'name');
     * // => ['barney', 'fred']
     */
    function initial(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : callback || n;
      }
      return slice(array, 0, nativeMin(nativeMax(0, length - n), length));
    }

    /**
     * Creates an array of unique values present in all provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = getArray(),
          indexOf = getIndexOf(),
          trustIndexOf = indexOf === baseIndexOf,
          seen = getArray();

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(trustIndexOf && value.length >= largeArraySize &&
            createCache(argsIndex ? args[argsIndex] : seen));
        }
      }
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [];

      outer:
      while (++index < length) {
        var cache = caches[0];
        value = array[index];

        if ((cache ? cacheIndexOf(cache, value) : indexOf(seen, value)) < 0) {
          argsIndex = argsLength;
          (cache || seen).push(value);
          while (--argsIndex) {
            cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          result.push(value);
        }
      }
      while (argsLength--) {
        cache = caches[argsLength];
        if (cache) {
          releaseObject(cache);
        }
      }
      releaseArray(caches);
      releaseArray(seen);
      return result;
    }

    /**
     * Gets the last element or last `n` elements of an array. If a callback is
     * provided elements at the end of the array are returned as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback] The function called
     *  per element or the number of elements to return. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {*} Returns the last element(s) of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     *
     * _.last([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.last([1, 2, 3], function(num) {
     *   return num > 1;
     * });
     * // => [2, 3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': false, 'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': true,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true,  'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.last(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.last(characters, { 'employer': 'na' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function last(array, callback, thisArg) {
      var n = 0,
          length = array ? array.length : 0;

      if (typeof callback != 'number' && callback != null) {
        var index = length;
        callback = lodash.createCallback(callback, thisArg, 3);
        while (index-- && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = callback;
        if (n == null || thisArg) {
          return array ? array[length - 1] : undefined;
        }
      }
      return slice(array, nativeMax(0, length - n));
    }

    /**
     * Gets the index at which the last occurrence of `value` is found using strict
     * equality for comparisons, i.e. `===`. If `fromIndex` is negative, it is used
     * as the offset from the end of the collection.
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value or `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var index = array ? array.length : 0;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(0, index + fromIndex) : nativeMin(fromIndex, index - 1)) + 1;
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from the given array using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {...*} [value] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull(array) {
      var args = arguments,
          argsIndex = 0,
          argsLength = args.length,
          length = array ? array.length : 0;

      while (++argsIndex < argsLength) {
        var index = -1,
            value = args[argsIndex];
        while (++index < length) {
          if (array[index] === value) {
            splice.call(array, index--, 1);
            length--;
          }
        }
      }
      return array;
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to but not including `end`. If `start` is less than `stop` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns a new range array.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      start = +start || 0;
      step = typeof step == 'number' ? step : (+step || 1);

      if (end == null) {
        end = start;
        start = 0;
      }
      // use `Array(length)` so engines like Chakra and V8 avoid slower modes
      // http://youtu.be/XAqIpGU8ZZk#t=17m25s
      var index = -1,
          length = nativeMax(0, ceil((end - start) / (step || 1))),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Removes all elements from an array that the callback returns truey for
     * and returns an array of removed elements. The callback is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4, 5, 6];
     * var evens = _.remove(array, function(num) { return num % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3, 5]
     *
     * console.log(evens);
     * // => [2, 4, 6]
     */
    function remove(array, callback, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      callback = lodash.createCallback(callback, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (callback(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * The opposite of `_.initial` this method gets all but the first element or
     * first `n` elements of an array. If a callback function is provided elements
     * at the beginning of the array are excluded from the result as long as the
     * callback returns truey. The callback is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias drop, tail
     * @category Arrays
     * @param {Array} array The array to query.
     * @param {Function|Object|number|string} [callback=1] The function called
     *  per element or the number of elements to exclude. If a property name or
     *  object is provided it will be used to create a "_.pluck" or "_.where"
     *  style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     *
     * _.rest([1, 2, 3], 2);
     * // => [3]
     *
     * _.rest([1, 2, 3], function(num) {
     *   return num < 3;
     * });
     * // => [3]
     *
     * var characters = [
     *   { 'name': 'barney',  'blocked': true,  'employer': 'slate' },
     *   { 'name': 'fred',    'blocked': false,  'employer': 'slate' },
     *   { 'name': 'pebbles', 'blocked': true, 'employer': 'na' }
     * ];
     *
     * // using "_.pluck" callback shorthand
     * _.pluck(_.rest(characters, 'blocked'), 'name');
     * // => ['fred', 'pebbles']
     *
     * // using "_.where" callback shorthand
     * _.rest(characters, { 'employer': 'slate' });
     * // => [{ 'name': 'pebbles', 'blocked': true, 'employer': 'na' }]
     */
    function rest(array, callback, thisArg) {
      if (typeof callback != 'number' && callback != null) {
        var n = 0,
            index = -1,
            length = array ? array.length : 0;

        callback = lodash.createCallback(callback, thisArg, 3);
        while (++index < length && callback(array[index], index, array)) {
          n++;
        }
      } else {
        n = (callback == null || thisArg) ? 1 : nativeMax(0, callback);
      }
      return slice(array, n);
    }

    /**
     * Uses a binary search to determine the smallest index at which a value
     * should be inserted into a given sorted array in order to maintain the sort
     * order of the array. If a callback is provided it will be executed for
     * `value` and each element of `array` to compute their sort ranking. The
     * callback is bound to `thisArg` and invoked with one argument; (value).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([20, 30, 50], 40);
     * // => 2
     *
     * // using "_.pluck" callback shorthand
     * _.sortedIndex([{ 'x': 20 }, { 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 2
     *
     * var dict = {
     *   'wordToNumber': { 'twenty': 20, 'thirty': 30, 'fourty': 40, 'fifty': 50 }
     * };
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return dict.wordToNumber[word];
     * });
     * // => 2
     *
     * _.sortedIndex(['twenty', 'thirty', 'fifty'], 'fourty', function(word) {
     *   return this.wordToNumber[word];
     * }, dict);
     * // => 2
     */
    function sortedIndex(array, value, callback, thisArg) {
      var low = 0,
          high = array ? array.length : low;

      // explicitly reference `identity` for better inlining in Firefox
      callback = callback ? lodash.createCallback(callback, thisArg, 1) : identity;
      value = callback(value);

      while (low < high) {
        var mid = (low + high) >>> 1;
        (callback(array[mid]) < value)
          ? low = mid + 1
          : high = mid;
      }
      return low;
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * strict equality for comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, true, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using strict equality
     * for comparisons, i.e. `===`. If the array is sorted, providing
     * `true` for `isSorted` will use a faster algorithm. If a callback is provided
     * each element of `array` is passed through the callback before uniqueness
     * is computed. The callback is bound to `thisArg` and invoked with three
     * arguments; (value, index, array).
     *
     * If a property name is provided for `callback` the created "_.pluck" style
     * callback will return the property value of the given element.
     *
     * If an object is provided for `callback` the created "_.where" style callback
     * will return `true` for elements that have the properties of the given object,
     * else `false`.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Arrays
     * @param {Array} array The array to process.
     * @param {boolean} [isSorted=false] A flag to indicate that `array` is sorted.
     * @param {Function|Object|string} [callback=identity] The function called
     *  per iteration. If a property name or object is provided it will be used
     *  to create a "_.pluck" or "_.where" style callback, respectively.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns a duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1, 3, 1]);
     * // => [1, 2, 3]
     *
     * _.uniq([1, 1, 2, 2, 3], true);
     * // => [1, 2, 3]
     *
     * _.uniq(['A', 'b', 'C', 'a', 'B', 'c'], function(letter) { return letter.toLowerCase(); });
     * // => ['A', 'b', 'C']
     *
     * _.uniq([1, 2.5, 3, 1.5, 2, 3.5], function(num) { return this.floor(num); }, Math);
     * // => [1, 2.5, 3]
     *
     * // using "_.pluck" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, callback, thisArg) {
      // juggle arguments
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = callback;
        callback = (typeof isSorted != 'function' && thisArg && thisArg[isSorted] === array) ? null : isSorted;
        isSorted = false;
      }
      if (callback != null) {
        callback = lodash.createCallback(callback, thisArg, 3);
      }
      return baseUniq(array, isSorted, callback);
    }

    /**
     * Creates an array excluding all provided values using strict equality for
     * comparisons, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {Array} array The array to filter.
     * @param {...*} [value] The values to exclude.
     * @returns {Array} Returns a new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, slice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See http://en.wikipedia.org/wiki/Symmetric_difference.
     *
     * @static
     * @memberOf _
     * @category Arrays
     * @param {...Array} [array] The arrays to inspect.
     * @returns {Array} Returns an array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseUniq(baseDifference(result, array).concat(baseDifference(array, result)))
            : array;
        }
      }
      return result || [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second
     * elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @alias unzip
     * @category Arrays
     * @param {...Array} [array] Arrays to process.
     * @returns {Array} Returns a new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var array = arguments.length > 1 ? arguments : arguments[0],
          index = -1,
          length = array ? max(pluck(array, 'length')) : 0,
          result = Array(length < 0 ? 0 : length);

      while (++index < length) {
        result[index] = pluck(array, index);
      }
      return result;
    }

    /**
     * Creates an object composed from arrays of `keys` and `values`. Provide
     * either a single two dimensional array, i.e. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of `keys` and one of corresponding `values`.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Arrays
     * @param {Array} keys The array of keys.
     * @param {Array} [values=[]] The array of values.
     * @returns {Object} Returns an object composed of the given keys and
     *  corresponding values.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(keys, values) {
      var index = -1,
          length = keys ? keys.length : 0,
          result = {};

      if (!values && length && !isArray(keys[0])) {
        values = [];
      }
      while (++index < length) {
        var key = keys[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that executes `func`, with  the `this` binding and
     * arguments of the created function, only after being called `n` times.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {number} n The number of times the function must be called before
     *  `func` is executed.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('Done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'Done saving!', after all saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with the `this`
     * binding of `thisArg` and prepends any additional `bind` arguments to those
     * provided to the bound function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var func = function(greeting) {
     *   return greeting + ' ' + this.name;
     * };
     *
     * func = _.bind(func, { 'name': 'fred' }, 'hi');
     * func();
     * // => 'hi fred'
     */
    function bind(func, thisArg) {
      return arguments.length > 2
        ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
        : createWrapper(func, 1, null, null, thisArg);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all the function properties
     * of `object` will be bound.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...string} [methodName] The object method names to
     *  bind, specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs', when the button is clicked
     */
    function bindAll(object) {
      var funcs = arguments.length > 1 ? baseFlatten(arguments, true, false, 1) : functions(object),
          index = -1,
          length = funcs.length;

      while (++index < length) {
        var key = funcs[index];
        object[key] = createWrapper(object[key], 1, null, null, object);
      }
      return object;
    }

    /**
     * Creates a function that, when called, invokes the method at `object[key]`
     * and prepends any additional `bindKey` arguments to those provided to the bound
     * function. This method differs from `_.bind` by allowing bound functions to
     * reference methods that will be redefined or don't yet exist.
     * See http://michaux.ca/articles/lazy-function-definition-pattern.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'name': 'fred',
     *   'greet': function(greeting) {
     *     return greeting + ' ' + this.name;
     *   }
     * };
     *
     * var func = _.bindKey(object, 'greet', 'hi');
     * func();
     * // => 'hi fred'
     *
     * object.greet = function(greeting) {
     *   return greeting + 'ya ' + this.name + '!';
     * };
     *
     * func();
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      return arguments.length > 2
        ? createWrapper(key, 19, slice(arguments, 2), null, object)
        : createWrapper(key, 3, null, null, object);
    }

    /**
     * Creates a function that is the composition of the provided functions,
     * where each function consumes the return value of the function that follows.
     * For example, composing the functions `f()`, `g()`, and `h()` produces `f(g(h()))`.
     * Each function is executed with the `this` binding of the composed function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {...Function} [func] Functions to compose.
     * @returns {Function} Returns the new composed function.
     * @example
     *
     * var realNameMap = {
     *   'pebbles': 'penelope'
     * };
     *
     * var format = function(name) {
     *   name = realNameMap[name.toLowerCase()] || name;
     *   return name.charAt(0).toUpperCase() + name.slice(1).toLowerCase();
     * };
     *
     * var greet = function(formatted) {
     *   return 'Hiya ' + formatted + '!';
     * };
     *
     * var welcome = _.compose(greet, format);
     * welcome('pebbles');
     * // => 'Hiya Penelope!'
     */
    function compose() {
      var funcs = arguments,
          length = funcs.length;

      while (length--) {
        if (!isFunction(funcs[length])) {
          throw new TypeError;
        }
      }
      return function() {
        var args = arguments,
            length = funcs.length;

        while (length--) {
          args = [funcs[length].apply(this, args)];
        }
        return args[0];
      };
    }

    /**
     * Creates a function which accepts one or more arguments of `func` that when
     * invoked either executes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` can be specified
     * if `func.length` is not sufficient.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var curried = _.curry(function(a, b, c) {
     *   console.log(a + b + c);
     * });
     *
     * curried(1)(2)(3);
     * // => 6
     *
     * curried(1, 2)(3);
     * // => 6
     *
     * curried(1, 2, 3);
     * // => 6
     */
    function curry(func, arity) {
      arity = typeof arity == 'number' ? arity : (+arity || func.length);
      return createWrapper(func, 4, null, null, null, arity);
    }

    /**
     * Creates a function that will delay the execution of `func` until after
     * `wait` milliseconds have elapsed since the last time it was invoked.
     * Provide an options object to indicate that `func` should be invoked on
     * the leading and/or trailing edge of the `wait` timeout. Subsequent calls
     * to the debounced function will return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify execution on the leading edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be delayed before it's called.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * var lazyLayout = _.debounce(calculateLayout, 150);
     * jQuery(window).on('resize', lazyLayout);
     *
     * // execute `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * });
     *
     * // ensure `batchLog` is executed once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * source.addEventListener('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }, false);
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      wait = nativeMax(0, wait) || 0;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && (nativeMax(wait, options.maxWait) || 0);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      var delayed = function() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      };

      var maxDelayed = function() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      };

      return function() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      };
    }

    /**
     * Defers executing the `func` function until the current call stack has cleared.
     * Additional arguments will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to defer.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 1);
      return setTimeout(function() { func.apply(undefined, args); }, 1);
    }

    /**
     * Executes the `func` function after `wait` milliseconds. Additional arguments
     * will be provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay execution.
     * @param {...*} [arg] Arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var args = slice(arguments, 2);
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it will be used to determine the cache key for storing the result
     * based on the arguments provided to the memoized function. By default, the
     * first argument provided to the memoized function is used as the cache key.
     * The `func` is executed with the `this` binding of the memoized function.
     * The result cache is exposed as the `cache` property on the memoized function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] A function used to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var fibonacci = _.memoize(function(n) {
     *   return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
     * });
     *
     * fibonacci(9)
     * // => 34
     *
     * var data = {
     *   'fred': { 'name': 'fred', 'age': 40 },
     *   'pebbles': { 'name': 'pebbles', 'age': 1 }
     * };
     *
     * // modifying the result cache
     * var get = _.memoize(function(name) { return data[name]; }, _.identity);
     * get('pebbles');
     * // => { 'name': 'pebbles', 'age': 1 }
     *
     * get.cache.pebbles.name = 'penelope';
     * get('pebbles');
     * // => { 'name': 'penelope', 'age': 1 }
     */
    function memoize(func, resolver) {
      if (!isFunction(func)) {
        throw new TypeError;
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : keyPrefix + arguments[0];

        return hasOwnProperty.call(cache, key)
          ? cache[key]
          : (cache[key] = func.apply(this, arguments));
      }
      memoized.cache = {};
      return memoized;
    }

    /**
     * Creates a function that is restricted to execute `func` once. Repeat calls to
     * the function will return the value of the first call. The `func` is executed
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` executes `createApplication` once
     */
    function once(func) {
      var ran,
          result;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      return function() {
        if (ran) {
          return result;
        }
        ran = true;
        result = func.apply(this, arguments);

        // clear the `func` variable so the function may be garbage collected
        func = null;
        return result;
      };
    }

    /**
     * Creates a function that, when called, invokes `func` with any additional
     * `partial` arguments prepended to those provided to the new function. This
     * method is similar to `_.bind` except it does **not** alter the `this` binding.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) { return greeting + ' ' + name; };
     * var hi = _.partial(greet, 'hi');
     * hi('fred');
     * // => 'hi fred'
     */
    function partial(func) {
      return createWrapper(func, 16, slice(arguments, 1));
    }

    /**
     * This method is like `_.partial` except that `partial` arguments are
     * appended to those provided to the new function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [arg] Arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var defaultsDeep = _.partialRight(_.merge, _.defaults);
     *
     * var options = {
     *   'variable': 'data',
     *   'imports': { 'jq': $ }
     * };
     *
     * defaultsDeep(options, _.templateSettings);
     *
     * options.variable
     * // => 'data'
     *
     * options.imports
     * // => { '_': _, 'jq': $ }
     */
    function partialRight(func) {
      return createWrapper(func, 32, null, slice(arguments, 1));
    }

    /**
     * Creates a function that, when executed, will only call the `func` function
     * at most once per every `wait` milliseconds. Provide an options object to
     * indicate that `func` should be invoked on the leading and/or trailing edge
     * of the `wait` timeout. Subsequent calls to the throttled function will
     * return the result of the last `func` call.
     *
     * Note: If `leading` and `trailing` options are `true` `func` will be called
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle executions to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify execution on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify execution on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * var throttled = _.throttle(updatePosition, 100);
     * jQuery(window).on('scroll', throttled);
     *
     * // execute `renewToken` when the click event is fired, but not more than once every 5 minutes
     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
     *   'trailing': false
     * }));
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError;
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? options.leading : leading;
        trailing = 'trailing' in options ? options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = wait;
      debounceOptions.trailing = trailing;

      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Additional arguments provided to the function are appended
     * to those provided to the wrapper function. The wrapper is executed with
     * the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Functions
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('Fred, Wilma, & Pebbles');
     * // => '<p>Fred, Wilma, &amp; Pebbles</p>'
     */
    function wrap(value, wrapper) {
      return createWrapper(wrapper, 16, [value]);
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'name': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Produces a callback bound to an optional `thisArg`. If `func` is a property
     * name the created callback will return the property value for a given element.
     * If `func` is an object the created callback will return `true` for elements
     * that contain the equivalent object properties, otherwise it will return `false`.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} [func=identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of the created callback.
     * @param {number} [argCount] The number of arguments the callback accepts.
     * @returns {Function} Returns a callback function.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.createCallback = _.wrap(_.createCallback, function(func, callback, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(callback);
     *   return !match ? func(callback, thisArg) : function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(characters, 'age__gt38');
     * // => [{ 'name': 'fred', 'age': 40 }]
     */
    function createCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (func == null || type == 'function') {
        return baseCreateCallback(func, thisArg, argCount);
      }
      // handle "_.pluck" style callback shorthands
      if (type != 'object') {
        return property(func);
      }
      var props = keys(func),
          key = props[0],
          a = func[key];

      // handle "_.where" style callback shorthands
      if (props.length == 1 && a === a && !isObject(a)) {
        // fast path the common case of providing an object with a single
        // property containing a primitive value
        return function(object) {
          var b = object[key];
          return a === b && (a !== 0 || (1 / a == 1 / b));
        };
      }
      return function(object) {
        var length = props.length,
            result = false;

        while (length--) {
          if (!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))) {
            break;
          }
        }
        return result;
      };
    }

    /**
     * Converts the characters `&`, `<`, `>`, `"`, and `'` in `string` to their
     * corresponding HTML entities.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('Fred, Wilma, & Pebbles');
     * // => 'Fred, Wilma, &amp; Pebbles'
     */
    function escape(string) {
      return string == null ? '' : String(string).replace(reUnescapedHtml, escapeHtmlChar);
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Adds function properties of a source object to the destination object.
     * If `object` is a function methods will be added to its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Function|Object} [object=lodash] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added are chainable.
     * @example
     *
     * function capitalize(string) {
     *   return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
     * }
     *
     * _.mixin({ 'capitalize': capitalize });
     * _.capitalize('fred');
     * // => 'Fred'
     *
     * _('fred').capitalize().value();
     * // => 'Fred'
     *
     * _.mixin({ 'capitalize': capitalize }, { 'chain': false });
     * _('fred').capitalize();
     * // => 'Fred'
     */
    function mixin(object, source, options) {
      var chain = true,
          methodNames = source && functions(source);

      if (!source || (!options && !methodNames.length)) {
        if (options == null) {
          options = source;
        }
        ctor = lodashWrapper;
        source = object;
        object = lodash;
        methodNames = functions(source);
      }
      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      var ctor = object,
          isFunc = isFunction(ctor);

      forEach(methodNames, function(methodName) {
        var func = object[methodName] = source[methodName];
        if (isFunc) {
          ctor.prototype[methodName] = function() {
            var chainAll = this.__chain__,
                value = this.__wrapped__,
                args = [value];

            push.apply(args, arguments);
            var result = func.apply(object, args);
            if (chain || chainAll) {
              if (value === result && isObject(result)) {
                return this;
              }
              result = new ctor(result);
              result.__chain__ = chainAll;
            }
            return result;
          };
        }
      });
    }

    /**
     * Reverts the '_' variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var object = { 'name': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // no operation performed
    }

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @example
     *
     * var stamp = _.now();
     * _.defer(function() { console.log(_.now() - stamp); });
     * // => logs the number of milliseconds it took for the deferred function to be called
     */
    var now = isNative(now = Date.now) && now || function() {
      return new Date().getTime();
    };

    /**
     * Converts the given value into an integer of the specified radix.
     * If `radix` is `undefined` or `0` a `radix` of `10` is used unless the
     * `value` is a hexadecimal, in which case a `radix` of `16` is used.
     *
     * Note: This method avoids differences in native ES3 and ES5 `parseInt`
     * implementations. See http://es5.github.io/#E.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} value The value to parse.
     * @param {number} [radix] The radix used to interpret the value to parse.
     * @returns {number} Returns the new integer value.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     */
    var parseInt = nativeParseInt(whitespace + '08') == 8 ? nativeParseInt : function(value, radix) {
      // Firefox < 21 and Opera < 15 follow the ES3 specified implementation of `parseInt`
      return nativeParseInt(isString(value) ? value.replace(reLeadingSpacesAndZeros, '') : value, radix || 0);
    };

    /**
     * Creates a "_.pluck" style function, which returns the `key` value of a
     * given object.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} key The name of the property to retrieve.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var characters = [
     *   { 'name': 'fred',   'age': 40 },
     *   { 'name': 'barney', 'age': 36 }
     * ];
     *
     * var getName = _.property('name');
     *
     * _.map(characters, getName);
     * // => ['barney', 'fred']
     *
     * _.sortBy(characters, getName);
     * // => [{ 'name': 'barney', 'age': 36 }, { 'name': 'fred',   'age': 40 }]
     */
    function property(key) {
      return function(object) {
        return object[key];
      };
    }

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number will be
     * returned. If `floating` is truey or either `min` or `max` are floats a
     * floating-point number will be returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating=false] Specify returning a floating-point number.
     * @returns {number} Returns a random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (typeof min == 'boolean' && noMax) {
          floating = min;
          min = 1;
        }
        else if (!noMax && typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand +'').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /**
     * Resolves the value of property `key` on `object`. If `key` is a function
     * it will be invoked with the `this` binding of `object` and its result returned,
     * else the property value is returned. If `object` is falsey then `undefined`
     * is returned.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {Object} object The object to inspect.
     * @param {string} key The name of the property to resolve.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = {
     *   'cheese': 'crumpets',
     *   'stuff': function() {
     *     return 'nonsense';
     *   }
     * };
     *
     * _.result(object, 'cheese');
     * // => 'crumpets'
     *
     * _.result(object, 'stuff');
     * // => 'nonsense'
     */
    function result(object, key) {
      if (object) {
        var value = object[key];
        return isFunction(value) ? object[key]() : value;
      }
    }

    /**
     * A micro-templating method that handles arbitrary delimiters, preserves
     * whitespace, and correctly escapes quotes within interpolated code.
     *
     * Note: In the development build, `_.template` utilizes sourceURLs for easier
     * debugging. See http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
     *
     * For more information on precompiling templates see:
     * http://lodash.com/custom-builds
     *
     * For more information on Chrome extension sandboxes see:
     * http://developer.chrome.com/stable/extensions/sandboxingEval.html
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} text The template text.
     * @param {Object} data The data object used to populate the text.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as local variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [variable] The data object variable name.
     * @returns {Function|string} Returns a compiled function when no `data` object
     *  is given, else it returns the interpolated text.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= name %>');
     * compiled({ 'name': 'fred' });
     * // => 'hello fred'
     *
     * // using the "escape" delimiter to escape HTML in data property values
     * _.template('<b><%- value %></b>', { 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to generate HTML
     * var list = '<% _.forEach(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the ES6 delimiter as an alternative to the default "interpolate" delimiter
     * _.template('hello ${ name }', { 'name': 'pebbles' });
     * // => 'hello pebbles'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * _.template('<% print("hello " + name); %>!', { 'name': 'barney' });
     * // => 'hello barney!'
     *
     * // using a custom template delimiters
     * _.templateSettings = {
     *   'interpolate': /{{([\s\S]+?)}}/g
     * };
     *
     * _.template('hello {{ name }}!', { 'name': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using the `imports` option to import jQuery
     * var list = '<% jq.each(people, function(name) { %><li><%- name %></li><% }); %>';
     * _.template(list, { 'people': ['fred', 'barney'] }, { 'imports': { 'jq': jQuery } });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= name %>', null, { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.name %>!', null, { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '', __e = _.escape;
     *   __p += 'hi ' + ((__t = ( data.name )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(text, data, options) {
      // based on John Resig's `tmpl` implementation
      // http://ejohn.org/blog/javascript-micro-templating/
      // and Laura Doktorova's doT.js
      // https://github.com/olado/doT
      var settings = lodash.templateSettings;
      text = String(text || '');

      // avoid missing dependencies when `iteratorTemplate` is not defined
      options = defaults({}, options, settings);

      var imports = defaults({}, options.imports, settings.imports),
          importsKeys = keys(imports),
          importsValues = values(imports);

      var isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // compile the regexp to match each delimiter
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // escape characters that cannot be included in string literals
        source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // replace delimiters with snippets
        if (escapeValue) {
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // the JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value
        return match;
      });

      source += "';\n";

      // if `variable` is not specified, wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain
      var variable = options.variable,
          hasVariable = variable;

      if (!hasVariable) {
        variable = 'obj';
        source = 'with (' + variable + ') {\n' + source + '\n}\n';
      }
      // cleanup code by stripping empty strings
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // frame code as the function body
      source = 'function(' + variable + ') {\n' +
        (hasVariable ? '' : variable + ' || (' + variable + ' = {});\n') +
        "var __t, __p = '', __e = _.escape" +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      // Use a sourceURL for easier debugging.
      // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl
      var sourceURL = '\n/*\n//# sourceURL=' + (options.sourceURL || '/lodash/template/source[' + (templateCounter++) + ']') + '\n*/';

      try {
        var result = Function(importsKeys, 'return ' + source + sourceURL).apply(undefined, importsValues);
      } catch(e) {
        e.source = source;
        throw e;
      }
      if (data) {
        return result(data);
      }
      // provide the compiled function's source by its `toString` method, in
      // supported environments, or the `source` property as a convenience for
      // inlining compiled templates during the build process
      result.source = source;
      return result;
    }

    /**
     * Executes the callback `n` times, returning an array of the results
     * of each callback execution. The callback is bound to `thisArg` and invoked
     * with one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {number} n The number of times to execute the callback.
     * @param {Function} callback The function called per iteration.
     * @param {*} [thisArg] The `this` binding of `callback`.
     * @returns {Array} Returns an array of the results of each `callback` execution.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => calls `mage.castSpell(n)` three times, passing `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also calls `mage.castSpell(n)` three times
     */
    function times(n, callback, thisArg) {
      n = (n = +n) > -1 ? n : 0;
      var index = -1,
          result = Array(n);

      callback = baseCreateCallback(callback, thisArg, 1);
      while (++index < n) {
        result[index] = callback(index);
      }
      return result;
    }

    /**
     * The inverse of `_.escape` this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to their
     * corresponding characters.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} string The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('Fred, Barney &amp; Pebbles');
     * // => 'Fred, Barney & Pebbles'
     */
    function unescape(string) {
      return string == null ? '' : String(string).replace(reEscapedHtml, unescapeHtmlChar);
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID will be appended to it.
     *
     * @static
     * @memberOf _
     * @category Utilities
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return String(prefix == null ? '' : prefix) + id;
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps the given value with explicit
     * method chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney',  'age': 36 },
     *   { 'name': 'fred',    'age': 40 },
     *   { 'name': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(characters)
     *     .sortBy('age')
     *     .map(function(chr) { return chr.name + ' is ' + chr.age; })
     *     .first()
     *     .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      value = new lodashWrapper(value);
      value.__chain__ = true;
      return value;
    }

    /**
     * Invokes `interceptor` with the `value` as the first argument and then
     * returns `value`. The purpose of this method is to "tap into" a method
     * chain in order to perform operations on intermediate results within
     * the chain.
     *
     * @static
     * @memberOf _
     * @category Chaining
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3, 4])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [3, 2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chaining
     * @returns {*} Returns the wrapper object.
     * @example
     *
     * var characters = [
     *   { 'name': 'barney', 'age': 36 },
     *   { 'name': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(characters).first();
     * // => { 'name': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(characters).chain()
     *   .first()
     *   .pick('age')
     *   .value();
     * // => { 'age': 36 }
     */
    function wrapperChain() {
      this.__chain__ = true;
      return this;
    }

    /**
     * Produces the `toString` result of the wrapped value.
     *
     * @name toString
     * @memberOf _
     * @category Chaining
     * @returns {string} Returns the string result.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return String(this.__wrapped__);
    }

    /**
     * Extracts the wrapped value.
     *
     * @name valueOf
     * @memberOf _
     * @alias value
     * @category Chaining
     * @returns {*} Returns the wrapped value.
     * @example
     *
     * _([1, 2, 3]).valueOf();
     * // => [1, 2, 3]
     */
    function wrapperValueOf() {
      return this.__wrapped__;
    }

    /*--------------------------------------------------------------------------*/

    // add functions that return wrapped values when chaining
    lodash.after = after;
    lodash.assign = assign;
    lodash.at = at;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.chain = chain;
    lodash.compact = compact;
    lodash.compose = compose;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.createCallback = createCallback;
    lodash.curry = curry;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.max = max;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.min = min;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.pull = pull;
    lodash.range = range;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.sortBy = sortBy;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.values = values;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // add aliases
    lodash.collect = map;
    lodash.drop = rest;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;
    lodash.unzip = zip;

    // add functions to `lodash.prototype`
    mixin(lodash);

    /*--------------------------------------------------------------------------*/

    // add functions that return unwrapped values when chaining
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.contains = contains;
    lodash.escape = escape;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.has = has;
    lodash.identity = identity;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isNaN = isNaN;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isUndefined = isUndefined;
    lodash.lastIndexOf = lastIndexOf;
    lodash.mixin = mixin;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.template = template;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;

    // add aliases
    lodash.all = every;
    lodash.any = some;
    lodash.detect = find;
    lodash.findWhere = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.include = contains;
    lodash.inject = reduce;

    mixin(function() {
      var source = {}
      forOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }(), false);

    /*--------------------------------------------------------------------------*/

    // add functions capable of returning wrapped and unwrapped values when chaining
    lodash.first = first;
    lodash.last = last;
    lodash.sample = sample;

    // add aliases
    lodash.take = first;
    lodash.head = first;

    forOwn(lodash, function(func, methodName) {
      var callbackable = methodName !== 'sample';
      if (!lodash.prototype[methodName]) {
        lodash.prototype[methodName]= function(n, guard) {
          var chainAll = this.__chain__,
              result = func(this.__wrapped__, n, guard);

          return !chainAll && (n == null || (guard && !(callbackable && typeof n == 'function')))
            ? result
            : new lodashWrapper(result, chainAll);
        };
      }
    });

    /*--------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = '2.4.1';

    // add "Chaining" functions to the wrapper
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.value = wrapperValueOf;
    lodash.prototype.valueOf = wrapperValueOf;

    // add `Array` functions that return unwrapped values
    forEach(['join', 'pop', 'shift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        var chainAll = this.__chain__,
            result = func.apply(this.__wrapped__, arguments);

        return chainAll
          ? new lodashWrapper(result, chainAll)
          : result;
      };
    });

    // add `Array` functions that return the existing wrapped value
    forEach(['push', 'reverse', 'sort', 'unshift'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        func.apply(this.__wrapped__, arguments);
        return this;
      };
    });

    // add `Array` functions that return new wrapped values
    forEach(['concat', 'slice', 'splice'], function(methodName) {
      var func = arrayRef[methodName];
      lodash.prototype[methodName] = function() {
        return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);
      };
    });

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // expose Lo-Dash
  var _ = runInContext();

  // some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lo-Dash to the global object even when an AMD loader is present in
    // case Lo-Dash is loaded with a RequireJS shim config.
    // See http://requirejs.org/docs/api.html#config-shim
    root._ = _;

    // define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module
    define(function() {
      return _;
    });
  }
  // check for `exports` after `define` in case a build optimizer adds an `exports` object
  else if (freeExports && freeModule) {
    // in Node.js or RingoJS
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // in Narwhal or Rhino -require
    else {
      freeExports._ = _;
    }
  }
  else {
    // in a browser or Rhino
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
