Ext.data.JsonP.Functions_Numeric_Division({"tagname":"class","name":"Functions.Numeric.Division","autodetected":{},"files":[{"filename":"Division.js","href":"Division.html#Functions-Numeric-Division"}],"extends":"Function","members":[{"name":"value","tagname":"method","owner":"Functions.Numeric.Division","id":"method-value","meta":{}}],"alternateClassNames":[],"aliases":{},"id":"class-Functions.Numeric.Division","short_doc":"Function that returns the result of a division between two numbers\n\nExample with Extend operator :\n\n var relation = n...","component":false,"superclasses":["Function"],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>Function<div class='subclass '><strong>Functions.Numeric.Division</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/Division.html#Functions-Numeric-Division' target='_blank'>Division.js</a></div></pre><div class='doc-contents'><p>Function that returns the result of a division between two numbers</p>\n\n<p>Example with Extend operator :</p>\n\n<pre><code> var relation = new affinity.Relation([\n     { A :  {type : affinity.Integer} },\n ],[\n     [-2], [-1], [0], [1], [2]]\n ])\n\n var relation2 = relation.extend([{B : relation.get('A')}]);\n\n var product = relation2.project(['A']).product(relation2.get('B'));\n\n var A = product.get('A');\n var B = product.get('B');\n\n\n var extended = product.extend([{\"A / B\" : A.div(B)}]);\n\n // or equivalent\n\n new affinity.Extend(product, [{ \"A / B\" : new affinity.Division(A, B) }])\n\n\n extended.print();\n\n\n // (Standard behaviour of JavaScript)\n // +---------------+---------------+-----------------+\n // | A : Integer   | B : Integer   | A / B : Numeric |\n // +===============+===============+=================+\n // | -2            | -2            | 1               |\n // +---------------+---------------+-----------------+\n // | -2            | -1            | 2               |\n // +---------------+---------------+-----------------+\n // | -2            | 0             | -Infinity       |\n // +---------------+---------------+-----------------+\n // | -2            | 1             | -2              |\n // +---------------+---------------+-----------------+\n // | -2            | 2             | -1              |\n // +---------------+---------------+-----------------+\n // | -1            | -2            | 0.5             |\n // +---------------+---------------+-----------------+\n // | -1            | -1            | 1               |\n // +---------------+---------------+-----------------+\n // | -1            | 0             | -Infinity       |\n // +---------------+---------------+-----------------+\n // | -1            | 1             | -1              |\n // +---------------+---------------+-----------------+\n // | -1            | 2             | -0.5            |\n // +---------------+---------------+-----------------+\n // | 0             | -2            | 0               |\n // +---------------+---------------+-----------------+\n // | 0             | -1            | 0               |\n // +---------------+---------------+-----------------+\n // | 0             | 0             | NaN             |\n // +---------------+---------------+-----------------+\n // | 0             | 1             | 0               |\n // +---------------+---------------+-----------------+\n // | 0             | 2             | 0               |\n // +---------------+---------------+-----------------+\n // | 1             | -2            | -0.5            |\n // +---------------+---------------+-----------------+\n // | 1             | -1            | -1              |\n // +---------------+---------------+-----------------+\n // | 1             | 0             | Infinity        |\n // +---------------+---------------+-----------------+\n // | 1             | 1             | 1               |\n // +---------------+---------------+-----------------+\n // | 1             | 2             | 0.5             |\n // +---------------+---------------+-----------------+\n // | 2             | -2            | -1              |\n // +---------------+---------------+-----------------+\n // | 2             | -1            | -2              |\n // +---------------+---------------+-----------------+\n // | 2             | 0             | Infinity        |\n // +---------------+---------------+-----------------+\n // | 2             | 1             | 2               |\n // +---------------+---------------+-----------------+\n // | 2             | 2             | 1               |\n // +---------------+---------------+-----------------+\n</code></pre>\n</div><div class='members'><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-value' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='Functions.Numeric.Division'>Functions.Numeric.Division</span><br/><a href='source/Division.html#Functions-Numeric-Division-method-value' target='_blank' class='view-source'>view source</a></div><a href='#!/api/Functions.Numeric.Division-method-value' class='name expandable'>value</a>( <span class='pre'></span> ) : number<span class=\"signature\"></span></div><div class='description'><div class='short'>Gets the function result ...</div><div class='long'><p>Gets the function result</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>number</span><div class='sub-desc'>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});